<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有我，有她</title>
      <link href="/2021/02/09/you-wo-you-ta/"/>
      <url>/2021/02/09/you-wo-you-ta/</url>
      
        <content type="html"><![CDATA[<h2 id="有我，有她"><a href="#有我，有她" class="headerlink" title="有我，有她"></a>有我，有她</h2><p><img src="https://img04.sogoucdn.com/app/a/100520146/3050f219aff799b5f51593f85edd7d2f" alt="公众号：康康xxx"></p><h3 id="《越人歌》"><a href="#《越人歌》" class="headerlink" title="《越人歌》"></a><i class="far fa-hand-point-right"></i>《越人歌》</h3><p>今夕何夕兮，搴舟中流。<br>今日何日兮，得与王子同舟。<br>蒙羞被好兮，不訾诟耻。<br>心几烦而不绝兮，得知王子。<br><strong>山有木兮木有枝，心悦君兮君不知。</strong></p><p><img src="https://img01.sogoucdn.com/app/a/100520146/775d7753081db1a03cc01cb841c30e43" alt="kang"></p><blockquote><p>今夕何夕，我与你相遇；这是多么幸运，我可以和你同舟；这是多么让人开心，我可以认识你。山上有树木，树木有枝娅，我喜欢你你却不知道。</p></blockquote><hr><h3 id="《上邪》"><a href="#《上邪》" class="headerlink" title="《上邪》"></a><i class="far fa-hand-point-right"></i>《上邪》</h3><p>上邪！<strong>我欲与君相知，长命无绝衰。</strong><br>山无陵，江水为竭。冬雷震震，夏雨雪。<br>天地合，乃敢与君绝！</p><p><img src="https://img01.sogoucdn.com/app/a/100520146/5d303903f89a3827ad7135c97f74cae9" alt="kang"></p><blockquote><p>我欲与君相知，长命无绝衰：我要与你相知相依一辈子，天塌下来才敢和你分离。</p></blockquote><hr><h3 id="《长命女·春日宴》"><a href="#《长命女·春日宴》" class="headerlink" title="《长命女·春日宴》"></a><i class="far fa-hand-point-right"></i>《长命女·春日宴》</h3><p>春日宴，绿酒一杯歌一遍。<br>再拜陈三愿：<br>一愿郎君千岁，二愿妾身常健，<br><strong>三愿如同梁上燕，岁岁长相见。</strong></p><p><img src="https://img03.sogoucdn.com/app/a/100520146/45963075d5bf2e19eaf1ac50bcd68b56" alt="kang"></p><blockquote><p>三愿如同梁上燕，岁岁长相见：愿我俩像燕子一样长相依，又贴切，又委婉。</p></blockquote><h3 id="《赋得自君之出矣》"><a href="#《赋得自君之出矣》" class="headerlink" title="《赋得自君之出矣》"></a><i class="far fa-hand-point-right"></i>《赋得自君之出矣》</h3><p>自君之出矣，不复理残机。<br><strong>思君如满月，夜夜减清辉。</strong></p><p><img src="https://img03.sogoucdn.com/app/a/100520146/39636b3b27e5050ff73e82697d612e82" alt="kang"></p><blockquote><p>思君如满月，夜夜减清辉：我对你的思念如满月，每天都在清减。</p></blockquote><hr><h3 id="《新添声杨柳枝词二首》"><a href="#《新添声杨柳枝词二首》" class="headerlink" title="《新添声杨柳枝词二首》"></a><i class="far fa-hand-point-right"></i>《新添声杨柳枝词二首》</h3><p>一尺深红胜曲尘，天生旧物不如新。<br>合欢桃核终堪恨，里许元来别有人。<br>井底点灯深烛伊，共郎长行莫围棋。<br><strong>玲珑骰子安红豆，入骨相思知不知。</strong></p><p><img src="https://img02.sogoucdn.com/app/a/100520146/97207a5531a5f4772d4e45ee69e8c3fd" alt="kang"></p><blockquote><p>玲珑骰子安红豆，入骨相思知不知：我很爱你呀，你可知道我的心意。</p></blockquote><hr><h3 id="《卜算子·我住长江头》"><a href="#《卜算子·我住长江头》" class="headerlink" title="《卜算子·我住长江头》"></a><i class="far fa-hand-point-right"></i>《卜算子·我住长江头》</h3><p>我住长江头，君住长江尾。<br>日日思君不见君，共饮长江水。<br>此水几时休，此恨何时已。<br><strong>只愿君心似我心，定不负相思意。</strong></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/46c9909904cb55e40d41a84fa1eb7e47" alt="kang"></p><blockquote><p>只愿君心似我心，定不负相思意：你若不离不弃，我定生死相依。</p></blockquote><hr><h3 id="《行行重行行》"><a href="#《行行重行行》" class="headerlink" title="《行行重行行》"></a><i class="far fa-hand-point-right"></i>《行行重行行》</h3><p>行行重行行，与君生别离。<br>相去万余里，各在天一涯。<br>道路阻且长，会面安可知。<br>胡马依北风，越鸟巢南枝。<br>相去日已远，衣带日已缓。<br>浮云蔽白日，游子不顾返。<br><strong>思君令人老，岁月忽已晚。</strong><br>弃捐勿复道，努力加餐饭。</p><p><img src="https://img03.sogoucdn.com/app/a/100520146/e1a47a70eae3bf7cfd1d966769633074" alt="kang"></p><blockquote><p>思君令人老，岁月忽已晚：因为太过思念你，令我忧伤消瘦，岁月飞度。</p></blockquote><hr><h3 id="《古相思曲》"><a href="#《古相思曲》" class="headerlink" title="《古相思曲》"></a><i class="far fa-hand-point-right"></i>《古相思曲》</h3><p>君似明月我似雾，雾随月隐空留露。<br>君善抚琴我善舞，曲终人离心若堵。<br><strong>只缘感君一回顾，使我思君朝与暮。</strong><br>魂随君去终不悔， 绵绵相思为君苦。<br>相思苦，凭谁诉？遥遥不知君何处。<br>扶门切思君之嘱，登高望断天涯路。</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/5b7a6a815675fbb2b2385b372d6d9966" alt="kang"></p><blockquote><p>缘感君一回顾，使我思君朝与暮：只因见了你一面，便让我日夜思念。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密倒计时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sonar</title>
      <link href="/2020/10/08/sonar/"/>
      <url>/2020/10/08/sonar/</url>
      
        <content type="html"><![CDATA[<p>1、启动，sonarqube-7.9.1\bin\windows-x86-64\StartSonar.bat</p><p>2、汉化，Chinese Pack插件</p><p>3、手动创建一个数据库（如：sonar）</p><p>4、配置数据库<br>    #sonarqube从7.9起，不再支持jdk11以下版本<br>    #sonarqube从7.8起，不再支持mysql<br><br>    #sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false<br>    #sonar.jdbc.username=root<br>    #sonar.jdbc.password=root<br>    #sonar.sorceEncoding=UTF-8<br>    #sonar.login=admin<br>    #sonar.password=admin<br><br><br>    sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false<br>    sonar.jdbc.username=root<br>    sonar.jdbc.password=root</p><p>5、集成到maven<br>    <profiles><br>        <profile><br>            <id>sonar</id><br>            <activation><br>                <activebydefault>true</activebydefault><br>            </activation><br>            <properties><br>                &lt;sonar.jdbc.url&gt;<br>                    jdbc:mysql://127.0.0.1:3306/sonar<br>                &lt;/sonar.jdbc.url&gt;<br>                &lt;sonar.jdbc.driver&gt;com.mysql.jdbc.Driver&lt;/sonar.jdbc.driver&gt;<br>                &lt;sonar.jdbc.username&gt;root&lt;/sonar.jdbc.username&gt;<br>                &lt;sonar.jdbc.password&gt;root&lt;/sonar.jdbc.password&gt;<br>                &lt;sonar.host.url&gt;<a href="http://127.0.0.1:9000" target="_blank" rel="noopener">http://127.0.0.1:9000</a>&lt;/sonar.host.url&gt;<br>                <!-- your_sonar_host是你的服务器地址，如果你的服务在本机则使用localhost --><br>            </properties><br>        </profile><br>    </profiles></p><p>6、使用（扫描代码并上传到sonarqube代理的服务器上） – 需要先启动sonarqube<br>    1、用idea插件处理sonar<br>        安装插件sonarLint<br>        配置SonarQube servers</p><pre><code>2、集成jenkens3、使用sonar-scanner    1、下载    2、配置：        sonar.host.url=http://localhost:9000        sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance        sonar.jdbc.username=root        sonar.jdbc.password=root        sonar.login=admin        sonar.password=admin        #配置是否禁用版本管理工具，或指定版本管理工具为： -Dsonar.scm.provider=git        sonar.scm.disabled=true    3、打开cmd进入项目的根目录（与pom同层级）配置项目 并在项目根目录下执行 sonar-scanner 即可</code></pre>]]></content>
      
      
      <categories>
          
          <category> sonar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx从入门到入土</title>
      <link href="/2020/09/07/nginx-cong-ru-men-dao-ru-tu/"/>
      <url>/2020/09/07/nginx-cong-ru-men-dao-ru-tu/</url>
      
        <content type="html"><![CDATA[<p>linux下安装nginx</p><p>1、下载压缩包</p><p>2、安装依赖<br>    yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</p><p>3、将压缩包移动到 /usr/local/目录下解压并进入根目录<br>    tar -zxvf nginx-1.9.9.tar.gz<br>    cd nginx-1.9.9</p><p>4、安装<br>    ./configure –prefix=/usr/local/nginx<br>    make<br>    make install</p><p>5、开启防火墙需要放行的端口<br>    firewall-cmd –list-all 查看开放的端口<br>    sudo firewall-cmd –add-port=80/tcp –permanent  开启防火墙80端口<br>    firewall-cmd –reload  重启防火墙</p><p>6、常见操作<br>     cd /usr/local/nginx/sbin<br>     ./nginx -v           查看版本<br>     ./nginx             启动<br>     ./nginx -s stop     关闭<br>     ./nginx -s reload     重启（重新加载）</p><p>7、配置高可用<br>    需要两台服务器分别安装nginx,一台主nginx一台辅nginx。当主nginx宕机时辅nginx启动工作。<br>    用户通过一个虚拟ip对nginx进行访问（需要安装keepalived）<br>    yum install keepalived -y       安装keepalived<br>    cd /etc/keepalived                 进入安装目录<br>    vim keepalived.conf               修改配置</p><pre><code>    #心跳检查脚本设置    vrrp_script chk_nginx {        script &quot;/etc/keepalived/check_nginx.sh&quot;     # 心跳检测角本路径        interval 2             #脚本执行间隔，每2s检测一次        weight -5           #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 -5        fall 3                 #检测连续2次失败才算确定是真失败。会用weight减少优先级（1-255之间）        rise 2                 #检测1次成功就算成功。但不修改优先级    }    #主备设置    vrrp_instance VI_1 {        state MASTER|BACKUP           # MASTER为主机，BACKUP为辅机        virtual_router_id num        #虚拟路由标识，MASTER和BACKUP必须是一致的        interface ens33                #网卡名称        priority 100                #定义优先级，数字越大，优先级越高如：主100，辅90        advert_int 2                #设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒        #mcast_src_ip 192.168.0.118     #发送多播数据包时的源IP地址        #nopreempt        #smtp_alert        #lvs_sync_daemon_interface string         #设置验证类型和密码。主从必须一样        authentication {            auth_type PASS|AH   #设置vrrp验证类型            auth_pass kang    #设置vrrp验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信        }        #虚拟地址配置        virtual_ipaddress {            # 配置虚拟ip -- 即替代nginx的ip地址（浏览器访问地址），可配置多个.            ##如果两个nginx的ip分别是192.168.232.201,...205，则此处的虚拟ip跟它俩同一个网段即可(主从配置要相同)            192.168.111.150            192.168.111.190        }        #使用脚本设置        track_script {            chk_nginx         #心跳脚本，即在 vrrp_script 部分指定的名字        }    }    心跳检查脚本(配置nginx的ip与port) ---------------------- check_nginx.sh        脚本一：检测ip            #!/bin/bash            count=0            for (( k=0; k&lt;2; k++ ))            do             check_code=$( curl --connect-timeout 3 -sL -w &quot;%{http_code}\\n&quot; http://localhost:81 -o /dev/null )             if [ &quot;$check_code&quot; != &quot;200&quot; ]; then              count=count +1              continue             else              count = 0              break             fi            done            if [ &quot;$count&quot; != &quot;0&quot; ]; then             killall keepalived             exit 1            else             exit 0            fi        脚本二：检测nginx            #!/bin/bash            A=`ps -C nginx --no-header |wc -l`                    if [ $A -eq 0 ];then                                            /usr/local/nginx/sbin/nginx                if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then                    exit 1                else                    exit 0                fi            else                exit 0            fi启动keepalived    cd /bin    systemctl start keepalived.service    systemctl restart keepalived.service    ip add show ens33   查看网卡上启动的ip</code></pre><p>1、全局快<br>    配置一些影响nginx整体运行的配置</p><p>2、event块<br>    影响nginx与用户的网络连接状态</p><p>3、http块<br>    操作最频繁的块<br>    一个server块就是一个虚拟主机。</p><pre><code>#监听的端口，也可以写为192.168.0.5:8080 如此些后，server_name将不起作用listen 8080;server_name 192.168.0.5;1.完全匹配    location = / {        #代理(转发)到哪个目的地址        prosy_pass: 192.168.0.8:8082/kang/index;    }2.优先匹配    location ~ / {        prosy_pass: 192.168.0.9:8082/kang/index;    }3.通用匹配    location / {        #没有子路径时使用root来指定静态文件路径，若用alias指定静态路径的话末尾需要带&#39;/&#39;，        #若是带子目录的请求需要用alias且末尾不加&#39;/&#39;        root /html        #指定上面目录中的首页，默认为index.html        index index.html;        prosy_pass: 192.168.0.8:8082/kang/getUser;    }#带有子目录的地址location /a {    #是否开启查看nginx的状态信息功能    stub_status on;    alias /html;    prosy_pass: 192.168.0.9:8082/kang/getUser;    #允许指定的ip进行访问    allow 192.168.0.8;    #除了以上配置的可以访问的地址外都不允许访问    deny all;}#目录下载功能location /download {    alias /usr/local/nginx/html/download;    autoindex on;}#跳转功能 -- 访问 192.168.0.5:8080将跳转到百度页面location / {    return 302 http://www.baidu.com;}#负载均衡  -- 默认为轮询算法。还有：轮询加权（weight=n）、iphash(ip绑定)、fair(根据相应时间快的优先分配)等upstream kang {    server 192.168.0.8:8081;    server 192.168.0.8:8082;    server 192.168.0.9:8081;    server 192.168.0.9:8082;}location / {    proxy_pass http://kang;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-独霸一方</title>
      <link href="/2020/07/20/git-du-ba-yi-fang/"/>
      <url>/2020/07/20/git-du-ba-yi-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="一、git是何方神圣"><a href="#一、git是何方神圣" class="headerlink" title="一、git是何方神圣"></a>一、git是何方神圣</h2><p>Git 是一个分布式版本控制软件，与CVS、Subversion一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便</p><h2 id="二、为什么要使用版本控制"><a href="#二、为什么要使用版本控制" class="headerlink" title="二、为什么要使用版本控制"></a>二、为什么要使用版本控制</h2><p>如果我们要在一个开发好的项目上进行修改或者功能的添加是非常危险的行为，万一弄不好原来的代码都运行不了；按正常的思路，copy一份出来单独来弄，如果有了版本控制的机制，可以实现项目不同开发阶段的代码管理，而且对每个开发阶段进行了类似编号的控制，方便我们能回退到某个版本，其实说白了就是有后悔药吃！</p><h2 id="三、安装git"><a href="#三、安装git" class="headerlink" title="三、安装git"></a>三、安装git</h2><pre><code>下载：https://git-scm.com/download/win选择安装目录一直下一步即可</code></pre><h3 id="1、配置个人信息"><a href="#1、配置个人信息" class="headerlink" title="1、配置个人信息"></a>1、配置个人信息</h3><ul><li>git config –global(前面两个横杠) user.name “用户名”</li><li>git config –global(前面两个横杠) user.email “邮箱”</li></ul><h2 id="四、git三大区域"><a href="#四、git三大区域" class="headerlink" title="四、git三大区域"></a>四、git三大区域</h2><p><a href="https://imgchr.com/i/Ufts0J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Ufts0J.md.png" alt="三大区域"></a></p><h3 id="1、git本地工作流程"><a href="#1、git本地工作流程" class="headerlink" title="1、git本地工作流程"></a>1、git本地工作流程</h3><p><a href="https://imgchr.com/i/Uft2fx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uft2fx.png" alt="Uft2fx.png"></a></p><ul><li>在目录中添加、修改、删除文件</li><li>将需要进行版本管理的文件放入暂存区</li><li>将暂存区的文件提交到版本库</li></ul><h3 id="2、文件的四种状态"><a href="#2、文件的四种状态" class="headerlink" title="2、文件的四种状态"></a>2、文件的四种状态</h3><p><a href="https://imgchr.com/i/Uftrm4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uftrm4.md.png" alt="Uftrm4.md.png"></a></p><pre><code>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为StagedUnmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</code></pre><h3 id="3、远程库"><a href="#3、远程库" class="headerlink" title="3、远程库"></a>3、远程库</h3><pre><code>项目克隆时，git自动把本地与远程master分支对应起来，且远程库的默认名称是origin</code></pre><h2 id="五、冲突解决神器beyond-compare-自行了解"><a href="#五、冲突解决神器beyond-compare-自行了解" class="headerlink" title="五、冲突解决神器beyond compare(自行了解)"></a>五、冲突解决神器beyond compare(自行了解)</h2><p>master分支只保留正式版本（线上版本）的代码，新功能开发版本、测试版本都用其他分支来完成。</p><h2 id="六、gitflow工作流"><a href="#六、gitflow工作流" class="headerlink" title="六、gitflow工作流"></a>六、gitflow工作流</h2><p><a href="https://imgchr.com/i/Ufty79" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Ufty79.md.png" alt="Ufty79.md.png"></a><br><a href="https://imgchr.com/i/UftWp6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UftWp6.png" alt="UftWp6.png"></a></p><p>注：中小型公司可能会把 release版本提测、code review 两个步骤省去。</p><h2 id="七、团队协同开发项目的初始化"><a href="#七、团队协同开发项目的初始化" class="headerlink" title="七、团队协同开发项目的初始化"></a>七、团队协同开发项目的初始化</h2><h3 id="1》-个人项目"><a href="#1》-个人项目" class="headerlink" title="1》 个人项目"></a>1》 个人项目</h3><p><a href="https://imgchr.com/i/Uftgt1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uftgt1.md.png" alt="Uftgt1.md.png"></a><br><a href="https://imgchr.com/i/UfNnHJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UfNnHJ.md.png" alt="UfNnHJ.md.png"></a><br><a href="https://imgchr.com/i/UfNmB4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UfNmB4.md.png" alt="UfNmB4.md.png"></a><br><a href="https://imgchr.com/i/UfNeuF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UfNeuF.md.png" alt="UfNeuF.md.png"></a><br>注：点击邀请后对方会受到一封邮件，如果对方同意后就会成功添加到此项目中</p><h3 id="2》-公司项目"><a href="#2》-公司项目" class="headerlink" title="2》 公司项目"></a>2》 公司项目</h3><p><a href="https://imgchr.com/i/UhoRMV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UhoRMV.md.png" alt="UhoRMV.md.png"></a><br><a href="https://imgchr.com/i/Uhogx0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uhogx0.md.png" alt="Uhogx0.md.png"></a><br><a href="https://imgchr.com/i/Uhoc2q" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uhoc2q.md.png" alt="Uhoc2q.md.png"></a><br><a href="https://imgchr.com/i/Uho6Gn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uho6Gn.md.png" alt="Uho6Gn.md.png"></a><br><a href="https://imgchr.com/i/UhoWrT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UhoWrT.md.png" alt="UhoWrT.md.png"></a><br><a href="https://imgchr.com/i/UhofqU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/UhofqU.md.png" alt="UhofqU.md.png"></a><br>注：此处创建仓库与个人项目创建仓库步骤相同<br><a href="https://imgchr.com/i/Uho4ZF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/Uho4ZF.md.png" alt="Uho4ZF.md.png"></a><br>此时就已经创建完成，可以进行代码托管啦<br>发布最初基础框架代码，然后打上 v1 标签，至此基础工作就做完啦</p><h3 id="3》-项目及组织功能简介"><a href="#3》-项目及组织功能简介" class="headerlink" title="3》 项目及组织功能简介"></a>3》 项目及组织功能简介</h3><p><a href="https://imgchr.com/i/U4SiSU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/U4SiSU.md.png" alt="U4SiSU.md.png"></a><br><a href="https://imgchr.com/i/U4S9YV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/U4S9YV.md.png" alt="U4S9YV.md.png"></a><br><a href="https://imgchr.com/i/U4SpF0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/U4SpF0.md.png" alt="U4SpF0.md.png"></a><br><a href="https://imgchr.com/i/U4SCWT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/U4SCWT.md.png" alt="U4SCWT.md.png"></a><br><a href="https://imgchr.com/i/U4VNrV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/20/U4VNrV.md.png" alt="U4VNrV.md.png"></a></p><p>1、还可以给邀请的成员设置权限为可读、可写、管理员等，当然也可以给项目设置权限。<br>2、code - 代码区：提交的所有代码都在此处存放。<br>3、issues - 项目讨论区：所有的项目问题均可以在此处讨论，也可以在此处向指定或所有人提出问题等待回答，遇到项目问题可以先来此处看一下哦。<br>4、pull-requests - 合并请求区：当一个分支开发完成后请求老大（项目组长等）进行code-review就要新建一个pull-requests发送给老大，如果代码没问题则老大同意此请求合并到其他上级分支或主分支。<br>5、wiki - 项目讲解区：此处记录着项目的介绍，不懂项目的业务及功能的可以先来此处看一下哦。<br>6、fork-克隆：当你发现一个主流的开源框架某些缺陷时，你就可以先fork（克隆）一份到自己的github账号，然后再克隆此项目到本地进行修复完善此缺陷，修复成功你感觉很不错，想要告知原作者并将自己的修复代码贡献上去时，你就可以发起一个pull-requests给原作者，若果他感觉很好，同意你贡献的代码合并过来，那他只需同意你发的请求即可，然后你再去面试就可以说自己给某某开源项目贡献过代码，那工资又会升一个等级哟。<br>7、开启代码的review功能，按照图片进行，然后只需要add rule,再给某个分支配置 Branch name pattern就可以啦，如想把dev分支合并到master分支上，只需要add rule后配置Branch name pattern为master即可，当然还可以配置其他功能如让几个人review等。</p><h2 id="八、git常用命令"><a href="#八、git常用命令" class="headerlink" title="八、git常用命令"></a>八、git常用命令</h2><p>git init —&gt; 初始化<br>git status —&gt; 查看当前工作分支状态<br>git add 文件名 —&gt; 添加指定文件到暂存区<br>git add . —&gt; 添加所有文件到暂存区<br>git commit -m ‘描述信息’ —&gt; 提交文件到本地仓库<br>git log —&gt; 查看日志<br>git clone <url> —&gt; 克隆项目<br>git diff —&gt; 比较工作区与暂存区<br>git diff <commit-id> <commit-id> —&gt; 比较两个commit-id之间的差异<br>git diff <branch1> <branch2> —&gt; 两个分支之间比较<br>git diff –staged(前面是两个横线) —&gt; 暂存区和版本库之间的比较(等同于git diff –cached(前面是两个横线))<br>git rm 文件名 —&gt; 从暂存区域移除文件（连带从工作目录中删除指定的文件）<br>git rm –cached(前面是两个横线) 文件名 —&gt; 从暂存区域移除文件<br>git remote —&gt; 查看远程库的信息<br>git remote -v —&gt; 查看远程库的详细信息<br>git remote add origin [url] —&gt; 本地库与远程库关联<br>git reset –hard(前面是两个横线) 版本号 —&gt; 回滚到之前的版本<br>git reflog —&gt; 回滚到之后的版本</branch2></branch1></commit-id></commit-id></url></p><p>注：使用rebase可以更好的得到线性一棵提交树，看起来更直观。rebase过程中可能会发生冲突，此时系统会自动提示你去解决冲突，只需修改后进行git add即可，不需要再次git commit，若是merge提交冲突时只需要git add、git commit即可然后再选择执行如下命令<br>git rebase –continue(前面是两个横线) —&gt; 继续rebase<br>git rebase –abort(前面是两个横线) —&gt; 取消rebase<br>git rebase –skip(前面是两个横线) —&gt; 忽略冲突</p><p>给git pull自动加上rebase参数可以设置<br>1、git config branch.分支名.rebase true —&gt; 给某一个分支自动加–rebase参数<br>2、git config –global branch.autosetuprebase always —&gt; 给所有分支自动加–rebase参数</p><p>如果暂时不想提交当前的开发内容，但又有其他紧急任务要处理，会用到如下命令<br>git stash  —&gt; 把当前工作改变的内容隐藏起来<br>git stash list —&gt; 查看已经存在更改的列表</p><p>git pull = git fetch + git merge —&gt; 远程拉取<br>git pull –rebase(前面是两个横线) = git fetch + git rebase —&gt; 远程拉取(推荐)</p><p>git push origin 分支名 —&gt; 提交到远程分支<br>git push origin HEAD –force(前面是两个横线) —&gt; 远程版本回退<br>git push origin –delete(前面是两个横线) name —&gt; 删除远程分支</p><p>git branch —&gt; 查看分支<br>git branch name —&gt; 创建新分支<br>git checkout name —&gt; 切换分支<br>git checkout -b name —&gt; 创建 + 切换分支<br>git merge name —&gt; 合并某分支到当前分支<br>git branch -d naem —&gt; 删除分支</p><p>git tag —&gt; 查看标签<br>git tag -a 版本号(v1) -m ‘描述（第一版）’ —&gt; 给当前版本打标签<br>git push origin –tags(前面是两个横线) —&gt; 推送当前本地标签到远程（给远程打标签）<br>git tag -d 版本号 – 删除本地标签<br>git push origin :refs/tags/版本号 —&gt; 删除远程标签（需要先删除本地标签）</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro</title>
      <link href="/2020/07/11/shiro/"/>
      <url>/2020/07/11/shiro/</url>
      
        <content type="html"><![CDATA[<p>一、代码未动，依赖先行</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>二、实现Realm类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>shiro<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>PermissionDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>RoleDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>UserDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>service<span class="token punctuation">.</span>RoleService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>SimpleAuthenticationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>SimpleAuthorizationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: kang * @Company: 康康小课堂 * @DateTime: 2020-07-18-19:04 * @Description: 描述 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyShiroRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyShiroRealm<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RoleService roleService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置授权信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始授权(doGetAuthorizationInfo)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取登录用户名</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> principals<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据用户名去数据库查询用户信息</span>        UserDTO user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserDTOByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加角色和权限</span>        SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>RoleDTO dto<span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//添加角色</span>            simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加权限</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>PermissionDTO permission <span class="token operator">:</span> dto<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置认证信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span> AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始认证(doGetAuthenticationInfo)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加这一步的目的是在Post请求的时候会先进认证，然后再请求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取用户信息</span>        String name <span class="token operator">=</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDTO user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserDTOByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里返回后会报出对应异常</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//这里验证authenticationToken和simpleAuthenticationInfo的信息</span>        SimpleAuthenticationInfo simpleAuthenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthenticationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>三、实现Shiro的配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>shiro<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>AuthorizationAttributeSourceAdvisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: kang * @Company: 康康小课堂 * @DateTime: 2020-07-18-19:16 * @Description: 描述 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * anno:无需认证（登陆）可以访问     * authc:必须认证才能访问     * user：如果使用rememberMe的功能可以直接访问     * perms:该资源必须得到资源权限可以访问     * role:该资源必须得到角色权限才能访问     */</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ShiroConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Filter工厂，设置对应的过滤条件和跳转条件     * @param securityManager     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"shiroFilter"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilter</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入shiroFilter......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置不需要拦截的路径</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按顺序依次判断</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">,</span> <span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>初始化所有的权限信息开始<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>        <span class="token comment" spellcheck="true">//这里可以直接配置访问所需权限</span>        <span class="token comment" spellcheck="true">//filterChainDefinitionMap.put("/user/list", "authc,perms[user:list]");</span>        <span class="token comment" spellcheck="true">//filterChainDefinitionMap.put("/user/add", "authc,perms[user:add]");</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> <span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>配置退出 过滤器<span class="token punctuation">,</span>其中的具体的退出代码Shiro已经替我们实现了        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">,</span> <span class="token string">"logout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>初始化所有的权限信息结束<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>        <span class="token comment" spellcheck="true">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 登录成功后要跳转的链接</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//未授权界面</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将自己的验证方式加入容器     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyShiroRealm <span class="token function">myShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyShiroRealm myShiroRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里可以设置缓存的机制</span>        <span class="token keyword">return</span> myShiroRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 权限管理，配置主要是Realm的管理认证     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">myShiroRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="token function">authorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorizationAttributeSourceAdvisor<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorizationAttributeSourceAdvisor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注：配置ShiroConfiguration时可能会报错–<br>Incompatible types.<br>Required: java.lang.SecurityManager<br>Found: org.apache.shiro.web.mgt.DefaultWebSecurityManager</p><p>此时只需要手动导入如下包即可<br>import org.apache.shiro.mgt.SecurityManager;</p><p>四、配置LoginController</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shiro1<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>UsernamePasswordToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiresPermissions<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiresRoles<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: kang * @Company: 康康小课堂 * @DateTime: 2020-07-18-19:32 * @Description: 描述 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LoginController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 进入登录界面     * @return login     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入login页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***********************************************************************************************************/</span>    <span class="token comment" spellcheck="true">/****************************************          shiro功能练习        ************************************/</span>    <span class="token comment" spellcheck="true">/***********************************************************************************************************/</span>    <span class="token comment" spellcheck="true">/**     * 点击登录后的操作     * @param user 用户     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/post/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入登录处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加用户认证信息</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UsernamePasswordToken usernamePasswordToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>                user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//进行验证，这里可以捕获异常，然后返回对应信息</span>              subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>usernamePasswordToken<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//subject.checkRole("admin");</span>              <span class="token comment" spellcheck="true">//subject.checkPermissions("query", "add");</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"账号或密码错误！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthorizationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"没有权限"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 注解验角色和权限     */</span>    <span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span><span class="token string">"超级管理"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token string">"系统管理"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goMain"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注：常用注解</p><blockquote><p>@RequiresAuthenthentication:表示当前Subject已经通过login进行身份验证;即 Subjec.isAuthenticated()返回 true<br>@RequiresUser:表示当前Subject已经身份验证或者通过记住我登录的,<br>@RequiresGuest:表示当前Subject没有身份验证或者通过记住我登录过，即是游客身份<br>@RequiresRoles(value = {“admin”,”user”},logical = Logical.AND):表示当前Subject需要角色admin和user<br>@RequiresPermissions(value = {“user:delete”,”user:b”},logical = Logical.OR):表示当前Subject需要权限user:delete或者user:b</p></blockquote><p>五、整合Thymeleaf</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.pollix.at/thymeleaf/shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip/index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>会员中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>svip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是svip能看到的p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasPermission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>svip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是svip能看到的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasPermission</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注：常用标签<br><a href="shiro:guest" target="_blank" rel="noopener">shiro:guest</a><br>    游客访问 <a href="login.jsp"></a><br></p><p>user 标签：用户已经通过认证\记住我 登录后显示响应的内容<br><a href="shiro:user" target="_blank" rel="noopener">shiro:user</a><br>    欢迎[<a href="shiro:principal/" target="_blank" rel="noopener">shiro:principal/</a>]登录 <a href="logout">退出</a><br></p><p>authenticated标签：用户身份验证通过，即 Subjec.login 登录成功 不是记住我登录的<br><a href="shiro:authenticted" target="_blank" rel="noopener">shiro:authenticted</a><br>    用户[<a href="shiro:principal/" target="_blank" rel="noopener">shiro:principal/</a>] 已身份验证通过<br></p><p>notAuthenticated标签：用户未进行身份验证，即没有调用Subject.login进行登录,包括”记住我”也属于未进行身份验证<br><a href="shiro:notAuthenticated" target="_blank" rel="noopener">shiro:notAuthenticated</a><br>    未身份验证(包括”记住我”)<br></p><p>principal 标签：显示用户身份信息，默认调用<br>Subjec.getPrincipal()获取，即Primary Principal<br>&lt;shiro:principal property = “username”/&gt;</p><p>hasRole标签：如果当前Subject有角色将显示body体内的内容<br>&lt;shiro:hashRole name = “admin”&gt;<br>    用户[<a href="shiro:principal/" target="_blank" rel="noopener">shiro:principal/</a>]拥有角色admin<br></p><p>hasAnyRoles标签：如果Subject有任意一个角色(或的关系)将显示body体里的内容<br>&lt;shiro:hasAnyRoles name = “admin,user”&gt;<br>    用户[<a href="shiro:pricipal/" target="_blank" rel="noopener">shiro:pricipal/</a>]拥有角色admin 或者 user<br></p><p>lacksRole:如果当前 Subjec没有角色将显示body体内的内容<br>&lt;shiro:lacksRole name = “admin”&gt;<br>    用户[<a href="shiro:pricipal/" target="_blank" rel="noopener">shiro:pricipal/</a>]没有角色admin<br></p><p>hashPermission:如果当前Subject有权限将显示body体内容<br>&lt;shiro:hashPermission name = “user:create”&gt;<br>    用户[<a href="shiro:pricipal/" target="_blank" rel="noopener">shiro:pricipal/</a>] 拥有权限user:create<br></p><p>lacksPermission:如果当前Subject没有权限将显示body体内容<br>&lt;shiro:lacksPermission name = “org:create”&gt;<br>    用户[<a href="shiro:pricipal/" target="_blank" rel="noopener">shiro:pricipal/</a>] 没有权限org:create<br></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven依赖汇总</title>
      <link href="/2020/06/26/maven-yi-lai-hui-zong/"/>
      <url>/2020/06/26/maven-yi-lai-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven依赖全集"><a href="#Maven依赖全集" class="headerlink" title="Maven依赖全集"></a>Maven依赖全集</h1><h2 id="集中定义管理依赖版本号"><a href="#集中定义管理依赖版本号" class="headerlink" title="集中定义管理依赖版本号"></a>集中定义管理依赖版本号</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.paginator.version</span><span class="token punctuation">></span></span>1.2.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.paginator.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pagehelper.version</span><span class="token punctuation">></span></span>4.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pagehelper.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.44<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.8.0-alpha2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson.version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpclient.version</span><span class="token punctuation">></span></span>4.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpclient.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jstl.version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jstl.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-api.version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-api.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp-api.version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp-api.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joda-time.version</span><span class="token punctuation">></span></span>2.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joda-time.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-io.version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-io.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-net.version</span><span class="token punctuation">></span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-net.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsqlparser.version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsqlparser.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-fileupload.version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-fileupload.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jedis.version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jedis.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dubbo.version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dubbo.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zookeeper.version</span><span class="token punctuation">></span></span>3.4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zookeeper.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>curator.version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>curator.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-kafka.version</span><span class="token punctuation">></span></span>2.5.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-kafka.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activemq.version</span><span class="token punctuation">></span></span>5.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activemq.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2.version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger-ui.version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger-ui.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qiniu.version</span><span class="token punctuation">></span></span>7.2.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qiniu.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">></span></span>6.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot-starter-data-elasticsearch.version</span><span class="token punctuation">></span></span>2.3.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot-starter-data-elasticsearch.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro-spring.version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro-spring.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro.version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>json.version</span><span class="token punctuation">></span></span>20171018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>json.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mail.version</span><span class="token punctuation">></span></span>1.5.0-b01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mail.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hutool.version</span><span class="token punctuation">></span></span>4.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hutool.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guava.version</span><span class="token punctuation">></span></span>19.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guava.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectjrt.version</span><span class="token punctuation">></span></span>1.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectjrt.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectjweaver.version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectjweaver.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validation-api.version</span><span class="token punctuation">></span></span>1.1.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>validation-api.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-validator.version</span><span class="token punctuation">></span></span>5.4.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-validator.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kaptcha.version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kaptcha.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pinyin4j.version</span><span class="token punctuation">></span></span>2.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pinyin4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activiti-spring-boot-starter-basic.version</span><span class="token punctuation">></span></span>6.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activiti-spring-boot-starter-basic.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 热部署模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Spring --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.miemiedev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-paginator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.paginator.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${pagehelper.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mybatis-plus --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-plus-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- thymeleaf --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- MySql --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 日志处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- fastjson --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${fastjson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Jackson Json处理工具包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jackson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jackson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jackson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Httpclient --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${httpclient.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- JSTL，JSP-api,Servlet-api相关 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jstl.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${servlet-api.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jsp-api.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 时间操作组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${joda-time.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Apache工具组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-lang3.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-io.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-net.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 文件上传组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-fileupload.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Redis客户端 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jedis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Dubbo、zuukeeper相关 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${dubbo.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${zookeeper.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${curator.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--集成kafka--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-kafka.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- activemq --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${activemq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger-ui.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 七牛云图片上传SDK --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qiniu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>qiniu-java-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${qiniu.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Elasticsearch --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${elasticsearch.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring整合elasticsearch包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot-starter-data-elasticsearch.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Log4j 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Shiro 核心依赖(springboot项目) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${shiro-spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Shiro --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${shiro.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Json --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${json.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- spring-boot-starter-mail --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;version>2.1.5.RELEASE&lt;/version> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Mail --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mail.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Hutool工具包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hutool.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--集合工具包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${guava.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${aspectjrt.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${aspectjweaver.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--参数校验--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${validation-api.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hibernate-validator.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 验证码工具类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.penggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${kaptcha.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 中文与汉语拼音的转换 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.belerweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pinyin4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${pinyin4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 工作流引擎 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.activiti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activiti-spring-boot-starter-basic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${activiti-spring-boot-starter-basic.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 检测代码覆盖率 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jacoco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jacoco-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.6.4.201312101107<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 在maven的initialize阶段，将Jacoco的runtime agent作为VM的一个参数 传给被测程序，用于监控JVM中的调用。 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>default-prepare-agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>prepare-agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>destFile</span><span class="token punctuation">></span></span>                    ${project.build.directory}/coverage-reports/jacoco.exec                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>destFile</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>propertyName</span><span class="token punctuation">></span></span>surefireArgLine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>propertyName</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 在程序的verify阶段，执行report测试的程序。 文件的输入为perpare-agent阶段中设置或者默认的jacoco.exec.             参数 includes和excludes可用来选定report中过滤的类。 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>default-report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataFile</span><span class="token punctuation">></span></span>${project.build.directory}/coverage-reports/jacoco.exec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataFile</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>${project.reporting.outputDirectory}/jacoco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><h2 id="部分讲解"><a href="#部分讲解" class="headerlink" title="部分讲解"></a>部分讲解</h2><pre class=" language-lsl"><code class="language-lsl">1、httpclient --- 提供的主要的功能（1）实现了所有 HTTP 的方法（GET-查,POST-増,PUT-改,DELETE-删 等）（2）支持自动转向（3）支持 HTTPS 协议（4）支持代理服务器等2、joda-time  是一种令人惊奇的操作时间的高效工具。可用于计算日期、打印日期，或是解析日期等3、commons-lang3 apache提供的众多commons工具包，号称Java第二API，而common里面lang3包更是被我们使用得最多的 ArrayUtils - 用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等 CharUtils – 用于操作char值和Character对象 ClassPathUtils - 处理类路径的一些工具类 ClassUtils – 用于对Java类的操作 EnumUtils - 辅助操作枚举的一些工具 RandomStringUtils - 随机字符串工具 RandomUtils - 随机数字 RegExUtils - 处理字符串用正则替换 SystemUtils - 主要定义了一些系统底层的常量 StringUtils - 字符串的处理类 日期类DateUtils ObjectUtils FileUtils4、jsqlparser SQL语法解释器5、commons-fileupload 文件上传下载6、curator  zookeeper的底层操作工具7、qiniu 七牛云图片存放容器8、mail 邮件发送工具9、HutoolHutool是一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：布隆过滤缓存克隆接口类型转换日期处理数据库ORM（基于ActiveRecord思想）基于DFA有限自动机的多个关键字查找HTTP客户端IO和文件有用的一些数据结构日志反射代理类的简化（AOP切面实现）Setting（一种扩展Properties的配置文件）System（JVM和系统信息等）WatchService的封装（文件变动监控）XXXUtil各种有用的工具类</code></pre>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea - EasyCode插件</title>
      <link href="/2020/06/26/idea-easycode-cha-jian/"/>
      <url>/2020/06/26/idea-easycode-cha-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea-–-EasyCode插件"><a href="#Idea-–-EasyCode插件" class="headerlink" title="Idea – EasyCode插件"></a>Idea – EasyCode插件</h1><h2 id="1、插件安装"><a href="#1、插件安装" class="headerlink" title="1、插件安装"></a>1、插件安装</h2><pre><code>file -&gt; settings -&gt; Plugins -&gt; 搜索 easycode -&gt; 下载 -&gt; 重启Idea</code></pre><h2 id="2、配置Idea连接Mysql"><a href="#2、配置Idea连接Mysql" class="headerlink" title="2、配置Idea连接Mysql"></a>2、配置Idea连接Mysql</h2><p><img src="https://i.loli.net/2020/06/26/Y2Q8LIOPmAWHsVt.png" alt="MySQL"></p><h2 id="3、配置EasyCode"><a href="#3、配置EasyCode" class="headerlink" title="3、配置EasyCode"></a>3、配置EasyCode</h2><p>1) file -&gt; settings -&gt; Other settings -&gt; 点击Easy Code -&gt; 修改编码与作者名称 -&gt; 选中Type Mapper -&gt; 在最后添加一列（int((\d+))? unsigned      java.lang.int）</p><blockquote><p>注：数据库若主键设置为非空，则easycode不可识别会自动生成Object类型，设置后便可自动生成int（根据自己需求设为long或其他类型）<br><img src="https://i.loli.net/2020/06/26/wVCpyv67fc1qAPm.png" alt="kang"><br><img src="https://i.loli.net/2020/06/26/FhwadljfJe5UnqT.png" alt="kang"></p></blockquote><p>2)  配置entity层为lombok自动生成set、get、无参、有参构造方法<br><img src="https://i.loli.net/2020/06/26/pxAsRzgr31ubXjq.png" alt="kang"><br><img src="https://i.loli.net/2020/06/26/rxse4AWLa6Hc9jE.png" alt="kang"></p><p>3)  配置dao层接口自动添加 @Mapper 注解<br><img src="https://i.loli.net/2020/06/26/Z12HhT57jek8B6u.png" alt="kang"></p><p>4)  配置service层注释为 @Service<br><img src="https://i.loli.net/2020/06/26/g9UIQGxHjzwdEJW.png" alt="kang"></p><p>5)  配置Mapper.xml层，来达到对自动生成各种增删改查操作<br><img src="https://i.loli.net/2020/06/26/xKyvauFfzMGHtAQ.png" alt="kang"></p><h2 id="4、执行自动生成操作"><a href="#4、执行自动生成操作" class="headerlink" title="4、执行自动生成操作"></a>4、执行自动生成操作</h2><p><img src="https://i.loli.net/2020/06/26/8STxJZI9bD61Xye.png" alt="kang"><br><img src="https://i.loli.net/2020/06/26/3hG5iAaHYmu7JLc.png" alt="kang"></p><h2 id="5、大功告成"><a href="#5、大功告成" class="headerlink" title="5、大功告成"></a>5、大功告成</h2><pre><code>更多精彩文章，后期持续更新</code></pre><blockquote><!-- {.markdown_vertical}--><h1 id="－－《平凡之路》"><a href="#－－《平凡之路》" class="headerlink" title="－－《平凡之路》"></a>－－《平凡之路》</h1><p>徘徊着的 在路上的<br>你要走吗 Via Via<br>易碎的 骄傲着<br>那也曾是我的模样</p><p>沸腾着的 不安着的<br>你要去哪 Via Via<br>谜一样的 沉默着的<br>故事你真的在听吗</p><p><em>我曾经跨过山和大海 也穿过人山人海</em><br><em>我曾经拥有着的一切 转眼都飘散如烟</em><br><em>我曾经失落失望 失掉所有方向</em><br><em>直到看见平凡 才是唯一的答案</em></p><p>当你仍然 还在幻想<br>你的明天 Via Via<br>她会好吗 还是更烂<br>对我而言是另一天</p><p><strong>我曾经毁了我的一切 只想永远地离开</strong><br><strong>我曾经堕入无边黑暗 想挣扎无法自拔</strong><br><strong>我曾经像你像他 像那野草野花</strong><br><strong>绝望着 也渴望着 也哭也笑平凡着</strong></p><p><strong>我曾经跨过山和大海 也穿过人山人海</strong><br><strong>我曾经问遍整个世界 从来没得到答案</strong><br><strong>我不过像你像他 像那野草野花</strong><br><strong>冥冥中这是我 唯一要走的路啊</strong></p><p>时间无言 如此这般<br>明天已在 Via Via<br>风吹过的 路依然远<br>你的故事讲到了哪</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象引用</title>
      <link href="/2020/05/20/dui-xiang-yin-yong/"/>
      <url>/2020/05/20/dui-xiang-yin-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的强引用，软引用，弱引用，虚引用及其使用场景"><a href="#Java的强引用，软引用，弱引用，虚引用及其使用场景" class="headerlink" title="Java的强引用，软引用，弱引用，虚引用及其使用场景"></a>Java的强引用，软引用，弱引用，虚引用及其使用场景</h1><p>从 JDK1.2 版本开始，把对象的引用分为四种级别，从而使程序能更加灵活的控制对象的生命周期。这四种级别由高到低依次为：强引用、软引用、弱引用和虚引用。</p><h2 id="1、强引用（Strong-Reference）"><a href="#1、强引用（Strong-Reference）" class="headerlink" title="1、强引用（Strong Reference）"></a>1、强引用（Strong Reference）</h2><p>如果不让对象为空，垃圾回收器绝对不会回收它。当出现内存空间不足的时候。jvm抛出oom（OutOfMemory – 内存溢出）导致程序异常种植的时候，也不会回收强引用对象，除非我们手动把强引用对象设为null</p><pre class=" language-javascript"><code class="language-javascript">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用强引用</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这时候为垃圾回收器回收这个对象，至于什么时候回收，取决于垃圾回收器的算法</span></code></pre><p>特点：</p><ul><li>只要还有强引用指向一个对象，垃圾收集器就不会回收这个对象。</li><li>显式地设置 obj 为 null，或者超出对象的生命周期，此时就可以回收这个对象。具体回收时机还是要看垃圾收集策略。</li><li>在不用对象的时将引用赋值为 null，能够帮助垃圾回收器回收对象。比如 ArrayList 的 clear() 方法实现：</li></ul><pre class=" language-processing"><code class="language-processing"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     modCount<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// clear to let GC do its work</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token type variable">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>         elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="2、软引用（Soft-Reference）"><a href="#2、软引用（Soft-Reference）" class="headerlink" title="2、软引用（Soft Reference）"></a>2、软引用（Soft Reference）</h2><p>如果一个对象只具有软引用，在内存足够时，垃圾回收器不会回收它；如果内存不足，就会回收这个对象的内存。</p><p>使用场景：<br>图片缓存。图片缓存框架中，“内存缓存”中的图片是以这种引用保存，使得 JVM 在发生 OOM（OutOfMemory） 之前，可以回收这部分缓存。</p><pre class=" language-haxe"><code class="language-haxe">Browser prev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 获取页面进行浏览</span>SoftReference sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SoftReference</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 浏览完毕后置为软引用        </span><span class="token keyword">if</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     rev <span class="token operator">=</span> <span class="token punctuation">(</span>Browser<span class="token punctuation">)</span> sr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 还没有被回收器回收，直接获取</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    prev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 由于内存吃紧，所以对软引用的对象回收了</span>    sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SoftReference</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 重新构建</span><span class="token punctuation">}</span></code></pre><h2 id="3、弱引用（Weak-Reference）"><a href="#3、弱引用（Weak-Reference）" class="headerlink" title="3、弱引用（Weak Reference）"></a>3、弱引用（Weak Reference）</h2><p>当垃圾回收器扫描到只具有弱引用的对象，不管当前内存空间是否足够，都会回收内存。</p><p>使用场景：<br>在下面的代码中，如果类 B 不是虚引用类 A 的话，执行 main 方法会出现内存泄漏的问题， 因为类 B 依赖于 A。</p><pre class=" language-cs"><code class="language-cs">public class Main {    public static void main(String[] args) {        A a = new A();        B b = new B(a);        a = null;        System.gc();        System.out.println(b.getA());  // null    }}class A {}class B {    WeakReference<A> weakReference;    public B(A a) {        weakReference = new WeakReference<>(a);    }    public A getA() {        return weakReference.get();    }}</code></pre><p>在静态内部类中，经常会使用虚引用==。例如：一个类发送网络请求，承担 callback 的静态内部类，则常以虚引用的方式来保存外部类的引用，当外部类需要被 JVM 回收时，不会因为网络请求没有及时回应，引起内存泄漏。</p><h2 id="4、虚引用（Phantom-Reference"><a href="#4、虚引用（Phantom-Reference" class="headerlink" title="4、虚引用（Phantom Reference)"></a>4、虚引用（Phantom Reference)</h2><p>虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<br>虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><pre class=" language-javascript"><code class="language-javascript">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReferenceQueue refQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PhantomReference<span class="token operator">&lt;</span>Object<span class="token operator">></span> phantomReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>refQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用场景：<br>可以用来跟踪对象呗垃圾回收的活动。一般可以通过虚引用达到回收一些非java内的一些资源比如堆外内存的行为。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理</title>
      <link href="/2020/05/20/java-dong-tai-dai-li/"/>
      <url>/2020/05/20/java-dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p>说到Java中的动态代理，我们则需要回顾一种常用的设计模式 – 代理模式，而对于代理，则又可以根据创建代理类的时间点，分为静态代理和动态代理。</p><h2 id="一、代理模式"><a href="#一、代理模式" class="headerlink" title="一、代理模式"></a>一、代理模式</h2><p>在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 或者去火车票代售点中介去买。</p><p>1、代理模式的主要优点：</p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p>2、代理模式的主要缺点：</p><ul><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li><li>增加了系统的复杂度；</li></ul><h2 id="代理模式的结构"><a href="#代理模式的结构" class="headerlink" title="代理模式的结构"></a>代理模式的结构</h2><p>1、代理模式的主要角色如下。</p><ul><li>抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能</li></ul><p><img src="https://i.loli.net/2020/05/21/5fhyM68B7bAlSur.gif" alt="动态代理"></p><h2 id="代理模式的实现"><a href="#代理模式的实现" class="headerlink" title="代理模式的实现"></a>代理模式的实现</h2><h3 id="1、抽象主题"><a href="#1、抽象主题" class="headerlink" title="1、抽象主题"></a>1、抽象主题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、真实主题"><a href="#2、真实主题" class="headerlink" title="2、真实主题"></a>2、真实主题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问真实主题方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、代理"><a href="#3、代理" class="headerlink" title="3、代理"></a>3、代理</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> RealSubject realSubject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realSubject<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            realSubject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">preRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSubject<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问真实主题之前的预处理。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问真实主题之后的后续处理。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、主方法"><a href="#4、主方法" class="headerlink" title="4、主方法"></a>4、主方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> proxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Proxy proxy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、程序运行的结果："><a href="#5、程序运行的结果：" class="headerlink" title="5、程序运行的结果："></a>5、程序运行的结果：</h3><blockquote><p>访问真实主题之前的预处理。<br>访问真实主题方法…<br>访问真实主题之后的后续处理。</p></blockquote><h2 id="二、静态代理"><a href="#二、静态代理" class="headerlink" title="二、静态代理"></a>二、静态代理</h2><p>静态代理：由程序员创建或特定工具自动生成源代码，也就是在编译时就已经将接口，被代理类，代理类等确定下来。在程序运行之前，代理类的.class文件就已经生成。</p><h2 id="三、动态代理"><a href="#三、动态代理" class="headerlink" title="三、动态代理"></a>三、动态代理</h2><p>动态代理：代理类在程序运行时创建的代理方式被称为动态代理。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。</p><h3 id="1、动态代理简单实现"><a href="#1、动态代理简单实现" class="headerlink" title="1、动态代理简单实现"></a>1、动态代理简单实现</h3><p>在java的java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。Spring的AOP实现其实也是用了Proxy和InvocationHandler这两个东西的。</p><h3 id="2、创建一个动态代理对象步骤"><a href="#2、创建一个动态代理对象步骤" class="headerlink" title="2、创建一个动态代理对象步骤"></a>2、创建一个动态代理对象步骤</h3><p>1、创建一个InvocationHandler对象</p><pre class=" language-ebnf"><code class="language-ebnf">InvocationHandler stuHandler = new MyInvocationHandler<Person>(stu);</code></pre><p>2、使用Proxy类的getProxyClass静态方法生成一个动态代理类stuProxyClass </p><pre class=" language-vbscript"><code class="language-vbscript">Class<?> stuProxyClass = Proxy.getProxyClass(Person.class.getClassLoader(), new Class<?>[] {Person.class});</code></pre><p>3、获得stuProxyClass 中一个带InvocationHandler参数的构造器constructor</p><pre class=" language-delphi"><code class="language-delphi">Constructor<?> constructor = PersonProxy.getConstructor(InvocationHandler.class);</code></pre><p>4、通过构造器constructor来创建一个动态实例stuProxy</p><pre class=" language-inform7"><code class="language-inform7"><span class="token type variable">Person</span> stuProxy = <span class="token punctuation">(</span><span class="token type variable">Person</span><span class="token punctuation">)</span> cons<span class="token punctuation">.</span>newInstance<span class="token punctuation">(</span>stuHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、到此，一个动态代理对象就创建完毕。然而上面四个步骤可以通过Proxy类的newProxyInstances方法来简化：</p><pre class=" language-haxe"><code class="language-haxe"> <span class="token comment" spellcheck="true">//创建一个与代理对象相关联的InvocationHandler</span> InvocationHandler stuHandler <span class="token operator">=</span> <span class="token keyword">new</span> MyInvocationHandler<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个代理对象stuProxy，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span> Person stuProxy<span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> Class<span class="token operator">&lt;</span>?<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> stuHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、JDK动态代理"><a href="#四、JDK动态代理" class="headerlink" title="四、JDK动态代理"></a>四、JDK动态代理</h2><ul><li>基于JDK的动态代理两个主要类：1.InvocationHandler（接口）、2.Proxy（类）</li><li>JDK是基于接口的动态代理</li><li>java内部的反射机制来实现的</li></ul><h3 id="1、实际应用实例"><a href="#1、实际应用实例" class="headerlink" title="1、实际应用实例"></a>1、实际应用实例</h3><p>1.第一步，创建一个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.第二步，实现接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello  "</span> <span class="token operator">+</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.第三步，创建SubjectImpl的代理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Subject subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SubjectProxy</span><span class="token punctuation">(</span>Subject subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------begin------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------end------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>invoke方法的说明：</p><hr><p><img src="https://i.loli.net/2020/05/21/x1qb2B64IeOkhjK.png" alt="kang"></p><p>4.编写代理类实际的调用，利用Proxy类创建代理之后的Subject类。</p><pre class=" language-haxe"><code class="language-haxe"><span class="token keyword">public</span> <span class="token keyword">class</span> Main <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubjectImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler subjectProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SubjectProxy</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        Subject proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>subjectProxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subjectProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p><img src="https://i.loli.net/2020/05/21/AyqQlaCpE97MbIw.png" alt="kang"></p><p>5、程序输出：</p><blockquote><p>————begin————<br>hello  world<br>————end————</p></blockquote><p>总结：==<em>看这个结果，实际上在Subject类中只会输出一条hello world，但是在被代理之后，实际调用的方法是SubjectProxy的invoke方法，这样可以在不修改业务类的情况下对业务类增加一些日志等其他操作，甚至可以直接修改有返回值方法的返回值。</em>==</p><h2 id="五、CGLIB动态代理"><a href="#五、CGLIB动态代理" class="headerlink" title="五、CGLIB动态代理"></a>五、CGLIB动态代理</h2><ul><li>无需借助于接口实现，java普通类就可以被带代理，使用频次更广泛。</li><li>cglib动态代理底层则是借助asm来实现的（反射机制在生成类的过程中比较高效，而asm在生成类之后的相关执行过程中比较高效（可以通过将asm生成的类进行缓存，这样解决asm生成类过程低效问题））</li></ul><p>1、导入Cglib的jar包</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>1.定义被代理的方法:</p><pre class=" language-cs"><code class="language-cs">public class CGsubject {    public void sayHello(){        System.out.println("hello world");    }}</code></pre><p>2.代理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin time -----> "</span><span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o1 <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end time -----> "</span><span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p><img src="https://i.loli.net/2020/05/21/9AkSmMGXa7Dxiyr.png" alt="kang"></p><p>3.运行类</p><pre class=" language-haxe"><code class="language-haxe"><span class="token keyword">public</span> <span class="token keyword">class</span> Main <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>CGsubject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">HelloInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGsubject cGsubject <span class="token operator">=</span> <span class="token punctuation">(</span>CGsubject<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cGsubject<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.运行结果</p><p>==begin time —–&gt; 1534836443741<br>hello world<br>end time —–&gt; 1534836443786==</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ContentType详解</title>
      <link href="/2020/05/11/contenttype-xiang-jie/"/>
      <url>/2020/05/11/contenttype-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>1、curl使用简介<br>    1.get<br>        示例：localhost:3000/api/basic?name=kang</p><pre><code>1.application/x-www-form-urlencoded    示例：curl localhost:3000/api/basic -X POST -d &#39;hello=world&#39;2.application/json    示例：curl localhost:3000/api/json -X POST -d &#39;{&quot;hello&quot;: &quot;world&quot;}&#39; --header &quot;Content-Type: application/json&quot;3.multipart/form-data    示例：curl localhost:3000/api/multipart -F raw=@raw.data -F hello=world</code></pre><p>一、postman调用接口<br>    1、get请求 – 选择params<br>        1、Params 传参只能用于get请求</p><pre><code>2、post请求 -- 选择body    1、none 不传参数    2、form-data 传递文件和参数    3、x-www-form-urlencoded 传递表单格式参数（后台接收格式为：name=kang&amp;age=21）    4、row 格式（常用的为json）        1、json 参数以json格式传递（后台接收格式为：{name:kang,age:21}）</code></pre><p>二、jquery调用接口<br>    1、get请求<br>        1、参数直接拼接在地址后面即可。以?开头，每个参数间以&amp;连接。（如：<a href="http://localhost:8080/Hello/demo?name=kang&amp;age=21）" target="_blank" rel="noopener">http://localhost:8080/Hello/demo?name=kang&amp;age=21）</a></p><pre><code>2、post请求 -- 默认采用表单提交（x-www-form-urlencoded）    1、表单方式提交        var name = &quot;kang&quot;;        var age = 21;        dataType: &quot;json&quot;,        data: {&quot;name&quot;: name, &quot;age&quot;: age}  -- 会自动转为 name=kang,age=21 格式    2、json方式提交        var name = &quot;kang&quot;;        var age = 21;        var obj = {&quot;name&quot;: name, &quot;age&quot;: age};        dataType: &quot;json&quot;,        data: JSON.stringify(obj)</code></pre><p>三、后台接收接口<br>    1、获取 get post(表单方式)参数<br>    public String demo(String name, int age) {<br>        return “demo”;<br>    }</p><pre><code>2、获取post(json格式)参数class User {    private String name;    private int age;}public String demo(@RequestBody User user) {    return &quot;demo&quot;;}</code></pre><p>四、调用远程接口 HttpClient  – 使用时工具类需设置为单例<br>    1、get请求<br>        @GetMapping(“fun1”)<br>        @ResponseBody<br>        public void fun1(String name, int age) throws IOException {<br>            //接受接口响应结果<br>            String respContent = null;<br>            //创建get方式的请求地址<br>            HttpGet httpGet = new HttpGet(“<a href="http://localhost:8080/user/get1?name=&quot;" target="_blank" rel="noopener">http://localhost:8080/user/get1?name=&quot;</a> + name + “&amp;age=” + age);<br>            //相当于打开浏览器<br>            try(CloseableHttpClient client = HttpClients.createDefault()) {<br>                //相当于在浏览器执行此请求地址<br>                HttpResponse resp = client.execute(httpGet);<br>                //获得相应状态码<br>                if (resp.getStatusLine().getStatusCode() == 200) {<br>                    HttpEntity he = resp.getEntity();<br>                    //获得远程接口返回的结果<br>                    respContent = EntityUtils.toString(he, “UTF-8”);<br>                }<br>            }catch (Exception e) {<br>                System.out.println(“接口调用异常！！！”);<br>            }<br>            System.out.println(respContent);<br>        }</p><pre><code>2、post之表单格式    @PostMapping(&quot;fun2&quot;)    @ResponseBody    public void fun2(String name, int age) throws IOException {        //接受接口响应结果        String respContent = null;        //创建post方式的请求地址        HttpPost httpPost = new HttpPost(&quot;http://localhost:8080/user/post1&quot;);        //设置表单格式的请求参数        List&lt;NameValuePair&gt; list = new ArrayList&lt;&gt;();        list.add(new BasicNameValuePair(&quot;name&quot;, name));        list.add(new BasicNameValuePair(&quot;age&quot;, age + &quot;&quot;));        UrlEncodedFormEntity params = new UrlEncodedFormEntity(list, &quot;UTF-8&quot;);        params.setContentEncoding(&quot;UTF-8&quot;);        params.setContentType(&quot;application/x-www-form-urlencoded&quot;);        httpPost.setEntity(params);        //相当于打开浏览器        try(CloseableHttpClient client = HttpClients.createDefault()) {            //相当于在浏览器执行此请求地址            HttpResponse resp = client.execute(httpPost);            //获得相应状态码，判断是否执行请求成功            if (resp.getStatusLine().getStatusCode() == 200) {                HttpEntity he = resp.getEntity();                //获得远程接口返回的结果                respContent = EntityUtils.toString(he, &quot;UTF-8&quot;);            }        }catch (Exception e) {            System.out.println(&quot;请求接口异常！！！&quot;);        }        System.out.println(respContent);    }3、post之json格式    @PostMapping(&quot;fun3&quot;)    @ResponseBody    public void fun3(@RequestBody TUser user) throws IOException {        //接收接口响应结果        String result = &quot;&quot;;        //创建post方式的请求地址        HttpPost httpPost = new HttpPost(&quot;http://localhost:8080/user/post2&quot;);        //设置json格式的请求参数        StringEntity entity = new StringEntity(JSON.toJSONString(user), &quot;UTF-8&quot;);        entity.setContentType(&quot;application/json&quot;);        httpPost.setEntity(entity);        //相当于打开浏览器        try(CloseableHttpClient client = HttpClients.createDefault()) {            //相当于在浏览器执行此请求地址            HttpResponse response = client.execute(httpPost);            //获得相应状态码，判断是否执行请求成功            if (response.getStatusLine().getStatusCode() == 200) {                HttpEntity entitys = response.getEntity();                //获得远程接口返回的结果                result = EntityUtils.toString(entitys, &quot;UTF-8&quot;);            }        }catch (Exception e) {            System.out.println(&quot;请求接口异常！！！&quot;);        }        System.out.println(result);    }</code></pre><p>五、jsonp跨域请求（只能get请求）<br>    1、get请求（默认为表单方式提交）<br>        function getDatas() {<br>            $.ajax({<br>                url: “<a href="http://localhost:8083/fun1/datas&quot;" target="_blank" rel="noopener">http://localhost:8083/fun1/datas&quot;</a>,<br>                //只能get请求<br>                type: “GET”,<br>                dataType: “JSONP”,<br>                data: {<br>                    “name”: “kang”,<br>                    //此参数可以让后台判断是否使用的是jsonp方式请求的，若是则返回jsonp需要的格式，不是则直接返回restful格式的数据<br>                    “callback”: “success_jsonpCallback”<br>                },<br>                //指定回调为本请求的success方法<br>                jsonpCallback: “success_jsonpCallback”,<br>                //成功后的回调 – 后台返回格式需要为：return “success_jsonpCallback(“ + result + “)”;<br>                success: function (res) {<br>                    console.log(“成功”);<br>                    console.log(res);<br>                }<br>            })<br>        }</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle的安装与配置</title>
      <link href="/2020/02/20/gradle/"/>
      <url>/2020/02/20/gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-官方下载地址："><a href="#1-官方下载地址：" class="headerlink" title="1.官方下载地址："></a>1.官方下载地址：</h2><p>—&gt; <a href="https://gradle.org/install/" target="_blank" rel="noopener">https://gradle.org/install/</a><br><img src="https://i.loli.net/2020/02/20/rFKltMC1sVGuaBj.png" alt="aa.png"></p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><p>—&gt; 放到合适目录，解压即可。</p><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h2><p>—&gt; 1.把解压出来的gradle/bin路径配置到环境变量的Path中 —&gt; E:\software\java\eclipse\gradle-6.2\bin<br>—&gt; 2.新增环境变量 GRADLE_USER_HOME = C:/Java/maven_repository(Maven仓库路径)</p><h2 id="4-集成到Idea"><a href="#4-集成到Idea" class="headerlink" title="4.集成到Idea"></a>4.集成到Idea</h2><p>—&gt; 1. Setting -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle<br>—&gt; 2. 选中 Use local Gradle distribution，在 Gradle home 中选择安装的Gradle的路径。<br>—&gt; 3.在 Service directory path 中配置gradle获取的Jar包仓库路径，可以默认也可以修改和Maven一致</p><h2 id="5-项目中配置gradle仓库源推荐"><a href="#5-项目中配置gradle仓库源推荐" class="headerlink" title="5.项目中配置gradle仓库源推荐"></a>5.项目中配置gradle仓库源推荐</h2><pre class=" language-nginx"><code class="language-nginx">allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        maven <span class="token punctuation">{</span> url <span class="token string">'file:///C:/Java/maven_repository'</span><span class="token punctuation">}</span>        <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">{</span> name <span class="token string">"Alibaba"</span> <span class="token punctuation">;</span> url <span class="token string">"https://maven.aliyun.com/repository/public"</span> <span class="token punctuation">}</span>        maven <span class="token punctuation">{</span> name <span class="token string">"Bstek"</span> <span class="token punctuation">;</span> url <span class="token string">"http://nexus.bsdn.org/content/groups/public/"</span> <span class="token punctuation">}</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    buildscript <span class="token punctuation">{</span>         repositories <span class="token punctuation">{</span>             maven <span class="token punctuation">{</span> name <span class="token string">"Alibaba"</span> <span class="token punctuation">;</span> url <span class="token string">'https://maven.aliyun.com/repository/public'</span> <span class="token punctuation">}</span>            maven <span class="token punctuation">{</span> name <span class="token string">"Bstek"</span> <span class="token punctuation">;</span> url <span class="token string">'http://nexus.bsdn.org/content/groups/public/'</span> <span class="token punctuation">}</span>            maven <span class="token punctuation">{</span> name <span class="token string">"M2"</span> <span class="token punctuation">;</span> url <span class="token string">'https://plugins.gradle.org/m2/'</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>repositories 表示获取 jar 包的顺序。<br>—&gt; 1.先是本地的 Maven 仓库路径；<br>—&gt; 2接着的 mavenLocal() 是获取 Maven 本地仓库的路径；<br>—&gt; 3.第三条和第四条是从国内和国外的网络上仓库获取；<br>—&gt; 4.mavenCentral() 是从Apache提供的中央仓库获取 jar 包。</p><h2 id="6-本文结束"><a href="#6-本文结束" class="headerlink" title="6.本文结束"></a>6.本文结束</h2>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql优化</title>
      <link href="/2020/02/03/sql-you-hua/"/>
      <url>/2020/02/03/sql-you-hua/</url>
      
        <content type="html"><![CDATA[<p>1.开启慢查询</p><h1 id="配置慢查询-通过文件保存，也可以直接存到mysql自带的表中"><a href="#配置慢查询-通过文件保存，也可以直接存到mysql自带的表中" class="headerlink" title="配置慢查询,通过文件保存，也可以直接存到mysql自带的表中"></a>配置慢查询,通过文件保存，也可以直接存到mysql自带的表中</h1><h1 id="配置保存路径，可选FILE-TABLE"><a href="#配置保存路径，可选FILE-TABLE" class="headerlink" title="配置保存路径，可选FILE TABLE"></a>配置保存路径，可选FILE TABLE</h1><p>log-output=FILE<br>general-log=0<br>general_log_file=”DESKTOP-KANG.log”</p><h1 id="开启慢查询"><a href="#开启慢查询" class="headerlink" title="开启慢查询"></a>开启慢查询</h1><p>slow-query-log=1</p><h1 id="日志存放路径及文件名-（默认在data目录下），也可以存放在mysql表（slow-log）中"><a href="#日志存放路径及文件名-（默认在data目录下），也可以存放在mysql表（slow-log）中" class="headerlink" title="日志存放路径及文件名 （默认在data目录下），也可以存放在mysql表（slow_log）中"></a>日志存放路径及文件名 （默认在data目录下），也可以存放在mysql表（slow_log）中</h1><p>slow_query_log_file=”DESKTOP-KANG-SLOW.log”</p><h1 id="sql执行超出长时间才会记录"><a href="#sql执行超出长时间才会记录" class="headerlink" title="sql执行超出长时间才会记录"></a>sql执行超出长时间才会记录</h1><p>long_query_time=10</p><p>2.使用mysql自带的慢查询分析工具（需要perl环境）<br>在mysql\bin目录下–mysqldumpslow.pl<br>在cmd或powershell中运行如下命令：perl mysqldumpslow.pl -s t -t 5 “慢查询文件全路径，如D:\mysql\bin\DESKTOP-KANG-SLOW.log”</p><p>3.少用子查询</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBot连接Mysql</title>
      <link href="/2020/02/02/springbot-lian-jie-mysql/"/>
      <url>/2020/02/02/springbot-lian-jie-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SpringBoot集成Mybatis连接Mysql数据库配置"><a href="#一、SpringBoot集成Mybatis连接Mysql数据库配置" class="headerlink" title="一、SpringBoot集成Mybatis连接Mysql数据库配置"></a>一、SpringBoot集成Mybatis连接Mysql数据库配置</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="properties版"><a href="#properties版" class="headerlink" title="properties版"></a>properties版</h4><p>2、增加配置</p><pre class=" language-shell"><code class="language-shell">###连接数据库spring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/kang?autoReconnect=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowMultiQueries=true&useSSL=false&nullCatalogMeansCurrent=true spring.datasource.username=rootspring.datasource.password=rootspring.jpa.properties.hibernate.hbm2ddl.auto=updatespring.jpa.show-sql=truespring.jpa.database=MYSQL##配置Mapper*.xml位置mybatis.mapper-locations=classpath:mybatis/mapper/*.xml##配置实体类位置，设置别名mybatis.type-aliases-package=com.kang.entity##驼峰命名mybatis.configuration.map-underscore-to-camel-case=true###配置分页插件pagehelper.helperDialec=mysqlpagehelper.reasonable: truepagehelper.supportMethodsArguments: truepagehelper.params: count=countSql###打印SQLlogging.level.[com.kang.dao]=debug   --[包名]###日志输出位置     response.handler.enabled=truelogging.file=/usr/local/tomcat/logs/user.infologging.level.org.springframework.web=debug</code></pre><h4 id="yml版"><a href="#yml版" class="headerlink" title="yml版"></a>yml版</h4><p>2、增加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###连接数据库</span>spring：     datasource：         driver<span class="token punctuation">-</span>class<span class="token punctuation">-</span>name： com.mysql.jdbc.Driver        url： jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/kang<span class="token punctuation">?</span>autoReconnect=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=UTC<span class="token important">&amp;allowMultiQueries</span>=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;nullCatalogMeansCurrent</span>=true         username： root        password： root    <span class="token key atrule">jpa</span><span class="token punctuation">:</span>        <span class="token key atrule">properties</span><span class="token punctuation">:</span>          <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>            <span class="token key atrule">hbm2ddl</span><span class="token punctuation">:</span>               <span class="token key atrule">auto</span><span class="token punctuation">:</span> update        <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">database</span><span class="token punctuation">:</span> mysql<span class="token comment" spellcheck="true">##Mybatis配置    </span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kang.entity                   <span class="token comment" spellcheck="true">##定义所有操作类的别名所在包</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span>                                     <span class="token comment" spellcheck="true">##所有的mapper映射文件</span>    <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>     <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true                    </span><span class="token comment" spellcheck="true">##驼峰命名</span><span class="token comment" spellcheck="true">###配置分页插件</span><span class="token key atrule">pagehelper</span><span class="token punctuation">:</span>     <span class="token key atrule">helperDialec</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">reasonable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">supportMethodsArguments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">params</span><span class="token punctuation">:</span>         <span class="token key atrule">count</span><span class="token punctuation">:</span> countSql<span class="token comment" spellcheck="true">###打印SQL</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>     <span class="token key atrule">com.kang.dao</span> <span class="token punctuation">:</span> debug<span class="token comment" spellcheck="true">###日志输出位置     </span><span class="token key atrule">response</span><span class="token punctuation">:</span>     <span class="token key atrule">handler</span><span class="token punctuation">:</span>         <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>     <span class="token key atrule">file</span><span class="token punctuation">:</span> /usr/local/tomcat/logs/user.info    <span class="token key atrule">level</span><span class="token punctuation">:</span>         <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> debug</code></pre><h2 id="二、SpringBoot集成Mybatis-plus连接Mysql数据库配置"><a href="#二、SpringBoot集成Mybatis-plus连接Mysql数据库配置" class="headerlink" title="二、SpringBoot集成Mybatis-plus连接Mysql数据库配置"></a>二、SpringBoot集成Mybatis-plus连接Mysql数据库配置</h2><h3 id="1、引入依赖-1"><a href="#1、引入依赖-1" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="properties版-1"><a href="#properties版-1" class="headerlink" title="properties版"></a>properties版</h4><p>2、增加配置</p><pre class=" language-shell"><code class="language-shell">###连接数据库spring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/kang?autoReconnect=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowMultiQueries=true&useSSL=false&nullCatalogMeansCurrent=true spring.datasource.username=rootspring.datasource.password=root###mybatis-plus相关配置##项目Mapper.xml存放位置，classpath:*****，表示项目resources文件夹下mybatis-plus.mapper-locations=classpath:mybatis/mapper/*.xml##实体类存放位置mybatis-plus.type-aliases-package=com.kang.entity##驼峰下划线转换mybatis-plus.global-config.db-column-underline=true##刷新mapper 调试神器mybatis-plus.global-config.refresh-mapper=true##数据库大写下划线转换##mybatis-plus.global-config.capital-mode=true##序列接口实现类配置##mybatis-plus.global-config.key-generator=com.baomidou.springboot.xxx##逻辑删除配置mybatis-plus.global-config.logic-delete-value=0mybatis-plus.global-config.logic-not-delete-value=1mybatis-plus.global-config.sql-injector=com.baomidou.mybatisplus.mapper.LogicSqlInjector##驼峰命名mybatis-plus.configuration.map-underscore-to-camel-case=truemybatis-plus.configuration.cache-enabled=false## 数据库类型设置mybatis-plus.global-config.db-config.db-type=mysqlmybatis-plus.global-config.db-config.column-underline=truemybatis-plus.global-config.db-config.logic-delete-value=truemybatis-plus.global-config.db-config.logic-not-delete-value=false</code></pre><h4 id="yml版-1"><a href="#yml版-1" class="headerlink" title="yml版"></a>yml版</h4><p>2、增加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###连接数据库</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/activiti<span class="token punctuation">?</span>autoReconnect=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=UTC<span class="token important">&amp;allowMultiQueries</span>=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;nullCatalogMeansCurrent</span>=true    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>        <span class="token key atrule">hbm2ddl</span><span class="token punctuation">:</span>           <span class="token key atrule">auto</span><span class="token punctuation">:</span> update    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> mysql<span class="token comment" spellcheck="true">###mybatis-plus相关配置</span><span class="token comment" spellcheck="true">##配置Mapper*.xml位置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>    <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kang.entity    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml    <span class="token comment" spellcheck="true">#此项设置均为默认值[可不设置]</span>    <span class="token key atrule">global-config</span><span class="token punctuation">:</span>         <span class="token key atrule">db-config</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">##主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";</span>            <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto            <span class="token comment" spellcheck="true">##字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"</span>            <span class="token key atrule">field-strategy</span><span class="token punctuation">:</span> NOT_EMPTY            <span class="token comment" spellcheck="true">##数据库类型</span>            <span class="token key atrule">db-type</span><span class="token punctuation">:</span> MYSQL    configuration：         <span class="token comment" spellcheck="true">##是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射</span>        <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment" spellcheck="true">##如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段</span>        <span class="token key atrule">call-setters-on-nulls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment" spellcheck="true">##这个配置会将执行的sql打印出来，在开发或测试的时候可以用</span>        <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span class="token comment" spellcheck="true">###日志输出位置     </span><span class="token key atrule">response</span><span class="token punctuation">:</span>     <span class="token key atrule">handler</span><span class="token punctuation">:</span>         <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>     <span class="token key atrule">file</span><span class="token punctuation">:</span> /usr/local/tomcat/logs/user.info    <span class="token key atrule">level</span><span class="token punctuation">:</span>         <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> debug</code></pre><h2 id="三、配置阿里数据库连接池"><a href="#三、配置阿里数据库连接池" class="headerlink" title="三、配置阿里数据库连接池"></a>三、配置阿里数据库连接池</h2><h3 id="1、引入依赖-2"><a href="#1、引入依赖-2" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="Mybatis版"><a href="#Mybatis版" class="headerlink" title="Mybatis版"></a>Mybatis版</h4><p>2、增加配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">###阿里连接池配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/kang<span class="token punctuation">?</span>autoReconnect=true<span class="token important">&amp;useUnicode</span>=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone</span>=UTC<span class="token important">&amp;allowMultiQueries</span>=true<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;nullCatalogMeansCurrent</span>=true       <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver      <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>      <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>      <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml</code></pre><p>3、添加配置类<br>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h4 id="Mybatis-plus版"><a href="#Mybatis-plus版" class="headerlink" title="Mybatis-plus版"></a>Mybatis-plus版</h4><p>2、增加配置</p><pre class=" language-nix"><code class="language-nix">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>type<span class="token operator">=</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourcespring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span>class<span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token punctuation">:</span><span class="token url">mysql://127.0.0.1:3306/kang?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;allowMultiQueries=true&amp;useSSL=false&amp;nullCatalogMeansCurrent=true</span> spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>initial<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">5</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>min<span class="token operator">-</span>idle<span class="token operator">=</span><span class="token number">5</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>maxActive<span class="token operator">=</span><span class="token number">20</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>maxWait<span class="token operator">=</span><span class="token number">60000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>poolPreparedStatements<span class="token operator">=</span><span class="token boolean">true</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>maxPoolPreparedStatementPerConnectionSize<span class="token operator">=</span><span class="token number">20</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>filters<span class="token operator">=</span>stat<span class="token punctuation">,</span>slf4jspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>connectionProperties<span class="token operator">=</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>mergeSql\<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>slowSqlMillis\<span class="token operator">=</span><span class="token number">5000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>web<span class="token operator">-</span>stat<span class="token operator">-</span><span class="token function">filter</span><span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token url">spring.datasource.druid.web-stat-filter.url-pattern=/</span>*spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>web<span class="token operator">-</span>stat<span class="token operator">-</span><span class="token function">filter</span><span class="token punctuation">.</span>exclusions<span class="token operator">=</span>*<span class="token punctuation">.</span>js<span class="token punctuation">,</span>*<span class="token punctuation">.</span>gif<span class="token punctuation">,</span>*<span class="token punctuation">.</span>jpg<span class="token punctuation">,</span>*<span class="token punctuation">.</span>bmp<span class="token punctuation">,</span>*<span class="token punctuation">.</span>png<span class="token punctuation">,</span>*<span class="token punctuation">.</span>css<span class="token punctuation">,</span>*<span class="token punctuation">.</span>ico<span class="token punctuation">,</span><span class="token url">/druid/</span>*<span class="token url">spring.datasource.druid.stat-view-servlet.url-pattern=/druid/</span>*spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token punctuation">.</span>allow<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">192</span><span class="token punctuation">.</span><span class="token number">168</span><span class="token punctuation">.</span><span class="token number">152</span><span class="token punctuation">.</span><span class="token number">12</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token punctuation">.</span>deny<span class="token operator">=</span><span class="token number">192</span><span class="token punctuation">.</span><span class="token number">168</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token number">73</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token punctuation">.</span>reset<span class="token operator">-</span>enable<span class="token operator">=</span><span class="token boolean">false</span><span class="token comment" spellcheck="true">##Druid 管理账号</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token punctuation">.</span>login<span class="token operator">-</span>username<span class="token operator">=</span>kang<span class="token comment" spellcheck="true">##Druid 管理密码</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>stat<span class="token operator">-</span>view<span class="token operator">-</span>servlet<span class="token punctuation">.</span>login<span class="token operator">-</span>password<span class="token operator">=</span>kang<span class="token comment" spellcheck="true">##com.simple.spring.boot.mapper 该包打印DEBUG级别日志</span>logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>com<span class="token punctuation">.</span>kang<span class="token punctuation">.</span>mapper<span class="token operator">=</span>debug<span class="token comment" spellcheck="true">##mybatis plus mapper文件路径</span><span class="token url">mybatis-plus.mapperLocations=classpath:/mybatis/mapper/</span>*<span class="token punctuation">.</span>xml<span class="token comment" spellcheck="true">##mybaits plus 实体类路径</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>typeAliasesPackage<span class="token operator">=</span>com<span class="token punctuation">.</span>kang<span class="token punctuation">.</span>entitymybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>typeEnumsPackage<span class="token operator">=</span><span class="token comment" spellcheck="true">##数据库相关配置</span><span class="token comment" spellcheck="true">##主键类型 AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>id<span class="token operator">-</span>type<span class="token operator">=</span>UUID<span class="token comment" spellcheck="true">##字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>field<span class="token operator">-</span>strategy<span class="token operator">=</span>not_empty<span class="token comment" spellcheck="true">#驼峰下划线转换</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>column<span class="token operator">-</span>underline<span class="token operator">=</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">##数据库大写下划线转换</span><span class="token comment" spellcheck="true">##capital-mode: true</span><span class="token comment" spellcheck="true">##逻辑删除配置</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span><span class="token number">0</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>db<span class="token operator">-</span>config<span class="token punctuation">.</span>logic<span class="token operator">-</span>not<span class="token operator">-</span>delete<span class="token operator">-</span>value<span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">##mybatis-plus.global-config.db-config.db-type= sqlserver</span><span class="token comment" spellcheck="true">##刷新mapper 调试神器</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>global<span class="token operator">-</span>config<span class="token punctuation">.</span>refresh<span class="token operator">=</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">##原生配置</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">map</span><span class="token operator">-</span>underscore<span class="token operator">-</span>to<span class="token operator">-</span>camel<span class="token operator">-</span>case<span class="token operator">=</span><span class="token boolean">true</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>cache<span class="token operator">-</span>enabled<span class="token operator">=</span><span class="token boolean">false</span>mybatis<span class="token operator">-</span>plus<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>call<span class="token operator">-</span>setters<span class="token operator">-</span>on<span class="token operator">-</span>nulls <span class="token operator">=</span><span class="token boolean">true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之操作DDL语句</title>
      <link href="/2020/01/11/mybatis-zhi-cao-zuo-ddl-yu-ju/"/>
      <url>/2020/01/11/mybatis-zhi-cao-zuo-ddl-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis之DDL语句"><a href="#Mybatis之DDL语句" class="headerlink" title="Mybatis之DDL语句"></a>Mybatis之DDL语句</h2><h3 id="一、MySQL引言："><a href="#一、MySQL引言：" class="headerlink" title="一、MySQL引言："></a>一、MySQL引言：</h3><p>近年来，开源数据库逐渐流行起来。由于具有免费使用、配置简单、稳定性好、性能优良等优点，开源数据库在中低端应用上占据了很大的市场份额，而 MySQL 正是开源数据库中最具有代表性的一个。MySQL 数据库目前分为社区版（Community Server）和企业版（Enterprise），其最重要的区别在于：社区版是自由下载而且完全免费的，但是官方不提供任何技术支持，适用于大多数普通用户；而企业版则是收费的，不能在线下载，相应地，它提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户，常用于企业。</p><h4 id="SQL-类别："><a href="#SQL-类别：" class="headerlink" title="SQL 类别："></a>SQL 类别：</h4><ol><li><p>DDL（Data Definition Languages）语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。</p></li><li><p>DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 与 select 等。</p></li><li><p>DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。</p></li></ol><h3 id="二、MyBatis引言："><a href="#二、MyBatis引言：" class="headerlink" title="二、MyBatis引言："></a>二、MyBatis引言：</h3><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><p>相信大家在开发中基本都是使用的MyBatis进行操作数据库的吧，但你是不是只会操作简单的DML（即增删改查）语句呐，有没有想过MyBatis还可以帮我们创建表、修改表、创建触发器等其他操作呐。下面我就带大家一起欣赏几个简单的demo吧，但别小看只是几个简单的小例子，它可以带你看见你之前没看到、甚至没想到的东西哦。</p><h3 id="三、一起来看看吧："><a href="#三、一起来看看吧：" class="headerlink" title="三、一起来看看吧："></a>三、一起来看看吧：</h3><p>简单编写如下程序：</p><h4 id="Controller层："><a href="#Controller层：" class="headerlink" title="Controller层："></a>Controller层：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>UserService<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ClassName DemoController * @Description DemoController * @Author Kang * @Company 康康小课堂 * @Date 2019/11/29 6:11 * @Version 1.0 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用MyBatis创建MySQL触发器     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/createTigger"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">createTigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用注解进行表的创建     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/createTable"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Service层："><a href="#Service层：" class="headerlink" title="Service层："></a>Service层：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>UserService<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>UserService<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span>UserMapper userMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper <span class="token operator">=</span> userMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用MyBatis创建MySQL触发器     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">createTigger</span><span class="token punctuation">(</span><span class="token string">"userTigger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用注解进行表的创建     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Mapper："><a href="#Mapper：" class="headerlink" title="Mapper："></a>Mapper：</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 使用MyBatis创建MySQL触发器     * @param value 触发器名称     */</span>    <span class="token keyword">void</span> <span class="token function">createTigger</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用注解进行创建表     */</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"create table t_user2 as select * from t_user"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="XML"><a href="#XML" class="headerlink" title="XML :"></a>XML :</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTigger<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        create trigger ${value} after insert on t_user for each row            begin                insert into                    t_user(`username`, `password`,`age`,`createDate`)                VALUES                    ('kang', 'root', 22, '2019-11-30 06:10:32');            end;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="五、看图识结果"><a href="#五、看图识结果" class="headerlink" title="五、看图识结果"></a>五、看图识结果</h3><p>对此，代码就没了，是不是也很简单呐，然后再一起看几张结果图吧<br>原始表数据及触发器：<br><img src="https://i.loli.net/2019/11/29/jLHQsCuTyR7m5ca.png" alt="原始"></p><p><img src="https://i.loli.net/2019/11/29/LPQtB3YaF8IrdxR.png" alt="原始"></p><p>添加触发器：<br><img src="https://i.loli.net/2019/11/29/QW75D2mFhwx8Psi.png" alt="触发器"></p><p>创建t_user2表：<br><img src="https://i.loli.net/2019/11/29/cof5NbZInpVlyrX.png" alt="创建表"></p><p>有图真相你还在犹豫什么，还不快动手试一试！！！</p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti流程之路</title>
      <link href="/2019/12/12/activiti-liu-cheng-zhi-lu/"/>
      <url>/2019/12/12/activiti-liu-cheng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot集成Activiti</p><p>一、何为activiti？<br>activiti介绍 Activiti是由Alfresco软件在2010年5月17日发布的业务流程管理(BPM)框架,它是覆盖了业务流程管理，工作流，服务协作等领域的一个开源，灵活的，<br>易扩展的可执行流程语言框架。</p><p>二、核心7大接口、28张表</p><p>1、七大接口<br><img src="https://s1.ax1x.com/2020/08/15/dFvWFA.png" alt="dFvWFA.png"></p><p>RepositoryService：提供一系列管理流程部署和流程定义的API。<br>RuntimeService：在流程运行时对流程实例进行管理与控制。<br>TaskService：对流程任务进行管理，例如任务提醒、任务完成和创建任务等。<br>IdentityService：提供对流程角色数据进行管理的API，这些角色数据包括用户组、用户及它们之间的关系。<br>ManagementService：提供对流程引擎进行管理和维护的服务。<br>HistoryService：对流程的历史数据进行操作，包括查询、删除这些历史数据。<br>FormService：表单服务。</p><p>2、二十八张表<br><img src="https://s1.ax1x.com/2020/08/15/dFv2od.png" alt="dFv2od.png"></p><p>act_ge_* 通用数据表，ge是general的缩写<br>act_hi_* 历史数据表，hi是history的缩写，对应HistoryService接口<br>act_id_* 身份数据表，id是identity的缩写，对应IdentityService接口<br>act_re_* 流程存储表，re是repository的缩写，对应RepositoryService接口，存储流程部署和流程定义等静态数据<br>act_ru_* 运行时数据表，ru是runtime的缩写，对应RuntimeService接口和TaskService接口，存储流程实例和用户任务等动态数据</p><p>3、表结构详解<br>    3.1：资源库流程规则表<br>        1) act_re_deployment 部署信息表<br>        2) act_re_model 流程设计模型部署表<br>        3) act_re_procdef 流程定义数据表 </p><pre><code>3.2：运行时数据库表     1) act_ru_execution 运行时流程执行实例表        注：1、如果是单例流程（没有分支和聚合），则流程实例id(PROC_INST_ID)就是（等于）执行对象id(ID_)             2、一个流程只有一个流程实例，但执行对象可以有多个    2) act_ru_identitylink 运行时流程人员表，主要存储任务节点与参与者的相关信息     3) act_ru_task 运行时任务节点表     4) act_ru_variable 运行时流程变量数据表 3.3：历史数据库表     1) act_hi_actinst 历史节点表     2) act_hi_attachment 历史附件表     3) act_ih_comment 历史意见表     4) act_hi_identitylink 历史流程人员表     5) act_hi_detail 历史详情表，提供历史变量的查询     6) act_hi_procinst 历史流程实例表     7) act_hi_taskinst 历史任务实例表     8) act_hi_varinst 历史变量表 3.4：组织机构表     1) act_id_group 用户组信息表     2) act_id_info 用户扩展信息表     3) act_id_membership 用户与用户组对应信息表     4) act_id_user 用户信息表     这四张表使用很少，相当于一套简单的rbac框架，但很难满足我们的需求所以很少使用3.5：通用数据表     1) act_ge_bytearray 二进制数据表     2) act_ge_property 属性数据表存储整个流程引擎级别的数据,初始化表结构时，会默认插入三条记录</code></pre><p>4、表分类<br>    4.1：流程部署相关表<br>        act_re_deployement 部署对象表<br>        act_rep_procdef  流程定义表<br>        act_ge_bytearray 资源文件表<br>        act_ge_prperty  主键生成策略表（对于部署对象表的主键ID）</p><pre><code>4.2：流程实例相关表     act_ru_execution 正在执行的执行对象表（包含执行对象ID和流程实例ID，如果有多个线程可能流程实例ID不一样）     act_hi_procinst 流程实例历史表     act_hi_actinst 存放历史所有完成的任务4.3：Task 任务相关表     act_ru_task 代办任务表 （只对应节点是UserTask的）     act_hi_taskinst 代办任务历史表 （只对应节点是UserTask的）      act_hi_actinst  所有节点活动历史表 （对应流程的所有节点的活动历史，从开始节点一直到结束节点中间的所有节点的活动都会被记录）4.4：流程变量表     act_ru_variable 正在执行的流程变量表     act_hi_variable 流程变量历史表</code></pre><p>5、activiti配置文件简述<br>    5.1：命名<br>        activiti.cfg.xml</p><pre><code>5.2：定义数据库配置参数：     jdbcUrl: 数据库的JDBC URL。     jdbcDriver: 对应不同数据库类型的驱动。     jdbcUsername: 连接数据库的用户名。     jdbcPassword: 连接数据库的密码。 5.3：基于JDBC参数配置的数据库连接 会使用默认的MyBatis连接池    jdbcMaxActiveConnections: 连接池中处于被使用状态的连接的最大值。默认为10。     jdbcMaxIdleConnections: 连接池中处于空闲状态的连接的最大值。     jdbcMaxCheckoutTime: 连接被取出使用的最长时间，超过时间会被强制回收。 默认为20000（20秒）。     jdbcMaxWaitTime: 这是一个底层配置，让连接池可以在长时间无法获得连接时， 打印一条日志，并重新尝试获取一个连接。（避免因为错误配置导致沉默的操作失败）。 默认为20000（20秒）。</code></pre><p>三、activiti必备插件（集成idea）<br>    方法一、在idea插件市场搜索：actibpm，安装重启即可。<br>    方法二、在浏览器搜索idea插件官网，下载actibpm插件，再导入到idea即可。<br>    方法三、链接: <a href="https://pan.baidu.com/s/1UWvxxsdT_A8DSxWC_akSpA" target="_blank" rel="noopener">https://pan.baidu.com/s/1UWvxxsdT_A8DSxWC_akSpA</a> 提取码: 5ax5，下载后导入idea即可。</p><p>四、集成SpringBoot<br>    1、导入依赖<br>        <dependency><br>            <groupid>org.activiti</groupid><br>            <artifactid>activiti-spring-boot-starter-basic</artifactid><br>            <version>6.0.0</version><br>        </dependency></p><pre><code>2、配置 application.yml    spring:      activiti:      # 自动检查、部署流程定义文件      check-process-definitions: false      # 自动更新数据库结构,第一次生成表后改为false      database-schema-update: false      # 保存历史数据级别设置为full最高级别，便于历史数据的追溯      history-level: full      # 流程定义文件存放目录      process-definition-location-prefix: classpath:/processes/      #async-executor-activate: false      #job-executor-activate: false    注：databaseSchemaUpdate配置项可以设置流程引擎启动和关闭时数据库执行的策略，有如下四个值：         false：默认值，设置为该值后，Activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配时，将在启动时抛出异常。        true：Activiti会对数据库中所有的表进行更新，如果表不存在，则Activiti会自动创建。        create-drop：Activiti启动时，会执行数据库表的创建操作，在Activiti关闭时，执行数据库表的删除操作。        drop-create：Activiti启动时，执行数据库表的删除操作在Activiti关闭时，会执行数据库表的创建操作。    结论：database-schema-update开始设置为true,表创建好之后停止应用。再设为false，不再改变表的结构。          将check-process-definitions的值设为false,来阻止应用启动检查Activiti数据表是否存在及版本号是否匹配，从而提升应用启动速度3、解決工作流生成图片乱码问题    1、新建一个类(可省略)        package com.kang.activiti.process;        import org.activiti.spring.SpringProcessEngineConfiguration;        import org.activiti.spring.boot.ProcessEngineConfigurationConfigurer;        import org.springframework.context.annotation.Configuration;        @Configuration        public class processEngineConfiguration implements ProcessEngineConfigurationConfigurer{            /**             * 解決工作流生成图片乱码问题             *             * @param processEngineConfiguration processEngineConfiguration             */            @Override            public void configure(SpringProcessEngineConfiguration processEngineConfiguration) {                processEngineConfiguration.setActivityFontName(&quot;宋体&quot;);                processEngineConfiguration.setAnnotationFontName(&quot;宋体&quot;);                processEngineConfiguration.setLabelFontName(&quot;宋体&quot;);            }        }    2、修改/idea/bin目录下的idea.exe.vmoptions和idea64.exe.vmoptions文件，在文件最后添加 -Dfile.encoding=UTF-8</code></pre><p>五、设计流程定义图<br>    1、由于idea对于bpmn的设计并不是很友好，所以使用扩展工具来设计流程图<br>    2、下载链接：<a href="https://camunda.com/download/modeler/" target="_blank" rel="noopener">https://camunda.com/download/modeler/</a><br>    3、<img src="https://s1.ax1x.com/2020/08/15/dFOlRK.png" alt="dFOlRK.png"><br>        <img src="https://s1.ax1x.com/2020/08/15/dFOQG6.png" alt="dFOQG6.png"><br>    4、当然也可以直接打开下载解压后的可执行文件进行流程图的设计。<br>    5、camunda-modeler具体使用请看：</p><p>六、HelloWorld入门<br>    package com.kang.activiti.process;</p><pre><code>import org.activiti.engine.*;import org.activiti.engine.repository.Deployment;import org.activiti.engine.runtime.ProcessInstance;import org.activiti.engine.task.Task;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;public class Demo1 {    /**     * 获取七大接口     */    @Autowired    private RuntimeService runtimeService;    @Autowired    private TaskService taskService;    @Autowired    private IdentityService identityService;    @Autowired    private RepositoryService repositoryService;    @Autowired    private ProcessEngine processEngine;    @Autowired    private HistoryService historyService;    //ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();    /**     * 1.通过定义好的流程图文件部署，一次只能部署一个流程     * act_ge_bytearray   act_re_deployment   act_re_procdef     */    @Test    public void deploy(){        Deployment deployment = repositoryService.createDeployment()                .addClasspathResource(&quot;process/hello.bpmn&quot;)                .addClasspathResource(&quot;process/hello.png&quot;)                .deploy();        System.out.println(&quot;流程部署id&quot; + deployment.getId());        System.out.println(&quot;流程部署Name&quot; + deployment.getName());    }    /**     * 2.启动流程实例     * act_hi_actinst  act_hi_identitylink   act_hi_taskinst  act_ru_execution  act_ru_identitylink  act_ru_task     */    @Test    public void start(){        ProcessInstance pi = runtimeService                .startProcessInstanceByKey(&quot;myProcess_1&quot;);        System.out.println(&quot;流程实例id&quot; + pi.getId());        System.out.println(&quot;流程部署Name&quot; + pi.getName());    }    /**     * 3.查看个人任务     */    @Test    public void findTask(){        List&lt;Task&gt; list = taskService                .createTaskQuery()                .taskAssignee(&quot;王五&quot;)//指定某人                .list();        for (Task task : list){            System.out.println(&quot;任务id&quot; + task.getId());            System.out.println(&quot;任务name&quot; + task.getName());            System.out.println(&quot;任务创建时间&quot; + task.getCreateTime());            System.out.println(&quot;委派人name&quot; + task.getAssignee());            System.out.println(&quot;流程实例name&quot; + task.getProcessInstanceId());        }    }    /**     * 4.完成任务     */    @Test    public void compeleTask(){        taskService.complete(&quot;27502&quot;);        System.out.println(&quot;完成任务&quot;);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> activiti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven安装与配置</title>
      <link href="/2019/11/27/maven-an-zhuang/"/>
      <url>/2019/11/27/maven-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven安装与配置"><a href="#Maven安装与配置" class="headerlink" title="Maven安装与配置"></a>Maven安装与配置</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>前往 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a> 下载最新版的Maven程序：</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/da575fab665b60f9.png" alt="下载"></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>将文件解压到D:\Program Files\Apache\maven目录下:</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/d9cb947ee0eb0f3c.png" alt="解压后目录"></p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><ul><li>新建环境变量MAVEN_HOME  =  D:\Program Files\Apache\maven</li></ul><p><img src="https://ftp.bmp.ovh/imgs/2019/11/8031585100233a68.png" alt></p><ul><li>编辑环境变量Path，添加    %MAVEN_HOME%\bin\；</li></ul><p><img src="https://ftp.bmp.ovh/imgs/2019/11/29075b1facaef1f5.png" alt></p><ul><li>maven已经完成了安装，验证一下是否安装成功即可</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、 win <span class="token operator">+</span> r  打开运行窗口<span class="token number">2</span>、输入  cmd<span class="token number">3</span>、在cmd黑框框中输入   mvn  <span class="token operator">-</span>v   <span class="token number">4</span>、出现maven版本号即安装成功，否则再次确认步骤  <span class="token number">3</span> 与  <span class="token number">4</span>  是否配置正确</code></pre><p>注：linux下配置maven步骤如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、编辑文件vi <span class="token operator">/</span>etc<span class="token operator">/</span>profile<span class="token number">2</span>、在文件末尾添加环境变量<span class="token keyword">export</span> MAVEN_HOME<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token number">-3.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token keyword">export</span> MAVEN_HOME<span class="token keyword">export</span> PATH<span class="token operator">=</span>$PATH<span class="token punctuation">:</span>$MAVEN_HOME<span class="token operator">/</span>bin<span class="token number">3</span>、使文件生效source <span class="token operator">/</span>etc<span class="token operator">/</span>profile  <span class="token number">4</span>、验证是否是否安装成功mvn <span class="token operator">-</span>v</code></pre><h3 id="修改maven镜像及常用配置"><a href="#修改maven镜像及常用配置" class="headerlink" title="修改maven镜像及常用配置"></a>修改maven镜像及常用配置</h3><p>1、找到maven解压目录下的  conf/setting.xml  文件，在 &lt; mirrors &gt;&lt; /mirrors &gt; 标签内添加</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  阿里云镜像  <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>       <span class="token operator">&lt;</span>id<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>       <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>       <span class="token operator">&lt;</span>name<span class="token operator">></span>Nexus aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>       <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre><p>2、配置默认JAVA版本,在 &lt; profiles &gt;&lt; /profiles &gt; 标签内添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>profile<span class="token operator">></span>          <span class="token operator">&lt;</span>id<span class="token operator">></span>jdk8<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>          <span class="token operator">&lt;</span>activation<span class="token operator">></span>              <span class="token operator">&lt;</span>activeByDefault<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>activeByDefault<span class="token operator">></span>              <span class="token operator">&lt;</span>jdk<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>jdk<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>activation<span class="token operator">></span>          <span class="token operator">&lt;</span>properties<span class="token operator">></span>              <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span>              <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span>              <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>compilerVersion<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>compilerVersion<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>profile<span class="token operator">></span></code></pre><p>3、在maven加压目录新建文件夹 repository 用于存放jar包（maven坐标），并在&lt; settings &gt;&lt; /settings &gt;标签内添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>localRepository<span class="token operator">></span>D<span class="token punctuation">:</span>\Program Files\Apache\maven\repository\<span class="token operator">&lt;</span><span class="token operator">/</span>localRepository<span class="token operator">></span></code></pre><p>注：linux则是：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、创建文件夹mkdir <span class="token operator">-</span>p <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token number">-3.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">/</span>repository<span class="token number">2</span>、修改配置<span class="token operator">&lt;</span>localRepository<span class="token operator">></span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token number">-3.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">/</span>repository<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>localRepository<span class="token operator">></span></code></pre><p><em>到此maven在window与linux内的配置就完成了，你也搞定了吗？</em></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 技术流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Markdown制作简历</title>
      <link href="/2019/11/24/markdown-jian-li/"/>
      <url>/2019/11/24/markdown-jian-li/</url>
      
        <content type="html"><![CDATA[<p>工作找不到，投放简历无人应答，难道真的是你技术、人品的问题？不不，是你还缺少一份高质量的简历作为敲门砖。在很多人都在用Word制作简历的时代，你为何不用Markdown来制作呐。</p><p><i class="far fa-hand-point-right"></i> 下面就让我带你们看一份Markdown制作的高质量简历模板吧</p><h3 id="Java开发工程师–仅供参考"><a href="#Java开发工程师–仅供参考" class="headerlink" title="Java开发工程师–仅供参考"></a><center>Java开发工程师–仅供参考</center></h3><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">个人概况</h3>    <!--    <div style="float:left;margin-right:20px;">        <img src="https://i.loli.net/2019/11/24/BFOQUoA8g9yxY6M.jpg" alt="kang.jpg" title="kang" style="width:200px;">    </div>    -->    <div>        <table border="1px solid grey">                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">基本信息: </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">康怀安-男-23 岁</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">专业:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">软件开发</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">联系电话: </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">17629316947</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">学校:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">河南科技大学应用工程学院</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">邮箱: </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">1468140258@qq.com</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">英语水平:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">CET-4</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">大学成绩排名: </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">前3%</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">工作年限:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">3年</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">公司：</td>                    <td colspan="3" style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">矽甲信息科技有限公司</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">学习博客：</td>                    <td colspan="3" style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">https:huanhuanlove.github.io</td>                </tr>            </table>    </div></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">求职意向</h3>    <table border="1px solid grey">        <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">工作性质： </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">全职</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">目标职位:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">Java 开发工程师</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">目标地点: </td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">上海</td>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">目标薪资:</td>                    <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">面议</td>                </tr>    </table></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">个人奖项</h3>    <table border="1px solid grey">        <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">2018/4</td>                    <td style="padding: 3px 10px;text-align: left;height:  40px;width:580px;">河南省软件设计大赛 （二等奖）</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">2018/3</td>                    <td style="padding: 3px 10px;text-align: left;height:  40px;width:580px;">校内大型网页设计大赛 （一等奖）</td>                </tr>    </table></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">掌握技能</h3>    <table border="1px solid grey">        <tr>                    <td style="padding: 3px 10px;text-align: left;width: 750px;height: 40px;">熟悉 Java 基础知识、前端基础知识</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">熟悉 Web 开发主流技术与框架与微服务架构，如SSH、SSM、SpringBoot及微服务开发</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">熟悉前端开发主流技术与框架，如 JQuery、Bootstrap、LayUI、Vuejs、Ant Design Pro</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">熟悉使用 Eclipse、Idea、Git、SVN、Maven、Jenkins 项目管理和项目构建工具</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">熟悉使用 Tomcat、Docker 容器配置和部署，熟练 Linux 系统常用操作</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">熟悉常用数据库的操作，如 MySQL、Oracle、Redis</td>                </tr>                <tr>                    <td style="padding: 3px 10px;text-align: left;width: 150px;height: 40px;">了解微信小程序开发、Android 开发</td>                </tr>    </table></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">项目经历</h3>    <table>        <tr>                    <td style="padding: 3px 10px;text-align: left;width: 350px;height: 40px;">2018.06-2019.05（11 个月）</td>                    <td style="padding: 3px 10px;text-align: left;height:  40px;width:350px;">河南中消物联科技有限公司</td>                <td style="padding: 3px 10px;text-align: left;height:  40px;width:100px;">研发部</td>                </tr>    </table>    <table>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">项目名称 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">心恋舍</td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">开发环境 ： </td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;"> SSM + Maven + Dubbo + Ajax + Redis + Nginx</td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">项目描述 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">               <p>1 、随着时代发展利用计算机实现房屋租赁管理势在必行。对于物业管理来说，利用计算机支持企业高效率完成房屋租赁管理的日常事务，是适应现代企业制度要求、推动企业劳动型管理走向科学化、规范化。</p><p> 2 、功能模块主要分为：基础类：房屋信息、人口信息、党群建设、综合治理、人口计生、劳动保障、特殊人群、民政优抚、公共安全等信息。服务类：服务办事类、矛盾调处类、安全隐患类等。位置类：通过平面地图、仿真三维地图，实现事件定位、人员实时定位、以人找房、以房找人，快速查询等。</p></td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">技术描述 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">               <p>1、使用FastDFS 搭建图片服务器,解决大量图片对服务器的压力。</p><p>2、在房屋评论等页面使用 KindEditor, 提高灵活性。</p><p>3、使用 Redis 缓存服务器来减小服务器压力。</p><p>4、使用 Solr 服务器实现站内搜索技术。</p></td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">责任描述  ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">               本人主要负责基础模块的开发，其中比较难以解决的用户及管理员的权限模块首当其冲。对于这个模块很多同事望而却步，而我对此却有另一番情感。对于权限控制并非无规可循，按照前辈总结的 RBAC 必要时还可以结合 ACL 进行表的设计，当登录或需要操作页面上的需要某个权限才可操作的按钮、菜单等时结合权限框架 Shiro 或 SpringSecurity 进行细粒度的控制，对此即可把权限控制到极致。</td>        </tr>    </table>    <br><br><br>    <table>        <tr>                    <td style="padding: 3px 10px;text-align: left;width: 350px;height: 40px;">2017.02-2018.04</td>                    <td style="padding: 3px 10px;text-align: left;height:  40px;width:350px;">自主开发 </td>                <td style="padding: 3px 10px;text-align: left;height:  40px;width:100px;">全栈开发</td>                </tr>    </table>    <table>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">项目名称 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">绿之源泉</td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">开发环境 ： </td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;"> Idea + SpringCloud + MySQL + Activiti工作流 + Jenkins自动发包 + Docker</td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">项目描述 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">               <p> 一直以来，绿色环保都是全世界共同关注的话题，关乎人们的生活、健康以及精神发展此时本程序应运而生。项目主要包含前端页面的编写、后端包含绿色出行、垃圾回收、新闻中心、产品中心、个人中心、联系我们、订单模块、后台管理模块。</p></td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">技术描述 ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">               <p>1、使用SpringBoot 搭建项目引入 SpringCloud 的 Eureka、Ribbon 等组件。</p> <p>2、使用 Quartz 来完成时间调度功能，zTree 完成各目录的层级关系。</p> <p>3、利用 poi实现数据输入输出到 Excel，可在线上传下载，用IText实现对 PDF 的操作。</p> <p>4、利用Jenkins进行自动发包，做到提交即发包，省时省力。</p> <p>5、利用Docker容器，使开发测试环境一致，做到拿来即用的效果。</p></td>        </tr>        <tr>               <td style="padding: 3px 10px;text-align: left;width: 200px;height: 40px;">责任描述  ：</td>               <td style="padding: 3px 10px;text-align: left;height:  40px;width:550px;">              前期设计，数据库及前后端编写，单元测试，后期优化。</td>        </tr>    </table></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">自我评价</h3>    <p>1、 学习能力强，具备很好的自学能力，对新技术有着强烈的好奇心</p>    <p>2、 做事认真踏实，热爱软 Java 开发工作，对业务需求理解能力强，具备一定的需求调研、需求分析、模块设计、系统设计、模块开发、项目管理的能力</p></div><div>    <h3 style="background-color: grey;padding:10px 20px;font-size:20px;">心存感恩</h3>    <p>1、感谢您愿意花费宝贵的时间阅读我的简历，同时也希望以后有一起共事的机会</p></div><p>注：想要源码请去公众号–<code>康康小课堂</code>–找作者领取</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 简历模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成thymeleaf</title>
      <link href="/2019/11/14/springboot-ji-cheng-thymeleaf/"/>
      <url>/2019/11/14/springboot-ji-cheng-thymeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p>Thymeleaf是跟FreeMarker类似的模板引擎，它可以完全替代JSP，其特点有一下几个：</p><ol><li>Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以thymeleaf的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、OGNL表达式效果，避免每天套模板、改jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf提供spring标准方言和一个与SpringMVC完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ol><p>注：想更加深入的了解Thymeleaf，可以去其官网：<a href="http://www.thymeleaf.org" target="_blank" rel="noopener">http://www.thymeleaf.org</a></p><p>集成SpringBoot</p><h3 id="1-在POM文件中添加依赖"><a href="#1-在POM文件中添加依赖" class="headerlink" title="1.在POM文件中添加依赖"></a>1.在POM文件中添加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-配置yml文件"><a href="#2-配置yml文件" class="headerlink" title="2.配置yml文件"></a>2.配置yml文件</h3><pre class=" language-yml"><code class="language-yml"># thymeleaf spring:  thymeleaf:    prefix: classpath:/templates/    check-template-location: true    suffix: .html    encoding: UTF-8    mode: HTML5    cache: false</code></pre><h3 id="3-HTML文件中加入头文件"><a href="#3-HTML文件中加入头文件" class="headerlink" title="3.HTML文件中加入头文件"></a>3.HTML文件中加入头文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span>        xmlns<span class="token punctuation">:</span>th<span class="token operator">=</span><span class="token string">"http://www.thymeleaf.org"</span><span class="token operator">></span></code></pre><h3 id="4-编写如下Controller即可进入页面"><a href="#4-编写如下Controller即可进入页面" class="headerlink" title="4.编写如下Controller即可进入页面"></a>4.编写如下Controller即可进入页面</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">goIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-效果如下"><a href="#5-效果如下" class="headerlink" title="5.效果如下"></a>5.效果如下</h3><p><img src="https://i.loli.net/2019/11/24/yZL92SVAgceT7YH.png" alt="康康小课堂提供"></p><h3 id="6-常用语法"><a href="#6-常用语法" class="headerlink" title="6.常用语法"></a>6.常用语法</h3><pre><code>1）th:text：文本替换；2）th:utext：支持html的文本替换。3）th:value：属性赋值  4）th:each：遍历循环元素5）th:if：判断条件，类似的还有th:unless，th:switch，th:case6）th:insert：代码块引入，类似的还有th:replace，th:include，常用于公共代码块提取的场景7）th:fragment：定义代码块，方便被th:insert引用8）th:object：声明变量，一般和*{}一起配合使用，达到偷懒的效果。9）th:attr：设置标签属性，多个属性可以用逗号分隔</code></pre><p>html文件示例：</p><pre class=" language-dust"><code class="language-dust"><!DOCTYPE html><html lang="en" xmlns:th="http://www.thymeleaf.org"><head>    <meta charset="UTF-8">    <title>Thymeleaf 语法示例</title></head><body>    <!--th:text 设置当前元素的文本内容，常用，优先级不高-->    <p th:text="${thText}" />    <p th:utext="${thUText}" />    <!--th:value 设置当前元素的value值，常用，优先级仅比th:text高-->    <input type="text" th:value="${thValue}" />    <!--th:each 遍历列表，常用，优先级很高，仅此于代码块的插入-->    <!--th:each 修饰在div上，则div层重复出现，若只想p标签遍历，则修饰在p标签上-->    <div th:each="message : ${thEach}"> <!-- 遍历整个div-p，不推荐-->        <p th:text="${message}" />    </div>    <div> <!--只遍历p，推荐使用-->        <p th:text="${message}" th:each="message : ${thEach}" />    </div>    <!--th:if 条件判断，类似的有th:switch，th:case，优先级仅次于th:each, 其中#strings是变量表达式的内置方法-->    <p th:text="${thIf}" th:if="${not #strings.isEmpty(thIf)}"></p>    <!--th:insert 把代码块插入当前div中，优先级最高，类似的有th:replace，th:include，~{} ：代码块表达式 -->    <div th:insert="~{grammar/common::thCommon}"></div>    <!--th:object 声明变量，和*{} 一起使用-->    <div th:object="${thObject}">        <p>ID: <span th:text="*{id}" /></p><!--th:text="${thObject.id}"-->        <p>TH: <span th:text="*{thName}" /></p><!--${thObject.thName}-->        <p>DE: <span th:text="*{desc}" /></p><!--${thObject.desc}-->    </div></body></html></code></pre><p>后台Controller示例：</p><pre class=" language-arduino"><code class="language-arduino">@Controllerpublic class ThymeleafController {    @RequestMapping("thymeleaf")    public String thymeleaf(ModelMap map) {        map.put("thText", "th:text 设置文本内容 <b>加粗</b>");        map.put("thUText", "th:utext 设置文本内容 <b>加粗</b>");        map.put("thValue", "thValue 设置当前元素的value值");        map.put("thEach", Arrays.asList("th:each", "遍历列表"));        map.put("thIf", "msg is not null");        map.put("thObject", new ThObject(1L, "th:object", "用来偷懒的th属性"));        return "grammar/thymeleaf";    }}</code></pre><h3 id="7-标准表达式语法"><a href="#7-标准表达式语法" class="headerlink" title="7.标准表达式语法"></a>7.标准表达式语法</h3><ul><li>${…} 变量表达式，Variable Expressions</li><li>@{…} 链接表达式，Link URL Expressions</li><li>#{…} 消息表达式，Message Expressions</li><li>~{…} 代码块表达式，Fragment Expressions</li><li>*{…} 选择变量表达式，Selection Variable Expressions</li></ul><p>~{…} 代码块表达式</p><ol><li>推荐：~{templatename::fragmentname}</li><li>支持：~{templatename::#id}</li></ol><blockquote><p>templatename：模版名，Thymeleaf会根据模版名解析完整路径：/resources/templates/templatename.html，要注意文件的路径。<br>fragmentname：片段名，Thymeleaf通过th:fragment声明定义代码块，即：th:fragment=”fragmentname”<br>id：HTML的id选择器，使用时要在前面加上#号，不支持class选择器。</p></blockquote><p>配合（th:insert，th:replace，th:include）一起使用。</p><ol><li>th:insert：将代码块片段整个插入到使用了th:insert的HTML标签中</li><li>th:replace：将代码块片段整个替换使用了th:replace的HTML标签中</li><li>th:include：将代码块片段包含的内容插入到使用了th:include的HTML标签中</li></ol><p>#{…} 消息表达式</p><ol><li>消息表达式一般用于国际化的场景。</li></ol><p>@{…} 链接表达式</p><ol><li>不管是静态资源的引用，form表单的请求，凡是链接都可以用@{…} 。这样可以动态获取项目路径，即便项目名变了，依然可以正常访问</li><li>无参：@{/xxx}</li><li>有参：@{/xxx(k1=v1,k2=v2)} 对应url结构：xxx?k1=v1&amp;k2=v2</li><li>引入本地资源：@{/项目本地的资源路径}</li><li>引入外部资源：@{/webjars/资源在jar包中的路径}</li></ol><p>示例：</p><pre class=" language-stylus"><code class="language-stylus"><span class="token selector">&lt;link th:href="@<span class="token interpolation variable"><span class="token punctuation">{</span><span class="token operator">/</span>webjars<span class="token operator">/</span>bootstrap<span class="token operator">/</span><span class="token number">4.0</span><span class="token operator">.</span><span class="token number">0</span><span class="token operator">/</span>css<span class="token operator">/</span>bootstrap<span class="token operator">.</span>css<span class="token punctuation">}</span></span>" rel="stylesheet">&lt;link th:href="@<span class="token interpolation variable"><span class="token punctuation">{</span><span class="token operator">/</span>main<span class="token operator">/</span>css<span class="token operator">/</span>itdragon<span class="token operator">.</span>css<span class="token punctuation">}</span></span>" rel="stylesheet">&lt;form class="form-login" th:action="@<span class="token interpolation variable"><span class="token punctuation">{</span><span class="token operator">/</span>user<span class="token operator">/</span>login<span class="token punctuation">}</span></span>" th:method="post" >&lt;a class="btn btn-sm" th:href="@<span class="token interpolation variable"><span class="token punctuation">{</span><span class="token operator">/</span>login<span class="token operator">.</span>html<span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token string">'zh_CN'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>">中文&lt;/a>&lt;a class="btn btn-sm" th:href="@<span class="token punctuation">{</span></span>/login<span class="token punctuation">.</span><span class="token func"><span class="token function">html</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token string">'en_US'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>"<span class="token operator">></span>English<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></span></code></pre><p>${…} 变量表达式</p><ol><li>获取对象的属性和方法</li><li>使用ctx，vars，locale，request，response，session，servletContext内置对象</li><li>使用dates，numbers，strings，objects，arrays，lists，sets，maps等内置方法</li></ol><h3 id="8-常用的内置对象"><a href="#8-常用的内置对象" class="headerlink" title="8.常用的内置对象"></a>8.常用的内置对象</h3><p>一、ctx ：上下文对象。<br>二、vars ：上下文变量。<br>三、locale：上下文的语言环境。<br>四、request：（仅在web上下文）的 HttpServletRequest 对象。<br>五、response：（仅在web上下文）的 HttpServletResponse 对象。<br>六、session：（仅在web上下文）的 HttpSession 对象。<br>七、servletContext：（仅在web上下文）的 ServletContext 对象</p><p>示例：</p><pre class=" language-xl"><code class="language-xl">// java 代码将用户名放在session中session.setAttribute("userinfo",username);// Thymeleaf通过内置对象直接获取th:text="${session.userinfo}"</code></pre><h3 id="9-常用的内置方法"><a href="#9-常用的内置方法" class="headerlink" title="9.常用的内置方法"></a>9.常用的内置方法</h3><p>一、strings：字符串格式化方法，常用的Java方法它都有。比如：equals，equalsIgnoreCase，length，trim，toUpperCase，toLowerCase，indexOf，substring，replace，startsWith，endsWith，contains，containsIgnoreCase等<br>二、numbers：数值格式化方法，常用的方法有：formatDecimal等<br>三、bools：布尔方法，常用的方法有：isTrue，isFalse等<br>四、arrays：数组方法，常用的方法有：toArray，length，isEmpty，contains，containsAll等<br>五、lists，sets：集合方法，常用的方法有：toList，size，isEmpty，contains，containsAll，sort等<br>六、maps：对象方法，常用的方法有：size，isEmpty，containsKey，containsValue等<br>七、dates：日期方法，常用的方法有：format，year，month，hour，createNow等</p><h3 id="10-静态资源不能加载解决"><a href="#10-静态资源不能加载解决" class="headerlink" title="10.静态资源不能加载解决"></a>10.静态资源不能加载解决</h3><ol><li>启动类继承WebMvcConfigurationSupport</li><li>重写addResourceHandlers（）方法</li></ol><p>示例：</p><pre class=" language-less"><code class="language-less"><span class="token atrule">@SpringBootApplication<span class="token punctuation">(</span>scanBasePackages = "com.example.shiro1"<span class="token punctuation">)</span>@MapperScan<span class="token punctuation">(</span>basePackages = "com.example.shiro1.dao"<span class="token punctuation">)</span>@EnableAspectJAutoProxy<span class="token punctuation">(</span>proxyTargetClass = true<span class="token punctuation">)</span>public class Shiro1Application extends WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>    <span class="token selector">public static void main(String[] args)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token number">.</span><span class="token function">run</span><span class="token punctuation">(</span>Shiro<span class="token number">1</span>Application<span class="token number">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule">@Override    protected void addResourceHandlers<span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置静态资源的路径</span>        registry<span class="token number">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>ResourceUtils<span class="token number">.</span>CLASSPATH_URL_PREFIX <span class="token operator">+</span> <span class="token string">"/static/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生技 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker风流史</title>
      <link href="/2019/10/06/docker-feng-liu-shi/"/>
      <url>/2019/10/06/docker-feng-liu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在生活中经常听到 <strong><em>Docker</em></strong> 这个词，但 <strong><em>Docker</em></strong> 到底是什么呐？此问题一出，致使很多人感到疑惑，<strong><em>Docker</em></strong> 不就是一个容器吗？类似的还有Tomcat、Jetty等，对此回答到底对不对呐，就请朋友们一起跟着我的脚步共同进入Docker的世界，一起来揭开 <strong><em>Docker</em></strong> 的庐山真面，看看 <strong><em>Docker</em></strong> 背后到底藏着什么 Secret（秘密）。</p><h2 id="Docker是何物？"><a href="#Docker是何物？" class="headerlink" title="Docker是何物？"></a>Docker是何物？</h2><p>官方解读：<br>    Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。其口号–“一次创建，到处运行”。</p><p>个人经验总结：</p><ol><li>docker是一个开源的软件部署解决方案；</li><li>docker也是轻量级的应用容器框架；</li><li>docker可以打包、发布、运行任何的应用</li></ol><h2 id="Dcoker为何而生？"><a href="#Dcoker为何而生？" class="headerlink" title="Dcoker为何而生？"></a>Dcoker为何而生？</h2><p>Docker 是 PaaS 提供商 dotCloud 开源的一个基于 LXC 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。</p><p>1.看一下不使用Docker的开发部署几条缺点：</p><ul><li>资源利用率相对较低</li><li>但物理机多应用无法有效隔离（如CPU、进程、磁盘）</li><li>测试、版本管理复杂</li><li>迁移成本高且较为麻烦</li><li>传统虚拟机空间占用大、启动慢、管理复杂</li><li>开发人员可以消除协作编码时“在我的机器上可正常工作”的问题。</li><li>运维人员可以在隔离容器中并行运行和管理应用，获得更好的计算密度。</li></ul><p>从上面不使用Docker开发部署的几条缺点可以看出Docker到底为何而生了吧，且也正好引出了Docker的优点所在。“鱼和熊掌不可得兼”这个道理大家应该都懂吧，所以说有长必有短，既然Docker有这么多的好处，那也必然有其局限之处。</p><h2 id="井底之Docker"><a href="#井底之Docker" class="headerlink" title="井底之Docker"></a>井底之Docker</h2><ol><li>Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li><li>LXC是基于cgroup等linux kernel功能的，因此container的guest系统只能是linux base的</li><li>隔离性相比KVM之类的虚拟化方案还是有些欠缺，所有container公用一部分的运行库</li><li>网络管理相对简单，主要是基于namespace隔离</li><li>cgroup的cpu和cpuset提供的cpu功能相比KVM的等虚拟化方案相比难以度量(所以dotcloud主要是按内存收费)</li><li>Docker对disk的管理比较有限</li><li>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</li></ol><h2 id="Docker-vs-VM"><a href="#Docker-vs-VM" class="headerlink" title="Docker vs VM"></a>Docker vs VM</h2><p>很多朋友分不清Docker容器与虚拟机的关系，老是混淆在一起。鉴于此就让我们一起看看其区别于联系吧</p><p>1、联系<br>        Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。<br>2、区别<br><img src="https://i.loli.net/2019/11/19/hVx5JWzm4dogI7y.png" alt="找不同哦"></p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>较弱</td></tr><tr><td>系统支持量</td><td>单击支持上千个容器</td><td>一般几十个</td></tr></tbody></table><p>传统虚拟机如 VMware ， VisualBox 之类的需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。而容器技术是和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。从上面的图表中可以很直观的看出其区别。</p><h2 id="Docker-Install（安装）"><a href="#Docker-Install（安装）" class="headerlink" title="Docker Install（安装）"></a>Docker Install（安装）</h2><p>注：在此只讲解Centos7及以上版本的系统安装，其他系统自行查资料进行安装使用。</p><pre class=" language-Linux"><code class="language-Linux">1.升级yum:    yum update</code></pre><pre class=" language-Linux"><code class="language-Linux">2.卸载旧版本：    sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><pre class=" language-Linux"><code class="language-Linux">3.安装Docker Engine-Community,在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。    a.安装所需的依赖    sudo yum install -y yum-utils \                      device-mapper-persistent-data \                      lvm2    b.设置稳定的仓库    sudo yum-config-manager \                    --add-repo \                    https://download.docker.com/linux/centos/docker-ce.repo    c.安装最新版本的 Docker    sudo yum install docker-ce docker-ce-cli containerd.io    注：如果提示您接受 GPG 密钥，请选是。</code></pre><pre><code>2.当然在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装：</code></pre><pre class=" language-Linux"><code class="language-Linux">curl -fsSL get.docker.com -o get-docker.shsh get-docker.sh注：看到这是不是有一种想怒打作者的冲动，我费好大劲把上面的步骤走完了，你又说有简单的办法，这不是找打吗？哈哈。</code></pre><pre class=" language-Linux"><code class="language-Linux">3.验证是否安装成功docker versionordocker info</code></pre><pre><code>对此Docker就安装完成了，你是一脸懵逼不知所云，还是思路清晰跟着作者一步一步走下来了呐？</code></pre><h2 id="Docker三大概念及常用命令"><a href="#Docker三大概念及常用命令" class="headerlink" title="Docker三大概念及常用命令"></a>Docker三大概念及常用命令</h2><p>1.启动Docker<br>    <code>sudo systemctl enable docker</code><br>    <code>sudo systemctl start docker</code></p><p><img src="https://i.loli.net/2019/11/20/y1lUzG5vto9MQ8R.jpg" alt="一图说天下"></p><p><img src="https://i.loli.net/2019/11/27/i9tjDPzRZ5qTd2L.png" alt="Docker常用命令"></p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>学习一门新知识不了解其内在架构，终究是过于浅敷，遇到棘手的问题很难从根本去思考。所以想学好Docker的小伙伴们就必须了解Docker的内在架构。</p><p><img src="https://i.loli.net/2019/11/20/qpGhegDSmXI6lcT.png" alt="说事专用图"></p><p>Docker 使用了 C/S 结构，即客户端/服务器体系结构。 Docker 客户端与 Docker 服务器进行交互，Docker服务端负责构建、运行和分发 Docker 镜像。 Docker 客户端和服务端可以运行在一台机器上，可以通过 RESTful、Socket 或网络接口与远程 Docker 服务端进行通信。</p><p>通过上图大致我们可以了解到，Docker 的核心组件包括：</p><ol><li>Docker Client</li><li>Docker daemon</li><li>Docker Image</li><li>Docker Registry</li><li>Docker Container</li></ol><p>1、Docker Client<br>也称 Docker 客户端。它其实就是 Docker 提供命令行界面 (CLI) 工具，是许多 Docker 用户与 Docker 进行交互的主要方式。客户端可以构建，运行和停止应用程序，还可以远程与Docker_Host进行交互。最常用的 Docker 客户端就是 docker 命令，我们可以通过 docker 命令很方便地在 host 上构建和运行 docker 容器。</p><p>2、Docker daemon<br>是服务器组件，以 Linux 后台服务的方式运行，是 Docker 最核心的后台进程，我们也把它称为守护进程。它负责响应来自 Docker Client 的请求，然后将这些请求翻译成系统调用完成容器管理操作。该进程会在后台启动一个 API Server ，负责接收由 Docker Client 发送的请求，接收到的请求将通过Docker daemon 内部的一个路由分发调度，由具体的函数来执行请求。</p><p>其大致可分为三部分：</p><ul><li><p>Docker Server</p></li><li><p>Engine</p></li><li><p>Job</p><p> <img src="https://i.loli.net/2019/11/20/dvNQgypauDHPOl5.jpg" alt="如图所示"><br>Docker Daemon 可以认为是通过 Docker Server 模块接受 Docker Client 的请求，并在 Engine 中处理请求，然后根据请求类型，创建出指定的 Job 并运行。 Docker Daemon 运行在 Docker host 上，负责创建、运行、监控容器，构建、存储镜像。</p></li></ul><p>运行过程的作用有以下几种可能：</p><ol><li>向 Docker Registry 获取镜像</li><li>通过 graphdriver 执行容器镜像的本地化操作</li><li>通过 networkdriver 执行容器网络环境的配置</li><li>通过 execdriver 执行容器内部运行的执行工作</li><li>由于 Docker Daemon 和 Docker Client 的启动都是通过可执行文件 docker 来完成的，因此两者的启动流程非常相似。 Docker 可执行文件运行时，运行代码通过不同的命令行 flag 参数，区分两者，并最终运行两者各自相应的部分。</li></ol><p>启动 Docker Daemon 时，一般可以使用以下命令来完成</p><pre class=" language-Linux"><code class="language-Linux">docker --daemon = truedocker –ddocker –d = true</code></pre><p>然后由 docker 的 main() 函数来解析以上命令的相应参数，并最终完成 Docker Daemon 的启动。</p><p>1、默认配置下，Docker daemon 只能响应来自本地 Host 的客户端请求。若想允许远程客户端请求，需要在配置文件中打开 TCP 监听。进行如下配置即可：</p><p>==编辑配置文件 /etc/systemd/system/multi-user.target.wants/docker.service ，在环境变量 ExecStart尾部追加 -H tcp://0.0.0.0，允许来自任意 IP 的客户端连接。==</p><p>2、重启 Docker daemon</p><pre class=" language-Linux"><code class="language-Linux">systemctl daemon-reloadsystemctl restart docker.service</code></pre><p>3、通过如下命令与远程服务器建立通信连接</p><pre class=" language-nginx"><code class="language-nginx">docker <span class="token operator">-</span>H 服务器IP地址 info<span class="token operator">-</span>H 是用来指定服务器主机， info 子命令用于查看 Docker 服务器的信息</code></pre><p>3、Docker Image<br>Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。我们可将 Docker 镜像看成只读模板，通过它可以创建 Docker 容器。</p><p>镜像有多种生成方法：</p><ul><li>从无到有开始创建镜像</li><li>下载并使用别人创建好的现成的镜像</li><li>在现有镜像上创建新的镜像</li></ul><p>也可以将镜像的内容和创建步骤描述在一个文本文件中，这个文件被称作 Dockerfile ，通过执行 docker build <docker-file> 命令可以构建出 Docker 镜像</docker-file></p><p>4、Docker Registry<br>Docker registry 是存储 docker image 的仓库，运行docker push、docker pull、docker search时，实际上是通过 docker daemon 与 docker registry 通信。如下图：</p><p><img src="https://i.loli.net/2019/11/20/BikbvVDygpFrftq.jpg" alt="康康小课堂"></p><p>5、Docker Container<br>Docker 容器就是 Docker 镜像的运行实例，是真正运行项目程序、消耗系统资源、提供服务的地方。 Docker Container 提供了系统硬件环境，我们可以使用 Docker Images 这些制作好的系统盘，再加上我们所编写好的项目代码， run 一下就可以提供服务啦。</p><h2 id="Docker组件是如何协同工作支撑起容器的呐？"><a href="#Docker组件是如何协同工作支撑起容器的呐？" class="headerlink" title="Docker组件是如何协同工作支撑起容器的呐？"></a>Docker组件是如何协同工作支撑起容器的呐？</h2><p>容器启动过程如下：</p><ul><li>Docker 客户端执行 docker run 命令</li><li>Docker daemon 发现本地没有 hello-world 镜像</li><li>daemon 从 Docker Hub 下载镜像</li><li>下载完成，镜像 hello-world 被保存到本地</li><li>Docker daemon 启动容器</li></ul><p>一起来看一下具体流程吧</p><p>运行容器<br><img src="https://i.loli.net/2019/11/20/ZkpSlGy7Mu3xYjC.png" alt="kang"></p><p>查看镜像<br><img src="https://i.loli.net/2019/11/20/mdBRpYXkZt63slH.png" alt="kang"></p><p>查看正在运行的容器<br><img src="https://i.loli.net/2019/11/20/XoOrevUpxAnNYGu.png" alt="kang"></p><p>上面步骤就是Docker运行一个容器的步骤，知道了这些再使用Docker命令是思路是不是清晰了许多。</p><h2 id="Docker常用命令温故"><a href="#Docker常用命令温故" class="headerlink" title="Docker常用命令温故"></a>Docker常用命令温故</h2><p><img src="https://i.loli.net/2019/11/20/A9gpUCYMmWcPqLD.png" alt="Docker常用命令图示"></p><h2 id="DockerFile是何物"><a href="#DockerFile是何物" class="headerlink" title="DockerFile是何物"></a>DockerFile是何物</h2><p>上面我们已经提到过DockerFile了，但它到底是何方神圣呐，带着疑问跟着我的步伐一起进入DockerFile的世界看看吧。</p><p>Dockerfile 是自动构建 docker 镜像的配置文件， 用户可以使用 Dockerfile 快速创建自定义的镜像。Dockerfile 中的命令非常类似于 linux 下的 shell 命令。且Dockerfile 可以自定义镜像，通过 Docker 命令去运行镜像，从而达到启动容器的目的。</p><p>我们可以通过下面这幅图来直观地感受下 Docker 镜像、容器和 Dockerfile 三者之间的关系。</p><p><img src="https://i.loli.net/2019/11/21/S7Qa2ZpF4X6UDhb.png" alt="说事专用图"></p><p>Dockerfile 是由一行行命令语句组成，且支持已 # 开头的注释行。</p><p>一般可以将 Dockerfile 分为四个部分：</p><ol><li>基础镜像(父镜像)信息指令 FROM</li><li>维护者信息指令 MAINTAINER</li><li>镜像操作指令 RUN 、 EVN 、 ADD 和 WORKDIR 等</li><li>容器启动指令 CMD 、 ENTRYPOINT 和 USER 等</li></ol><pre class=" language-javascript"><code class="language-javascript">如下示例： <span class="token number">1</span><span class="token punctuation">.</span> FROM python<span class="token punctuation">:</span><span class="token number">2.7</span> <span class="token number">2</span><span class="token punctuation">.</span> MAINTAINER kang <span class="token operator">&lt;</span><span class="token number">1468140258</span>@qq<span class="token punctuation">.</span>com<span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">.</span> COPY <span class="token punctuation">.</span> <span class="token operator">/</span>app <span class="token number">4</span><span class="token punctuation">.</span> WORKDIR <span class="token operator">/</span>app <span class="token number">5</span><span class="token punctuation">.</span> RUN pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt <span class="token number">6</span><span class="token punctuation">.</span> EXPOSE <span class="token number">5000</span> <span class="token number">7</span><span class="token punctuation">.</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">]</span> <span class="token number">8</span><span class="token punctuation">.</span> CMD <span class="token punctuation">[</span><span class="token string">"app.py"</span><span class="token punctuation">]</span></code></pre><p>我们可以分析一下上面这个过程：</p><ol><li>从 Docker Hub 上 pull 下 python 2.7 的基础镜像</li><li>显示维护者的信息</li><li>copy 当前目录到容器中的 /app 目录下 复制本地主机的 <src> ( Dockerfile 所在目录的相对路径)到容器里 <dest></dest></src></li><li>指定工作路径为 /app</li><li>安装依赖包</li><li>暴露 5000 端口</li><li>启动 app</li></ol><p>到此一个容器就顺利起来了，你看透了其中的秘密了吗！！！</p><h2 id="Dockerfile常用的指令"><a href="#Dockerfile常用的指令" class="headerlink" title="Dockerfile常用的指令"></a>Dockerfile常用的指令</h2><p><code>格式：  INSTRUCTION argument （INSTRUCTION 不区分大小写，但是常用大写）</code></p><p>1.FROM<br>    格式： FROM image or FORM image:tag<br>    精解：FROM 是用于指定基础的 images，Dockerfile 均以 FROM 开头，FROM 命令指明 Dockerfile 所创建的镜像文件以什么镜像为基础，FROM 以后的所有指令都会在 FROM 的基础上进行创建镜像。同一个 Dockerfile 中可多次使用 FROM 命令用于创建多个镜像</p><p>2.MAINTAINER<br>    格式：MAINTAINER name<br>    精解：MAINTAINER 是用于指定镜像创建者和联系方式，这里设置成你的 ID 和邮箱即可</p><p>3.COPY<br>    格式： COPY src  dest<br>    精解：COPY 是用于复制本地主机的 src (Dockerfile 所在目录的相对路径)到容器中的 dest ，当使用本地目录为源目录时，推荐使用 COPY</p><p>4.WORKDIR<br>    格式：WORKDIR /path/to/work/dir<br>    精解：WORKDIR 用于配合 RUN，CMD，ENTRYPOINT 命令设置当前工作路径。可以设置多次，如果是相对路径，则相对前一个 WORKDIR 命令。默认路径为/。</p><p>5.RUN<br>    格式：RUN command<br>    精解：RUN 用于容器内部执行命令。每个 RUN 命令相当于在原有的镜像基础上添加了一个改动层，原有的镜像不会有变化</p><p>6.EXPOSE<br>    格式：EXPOSE port [port…]<br>    精解：EXPOSE 命令用来指定对外开放的端口</p><p>7.ENTRYPOINT<br>    格式一：ENTRYPOINT [“executable”, “param1”, “param2”] ：推荐使用的 exec形式<br>    格式二：ENTRYPOINT command param1 param2 ：shell 形式<br>    精解：ENTRYPOINT 可以让你的容器表现得像一个可执行程序一样。一个 Dockerfile 中只能有一个 ENTRYPOINT，如果有多个，则最后一个生效。</p><p>8.CMD<br>    格式一：CMD [“executable”,”param1”,”param2”]：推荐使用的 exec 形式。<br>    格式二：CMD [“param1”,”param2”]：无可执行程序形式<br>    格式三：CMD command param1 param2：shell 形式<br>    精解：CMD 命令用于启动容器时默认执行的命令，CMD 命令可以包含可执行文件，也可以不包含可执行文件。不包含可执行文件的情况下就要用 ENTRYPOINT 指定一个，然后 CMD 命令的参数就会作为ENTRYPOINT的参数，一个 Dockerfile 中只能有一个CMD，如果有多个，则最后一个生效。而 CMD 的 shell 形式默认调用 /bin/sh -c 执行命令。CMD 命令会被 Docker 命令行传入的参数覆盖：docker run busybox /bin/echo Hello Docker 会把 CMD 里的命令覆盖。</p><h2 id="构建Dockerfile实例"><a href="#构建Dockerfile实例" class="headerlink" title="构建Dockerfile实例"></a>构建Dockerfile实例</h2><p>该说的上面都已经说完了，那么下面我们就一起做一个实例小试一下牛刀吧</p><pre class=" language-clean"><code class="language-clean">FROM nginxMAINTAINER kang <1468140258@qq.com>RUN echo '<h3>Hello, DockerFile !</h3>' >  /usr/share/nginx/html/index.html</code></pre><p>然后在Dockerfile 文件所在目录执行：</p><p>1、构建<br>docker build -t  repo/nginx_demo:v1</p><p>-t 是为新镜像设置仓库和名称，<br>repo 为仓库名，<br>nginx_demo 为镜像名，<br>v1是标签</p><p>构建完成之后，使用 docker images 命令查看所有镜像，如果存在 REPOSITORY 为 nginx 和 TAG 是 v1 的信息，就表示构建成功。</p><p>2、启动此容器</p><p>docker run –name nginx_demo -d -p 8080:80   repo/nginx_demo:v1</p><p>这样我们可以用浏览器去访问这个 nginx 服务器：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，此时页面将返回信息： Hello, DockerFile !</p><p>对此这个例子就结束了，是不是特别简单呐，自己也动手写一个吧</p><p>注：可能会遇到的问题：<br>问题：Error response from daemon: pull access denied for centos7, repository does not exist or may require ‘docker login’: denied: requested access to the resource is denied</p><p>解答：前往官网注册—<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> ，注册后在命令行登录即可–&gt; docker login</p><p>问题：Error response from daemon: Get <a href="https://registry-1.docker.io/v2/library/centos/manifests/latest" target="_blank" rel="noopener">https://registry-1.docker.io/v2/library/centos/manifests/latest</a>: Get <a href="https://auth.docker.io/token?account=huanhuanlove&amp;scope=repository%3Alibrary%2Fcentos%3Apull&amp;service=registry.docker.io" target="_blank" rel="noopener">https://auth.docker.io/token?account=huanhuanlove&amp;scope=repository%3Alibrary%2Fcentos%3Apull&amp;service=registry.docker.io</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>第一步：通过dig @114.114.114.114 registry-1.docker.io找到可用IP<br>第二步：尝试修改/etc/hosts强制docker.io相关的域名解析到其它可用IP，添加 54.164.230.151 registry-1.docker.io<br>第三步：保存重试</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea神器破解及插件全集</title>
      <link href="/2019/10/01/idea-shen-qi-po-jie-ji-cha-jian-quan-ji/"/>
      <url>/2019/10/01/idea-shen-qi-po-jie-ji-cha-jian-quan-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一：2019-3-3版本实例讲解"><a href="#一：2019-3-3版本实例讲解" class="headerlink" title="一：2019.3.3版本实例讲解"></a>一：2019.3.3版本实例讲解</h2><h3 id="1-百度网盘下载破解文件"><a href="#1-百度网盘下载破解文件" class="headerlink" title="1.百度网盘下载破解文件"></a>1.百度网盘下载破解文件</h3><p>1.链接：<a href="https://pan.baidu.com/s/1FbZdigi0yd9uZktMmBf8gw" target="_blank" rel="noopener">https://pan.baidu.com/s/1FbZdigi0yd9uZktMmBf8gw</a><br>提取码：goyi </p><p>2.目录结构<br><img src="https://i.loli.net/2020/02/20/GxAQDKwNWndrTeb.png" alt="目录结构"></p><ol start="3"><li>修改jar包位置<br><img src="https://i.loli.net/2020/02/20/WcyzBOvHgqr1u8J.png" alt="jar包位置"></li></ol><h3 id="2-断开网络连接"><a href="#2-断开网络连接" class="headerlink" title="2.断开网络连接"></a>2.断开网络连接</h3><p>1.打开idea进行如下操作：<br><img src="https://i.loli.net/2020/02/20/8AWO2mDHtsf9X7T.png" alt="找到配置项"><br><img src="https://i.loli.net/2020/02/20/8AWO2mDHtsf9X7T.png" alt="修改配置"></p><p>2.<code>-javaagent:E:\software\idea2019\bin\jetbrains-agent.jar</code><br>添加完成后点击“save”进行保存，然后关闭idea，必须关闭一下哦</p><p>注：<code>-javaagent:E:\software\idea2019\bin\jetbrains-agent.jar</code> 此行内容必须保证正确性，否则idea将打不开。<br>但如果一不小心手误写错啦，也别急着卸载，既然改配置了就必然会有一个文件来进行保存，经过小kang的努力侦查，发现idea在安装的时候会生成如下图目录，<br>按图操作便可解此难题呦！！！<br><img src="https://i.loli.net/2020/02/20/EaTlSesCvDxdMXV.png" alt="改错"></p><h3 id="3-强力破解"><a href="#3-强力破解" class="headerlink" title="3.强力破解"></a>3.强力破解</h3><p>再次打开idea选择–&gt; Help -&gt; Register…  , 在弹出框内选择Activation code,并在下方框内填写注册码</p><blockquote><p>3AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEEkJyYvNEuPWBSrQkPmVpim/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/ZGtNIUOczUQ0iGKKnSSsfQ/3UoMv0q/yJcfvj+me5Zd/gfaisCCMUaGjB/lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD//dLT+HuZdc1sAIYrw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</p></blockquote><h3 id="4-常用配置"><a href="#4-常用配置" class="headerlink" title="4.常用配置"></a>4.常用配置</h3><p>–&gt; file-&gt;settings下修改</p><p>1.设置主题</p><p>Appearance &amp; Behavior(外观和行为)</p><p><img src="https://i.loli.net/2020/02/20/QoMd1qge8NmXSOz.png" alt="设置主题"><br><img src="https://i.loli.net/2020/02/20/bURPKkYiE8a2ItD.png" alt="设置主题"></p><p>2.设置鼠标滚轮修改字体大小<br><img src="https://i.loli.net/2020/02/20/ghkVZcvFm6pojsC.png" alt="设置鼠标滚轮修改字体大小"><br><img src="https://i.loli.net/2020/02/20/4Wzg69DsFQh3ykw.png" alt="设置鼠标滚轮修改字体大小"></p><p>3.自动导包<br><img src="https://i.loli.net/2020/02/20/fGTbkSOanFwh68j.png" alt="自动导包"></p><p>4.显示行号和方法间的分隔符<br><img src="https://i.loli.net/2020/02/20/h2auS436VxlE8eU.png" alt="显示行号和方法间的分隔符"></p><p>5.忽略大小写提示<br><img src="https://i.loli.net/2020/02/20/mWoDrsSKNY7aV2B.png" alt="gg.png"></p><p>6.取消单行tabs的操作<br><img src="https://i.loli.net/2020/02/20/l86NvYciAmdXPsh.png" alt="取消单行tabs的操作"></p><p>7.修改默认的字体<br><img src="https://i.loli.net/2020/02/20/zP8uI3cOroepxEX.png" alt="默认的字体"></p><p>8.修改当前主题的字体<br><img src="https://i.loli.net/2020/02/20/FnqkoGH1u8Xs93f.png" alt="当前主题的字体"></p><p>9.代码注释的字体颜色<br><img src="https://i.loli.net/2020/02/20/aRBGhj71JmZTkYn.png" alt="注释的字体颜色"></p><p>10.类的文档注释<br><img src="https://i.loli.net/2020/02/20/oWJE9RjYgs2DAmF.png" alt="i文档注释"></p><p>11.设置版权<br><img src="https://i.loli.net/2020/02/20/xdJ8GlYFzstaOob.png" alt="设置版权"><br><img src="https://i.loli.net/2020/02/20/TpM5UircDZSfGCd.png" alt="o设置版权"></p><p>版权所有(C)，康康小课堂，所有权利保留。<br>项目名： $module.name<br>文件名： $file.fileName<br>模块说明：<br>修改历史:<br>$today.format(“yyyy-MM-dd”) -kang - 创建。</p><p>12.项目文件编码<br><img src="https://i.loli.net/2020/02/20/DKntGB4RmMf9QvW.png" alt="项目文件编码"></p><p>13.当前源文件的编码<br><img src="https://i.loli.net/2020/02/20/FSZsKAr5fJNUMvI.png" alt="当前源文件的编码"></p><p>14.自动编译<br><img src="https://i.loli.net/2020/02/20/KZPhv36SqXDmjJ8.png" alt="自动编译"></p><p>15.代码水平或垂直显示<br><img src="https://i.loli.net/2020/02/20/LkT8MwlJcSgEvGQ.png" alt="代码显示"><br><img src="https://i.loli.net/2020/02/20/5xrGqsuLj7Tz2KE.png" alt="代码显示"></p><p>16.设置快捷键<br><img src="https://i.loli.net/2020/02/20/TXarcR1PhYpDgdw.png" alt="设置快捷键"></p><p>17.修改快捷键</p><p><img src="https://s2.ax1x.com/2020/02/20/3Zjfvn.png" alt="修改快捷键"></p><p>18.导入已有快捷键<br><img src="https://s2.ax1x.com/2020/02/20/3ZjIbV.png" alt="已有快捷键"></p><p>19.代码模板<br><img src="https://s2.ax1x.com/2020/02/20/3Zj7UU.png" alt="代码模板"><br><img src="https://s2.ax1x.com/2020/02/20/3Zj4uq.png" alt="代码模板"></p><h4 id="5-常用插件（待补充）"><a href="#5-常用插件（待补充）" class="headerlink" title="5.常用插件（待补充）"></a>5.常用插件（待补充）</h4><ul><li>Alibaba Java Coding Guideline</li><li>Easy Code</li><li>FindBugs-idea</li><li>FreeMarker support</li><li>MyBatis Log Plugin</li><li>Rainbow Brackets</li><li>Translation</li><li>VisualVMLauncher</li><li>Lombok</li><li>Free Mybatis plugin</li><li>leetcode editor</li><li>Maven helper</li><li>Spring Boot</li></ul><h4 id="6-Eclipse常用快捷键"><a href="#6-Eclipse常用快捷键" class="headerlink" title="6.Eclipse常用快捷键"></a>6.Eclipse常用快捷键</h4><ul><li>执行 (run) alt+r</li><li>提示补全alt+/</li><li>单行注释 ctrl + /</li><li>多行注释 ctrl + shift + /</li><li>向下复制一行 (Duplicate Lines) ctrl+alt+down</li><li>删除一行或选中行 (delete line) ctrl+d</li><li>向下移动行 (move statement down) alt+down</li><li>向上移动行 (move statement up) alt+up</li><li>向下开始新的一行 (start new line) shift+enter</li><li>向上开始新的一行 (Start New Line before current) ctrl+shift+enter</li><li>如何查看源码 (class)</li><li>ctrl + 选中指定的结构或ctrl + shift + t</li><li>查看继承关系 (type hierarchy) F4</li><li>格式化代码 (reformat code) ctrl+shift+F</li><li>提示方法参数类型 (Parameter Info) ctrl+alt+/</li><li>复制代码 ctrl + c</li><li>撤销 ctrl + z</li><li>反撤销 ctrl + y</li><li>剪切 ctrl + x</li><li>粘贴 ctrl + v</li><li>保存 ctrl + s</li><li>全选 ctrl + a</li><li>查看类的结构：类似于 eclipse 的 outline ctrl+o</li><li>生成构造器/get/set/toString alt +shift + s</li><li>收起所有的方法(collapse all) alt + shift + c</li><li>打开所有方法(expand all) alt+shift+x</li><li>生成 try-catch 等(surround with) alt+shift+z</li><li>局部变量抽取为成员变量(introduce field) alt+shift+f</li><li>查找/替换(当前) ctrl+f</li><li>查找(全局) ctrl+h</li><li>查找文件 double Shift</li><li>查看类的继承结构图(Show UML Diagram) ctrl + shift + u</li><li>查看方法的多层重写结构(method hierarchy) ctrl+alt+h</li><li>抽取方法(Extract Method) alt+shift+m</li><li>打开最近修改的文件(Recently Files) ctrl+E</li><li>关闭当前打开的代码栏(close) ctrl + w</li><li>关闭打开的所有代码栏(close all) ctrl + shift + w</li><li>快速搜索类中的错误(next highlighted error) ctrl + shift + q</li></ul><h4 id="7-热部署"><a href="#7-热部署" class="headerlink" title="7.热部署"></a>7.热部署</h4><p>1、开启IDEA的自动编译（静态）<br>具体步骤：打开顶部工具栏 File -&gt; Settings -&gt; Default Settings -&gt; Build -&gt; Compiler 然后勾选 Build project automatically 。</p><p>2、开启IDEA的自动编译（动态）<br>具体步骤：同时按住 Ctrl + Shift + Alt + / 然后进入Registry ，勾选自动编译并调整延时参数。<br>compiler.automake.allow.when.app.running -&gt; 勾选<br>compile.document.save.trigger.delay -&gt; 100<br>compile.automake.trigger.delay  -&gt; 100</p><p>3、开启IDEA的热部署策略（非常重要）<br>具体步骤：顶部菜单- &gt;Edit Configurations-&gt;SpringBoot插件-&gt;目标项目-&gt;勾选热更新。</p><p>4、关闭浏览器缓存（重要）<br>打开谷歌浏览器，打开F12的Network选项栏，然后勾选【✅】Disable cache 。</p><p>5、去除热部署插件<br>若项目为老项目依赖比较臃肿，则推荐去除热部署依赖，改用每次修改后手动更新– ctrl + shift + f9</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞一波Solr</title>
      <link href="/2019/08/15/gao-yi-bo-solr/"/>
      <url>/2019/08/15/gao-yi-bo-solr/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Solr是什么？"><a href="#一、Solr是什么？" class="headerlink" title="一、Solr是什么？"></a>一、Solr是什么？</h2><table><thead><tr><th>序号</th><th>简介</th></tr></thead><tbody><tr><td>1</td><td>Solr它是一种开放源码的、基于 Lucene Java 的搜索服务器，易于加入到 Web 应用程序中</td></tr><tr><td>2</td><td>安装和配置简易，而且附带了一个基于 HTTP 的管理界面。已经在众多大型的网站中使用，较为成熟和稳定</td></tr><tr><td>3</td><td>Solr 包装并扩展了 Lucene，所以Solr的基本上沿用了Lucene的相关术语。更重要的是，Solr 创建的索引与 Lucene 搜索引擎库完全兼容</td></tr><tr><td>4</td><td>通过对Solr 进行适当的配置，某些情况下可能需要进行编码，Solr 可以阅读和使用构建到其他 Lucene 应用程序中的索引</td></tr></tbody></table><h2 id="二、Solr优点"><a href="#二、Solr优点" class="headerlink" title="二、Solr优点"></a>二、Solr优点</h2><p>①高级的全文搜索功能；</p><p>②专为高通量的网络流量进行的优化；</p><p>③基于开放接口（XML和HTTP）的标准；</p><p>④综合的HTML管理界面；</p><p>⑤可伸缩性－能够有效地复制到另外一个Solr搜索服务器；</p><p>⑥使用XML配置达到灵活性和适配性；</p><p>⑦可扩展的插件体系。</p><h2 id="三、Solr安装"><a href="#三、Solr安装" class="headerlink" title="三、Solr安装"></a>三、Solr安装</h2><p>依赖环境centOS7 及solr-7.7.2.tgz</p><p>1.先在/usr/local下新建solr目录  </p><pre><code>cd /usr/localmkdir solr</code></pre><p>2.在/usr/local/solr文件夹里新建一个tomcat目录   </p><pre><code>mkdir /usr/local/solr/tomcat</code></pre><p>3.下载tomcat并解压tomcat</p><pre><code>cd /usr.local/solr/tomcatwget https://www-eu.apache.org/dist/tomcat/tomcat-7/v7.0.96/bin/apache-tomcat-7.0.96.tar.gztar -zxvf apache-tomcat-7.0.96.tar.gzmv apache-tomcat-7.0.96 tomcat</code></pre><p>4..把solr的压缩包上传到服务器后并解压，把solr-7.7.2/dist/solr-7.7.2.war包部署到tomcat下的webapps目录下。并改名为solr.war</p><pre><code>cd /usr/local/solrwget https://www-eu.apache.org/dist/lucene/solr/7.7.2/solr-7.7.2.tgz cp /usr/local/solr-7.7.2/dist/solr-7.7.2.war /usr/local/solr/tomcat/webapps/solr.war</code></pre><p>5.解压war包。启动tomcat自动解压。然后关闭tomcat，删除war包</p><pre><code>cd /usr/local/solr/tomcat./bin/startup.sh./bin/shutdown.shrm -rf /usr/local/solr/tomcat/webapps/solr.war</code></pre><p>6.把solr-7.1.0/example/lib/ext 目录下所有的jar包复制到solr工程中</p><pre><code>cd /usr/local/solr-7.7.2/example/lib/ext cp * /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/</code></pre><p>7.创建solrhome文件夹，该文件夹用来存放solr服务器所有配置文件。将/root/solr-4.10.3/example中的solr文件夹拷贝至solrhome</p><pre><code>mkdir -p /usr/local/solr/solrhomecp -r /usr/local/solr-7.7.2/example/solr /usr/local/solr/solrhome</code></pre><p>8.在solr工程中的web.xml文件中solrhome的位置添加下面代码</p><pre><code>&lt;env-entry&gt;    &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;    &lt;env-entry-value&gt;/usr/local/solr/solrhome&lt;/env-entry-value&gt;    &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;&lt;/env-entry&gt;注：默认此段被注释了需要解开注释，env-entry-value为solrhome路径</code></pre><p>9.在solrhome目录下建立文件solr.xml，内容：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;solr&gt; &lt;/solr&gt;</code></pre><p>10.启动tomcat并访问—-http:192.168.25.154:8080/solr/</p><h2 id="四、Solr配置（IK中文分析器设置）"><a href="#四、Solr配置（IK中文分析器设置）" class="headerlink" title="四、Solr配置（IK中文分析器设置）"></a>四、Solr配置（IK中文分析器设置）</h2><p>1、把IKAnalyzer2012FF_u1.jar添加到solr工程的lib目录下（IKAnalyzer2012FF_u1.jar自行下载）</p><pre><code>cp IKAnalyzer2012FF_u1.jar /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/</code></pre><p>2、新建classes文件夹并把扩展词典、配置文件放到solr工程的WEB-INF/classes目录下。</p><pre><code>mkdir -p /usr/local/solr/tomcat/webapps/solr/WEB-INF/classescp IKAnalyzer.cfg.xml ext_stopword.dic mydict.dic /usr/local/solr/tomcat/webapps/solr/WEB-INF/classes注：IKAnalyzer.cfg.xml，ext_stopword.dic，mydict.dic文件一搜一堆</code></pre><p>3.在solrhome/collection1/conf/schema.xml中配置filedType</p><pre><code>vim /usr/local/solr/solrhome/collection1/conf/schema.xml&lt;!--添加如下内容--&gt;&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;      &lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;&lt;/fieldType&gt;&lt;field name=&quot;item_title&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;&lt;field name=&quot;item_price&quot;  type=&quot;long&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;&lt;field name=&quot;item_category_name&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;&lt;field name=&quot;item_keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; multiValued=&quot;true&quot;/&gt;&lt;copyField source=&quot;item_title&quot; dest=&quot;item_keywords&quot;/&gt;&lt;copyField source=&quot;item_category_name&quot; dest=&quot;item_keywords&quot;/&gt;</code></pre><p>4.重启tomcat完成安装配置</p>]]></content>
      
      
      <categories>
          
          <category> solr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成WebLogic</title>
      <link href="/2019/08/12/ji-cheng-weblogic/"/>
      <url>/2019/08/12/ji-cheng-weblogic/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装WebLogic"><a href="#一、安装WebLogic" class="headerlink" title="一、安装WebLogic"></a>一、安装WebLogic</h2><h3 id="1、下载windows下的安装包"><a href="#1、下载windows下的安装包" class="headerlink" title="1、下载windows下的安装包"></a>1、下载windows下的安装包</h3><p>1、下载地址：<a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html" target="_blank" rel="noopener">点我跳转下载页面</a><br><em>注：后续操作需要安装好JDK,并且正确的配置环境变量</em></p><p><img src="https://img-blog.csdn.net/20180416220200639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODY4MzQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="下载如图"></p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>1、下载后放到E:\software\weblogic文件夹下（自定义路径）且可以看fmw_12.1.3.0.0_wls.jar已经下载下来</p><p>2、以管理员身份打开CMD窗口–输入 java -jar E:\software\weblogic\fmw_12.1.3.0.0_wls.jar 开始安装<br> a. 欢迎页面选择下一步</p><p> b. 安装路径自定义</p><p> c. 安装类型选择WebLogic Server(W)下一步</p><p> d. 先决条件直接下一步</p><p> e. 安全更新直接先一步</p><p> f. 安装概要直接安装</p><p> g. 最后点击完成即可。<br> h. 此时CMD显示  <img src="https://img-blog.csdn.net/20180416221706574?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODY4MzQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="CMD显示">  表示安装成功</p><h2 id="二、部署WebLogic"><a href="#二、部署WebLogic" class="headerlink" title="二、部署WebLogic"></a>二、部署WebLogic</h2><p>1、打开<br><img src="https://img-blog.csdn.net/20180416222614475?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODY4MzQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="打开"><br>2、选择创建新域（D）以及选择新域的创建位置然后下一步</p><p>3、选择 使用产品模板创建域（P） 然后下一步</p><p>4、输入以后要用到的名称及口令（记住）</p><p>5、域模式及JDK分别选择 开发(D) 自己的JDK 选择下一步</p><p>6、高级配置全选<br><img src="https://img-blog.csdn.net/20180416223214557?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODY4MzQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="选择"></p><p>7、管理服务器默认即可 下一步</p><p>8、节点管理器<br><img src="https://img-blog.csdn.net/20180416223401426?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2ODY4MzQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="输入"></p><p>9、后面步骤全部默认直接下一步，完成安装</p><h2 id="三、使用Weblogic"><a href="#三、使用Weblogic" class="headerlink" title="三、使用Weblogic"></a>三、使用Weblogic</h2><p>1、进入WebLoogic安装目录（我的：“C:\software\weblogic\weblogic\user_projects\domains\base_domain”）双击“startWebLogic.cmd”，启动weblogic<br><img src="https://images2018.cnblogs.com/blog/894761/201806/894761-20180628165545694-1422484897.png" alt="如图"></p><p>2、输入用户名和密码</p><p>3、打开浏览器输入控制台url，进入控制台进行管理 <a href="http://127.0.0.1:7001/console/" target="_blank" rel="noopener">http://127.0.0.1:7001/console/</a>  输入用户名和密码进行登录</p><p>4、使用WebLogin</p><p> 1、点击锁定并编辑 </p><p> 2、选择部署，然后点击右边的安装 </p><p> 3、点击上传文件–进入文件上传界面，选择要上传的war包  </p><p> 4、选择要上传的war包 </p><p> 5、选择路径，下一步 </p><p> 6、选择将此部署安装为应用程序 </p><p> 7、完成即可</p><p> 8、选择激活更改后，状态变更为准备就绪，启动该服务 </p><p> 9、访问url，获取webshell</p><h2 id="四、Eclipse集成WebLogic"><a href="#四、Eclipse集成WebLogic" class="headerlink" title="四、Eclipse集成WebLogic"></a>四、Eclipse集成WebLogic</h2><p>1、启 动 Eclipse，选择“Window -&gt; Preferences”菜单，打开首选项对话框。</p><p>2、展开 Eclipse 下的 Server 节点，点击 Runtime Environments，</p><p>3、选中右边的 add 单选按钮，在弹出框中找到Oracle节点并打开，</p><p>4、选择 Oracle WebLogic Server Tools 点击下一步</p><p>5、 点击选中的server，会自动下载。下载完成后会提示重启eclipse。重启之后就能在server列表中找到weblogic</p><p>6、选择Oracle Weblogic Server 10gR3，然后Next，选择Weblogic的工作域，配置好了点击finish即可</p><h2 id="五、Idea集成WebLogic"><a href="#五、Idea集成WebLogic" class="headerlink" title="五、Idea集成WebLogic"></a>五、Idea集成WebLogic</h2><p>1.首先打开IDEA,点击Run-Edit Configurations…</p><p>2.点击左上角“+”号，选 WeblogicServer 选择 local</p><p>3.配置如下： <img src="https://img-blog.csdn.net/20180717112019749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RsMjg3MTc2MTU3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="配置"></p><p>4、配置完成可启动测试</p><p><em>注：如有雷同纯属无意，烦请告知即刻修改！！！</em></p>]]></content>
      
      
      <categories>
          
          <category> 生技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回首Nginx</title>
      <link href="/2019/08/10/hui-shou-nginx/"/>
      <url>/2019/08/10/hui-shou-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-他来了"><a href="#Nginx-他来了" class="headerlink" title="Nginx, 他来了"></a><strong>Nginx</strong>, <em>他来了</em></h2><p>一、Nginx是什么？<br><em>由 C 语言开发的高性能的web服务器及方向代理服务器及电子邮件（IMAP/POP3），是由俄罗斯的程序设计师开发，官方测试nginx能够支撑5万左右并发链接，并且cpu、内存等资源消耗非常低，运行非常稳定。</em></p><h3 id="二、Nginx靠什么吃饭（后续深讲）？"><a href="#二、Nginx靠什么吃饭（后续深讲）？" class="headerlink" title="二、Nginx靠什么吃饭（后续深讲）？"></a>二、Nginx靠什么吃饭（后续深讲）？</h3><p>1、正反向代理</p><p>2、负载均衡</p><p>3、HTTP服务器（动静分离）</p><p>4、虚拟主机（实现在一台服务器虚拟出多个网站）</p><h3 id="三、如何安装？"><a href="#三、如何安装？" class="headerlink" title="三、如何安装？"></a>三、如何安装？</h3><h4 id="1、配置先决条件"><a href="#1、配置先决条件" class="headerlink" title="1、配置先决条件"></a>1、配置先决条件</h4><ul><li><p>安装编译工具及库文件</p><pre class=" language-nsis"><code class="language-nsis"> yum <span class="token operator">-</span>y install make zlib zlib<span class="token operator">-</span>devel gcc<span class="token operator">-</span>c<span class="token operator">++</span> libtool  openssl openssl<span class="token operator">-</span>devel</code></pre></li><li><p>安装 PCRE</p></li></ul><pre class=" language-jboss-cli"><code class="language-jboss-cli">     cd /usr/local/src/     wget https://sourceforge.net/projects/pcre/files/pcre/8.39/pcre-8.39.tar.gz/download     tar -zxvf pcre-8.39.tar.gz     cd pcre-8.39     ./configure     make && make install     pcre-config --version</code></pre><h4 id="2、安装Nginx"><a href="#2、安装Nginx" class="headerlink" title="2、安装Nginx"></a>2、安装Nginx</h4><pre class=" language-jboss-cli"><code class="language-jboss-cli">    cd /usr/local/src    wget http://nginx.org/download/nginx-1.7.0.tar.gz    cd nginx-1.7.0    ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.39    make && make install    /usr/local/webserver/nginx/sbin/nginx -v</code></pre><h4 id="3、至此Nginx安装完毕"><a href="#3、至此Nginx安装完毕" class="headerlink" title="3、至此Nginx安装完毕"></a>3、至此Nginx安装完毕</h4><h2 id="三、Nginx-配置"><a href="#三、Nginx-配置" class="headerlink" title="三、Nginx 配置"></a>三、Nginx 配置</h2><p>1、创建使用nginx的用户，也可以用已有用户</p><pre class=" language-groovy"><code class="language-groovy">    <span class="token string">/usr/</span>sbin<span class="token operator">/</span>groupadd www     <span class="token string">/usr/</span>sbin<span class="token operator">/</span>useradd <span class="token operator">-</span>g www www</code></pre><p>2、修改配置文件</p><pre><code>vim /usr/local/webserver/nginx/conf/nginx.conf</code></pre><blockquote><p><em>修改如下：</em><br>user www www;<br>worker_processes 2;  #设置值和CPU核心数一致<br>listen 8080; #监听端口，默认80<br> server_name localhost; #域名<br> root /usr/local/webserver/nginx/html;  #项目文件存放目录</p></blockquote><p>检测是否修改成功：</p><pre class=" language-groovy"><code class="language-groovy"><span class="token string">/usr/</span>local<span class="token string">/webserver/</span>nginx<span class="token string">/sbin/</span>nginx <span class="token operator">-</span>t</code></pre><h2 id="四、Nginx命令集"><a href="#四、Nginx命令集" class="headerlink" title="四、Nginx命令集"></a>四、Nginx命令集</h2><pre><code>/usr/local/webserver/nginx/sbin/nginx        # 启动 Nginx/usr/local/webserver/nginx/sbin/nginx -s reload          # 重新载入配置文件/usr/local/webserver/nginx/sbin/nginx -s reopen          # 重启 Nginx/usr/local/webserver/nginx/sbin/nginx -s stop           # 停止 Nginx</code></pre><p>额外赠送：配置Nginx开机自启动</p><pre class=" language-groovy"><code class="language-groovy">    vim <span class="token string">/etc/</span>rc<span class="token operator">.</span>d<span class="token operator">/</span>rc<span class="token operator">.</span>local   #编辑文件    <span class="token string">/usr/</span>local<span class="token string">/nginx/</span>sbin<span class="token operator">/</span>nginx      #添加配置</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识PageHelper</title>
      <link href="/2019/08/08/chu-shi-pagehelper/"/>
      <url>/2019/08/08/chu-shi-pagehelper/</url>
      
        <content type="html"><![CDATA[<h1 id="初识PageHelper"><a href="#初识PageHelper" class="headerlink" title="初识PageHelper"></a>初识PageHelper</h1><p><i class="far fa-hand-point-right" style="color: #3F51B5"></i>  PageHelper是一款强大的开源免费的Mybatis第三方分页插件，其工作原理是利用mybatis拦截器，在查询数据库的时候拦截下sql，并修改sql使其实现分页效果。</p><h2 id="一、配置PageHelper"><a href="#一、配置PageHelper" class="headerlink" title="一、配置PageHelper"></a>一、配置PageHelper</h2><p>1、引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--pagehelper--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- pagehelper的依赖包:jsqlparser --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.jsqlparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsqlparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、配置插件（二选一）<br>在mybatis-config.xml中使用</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span> <span class="token attr-name">--</span>     <span class="token attr-name">在配置文件中，</span> <span class="token attr-name">插件位置必须满足以下顺序的要求：</span>    <span class="token attr-name">typeAliases？，typeHandlers？，objectFactory</span> <span class="token attr-name">?,</span> <span class="token attr-name">objectWrapperFactory</span> <span class="token attr-name">?,</span>  <span class="token attr-name">plugins</span> <span class="token attr-name">?,</span> <span class="token attr-name">environment?,</span> <span class="token attr-name">databaseIdProvider？，mappers？</span><span class="token attr-name">--</span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageHelper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置参数-- >         &lt;!-- 数据库方言 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialect<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MySQL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置为true时，使用RowBounds分页会进行count查询 会去查询出总数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rowBoundsWithCount<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    。。。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>参数n<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>在Spring application.xml中使用</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- pageHelper 分页插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageHelper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>          dialect=mysql         rowBoundsWithCount=true        。。。        参数n =值n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>3、至此配置就完成了，一起来看看怎样使用吧！！！</p><h2 id="二、使用PageHelper"><a href="#二、使用PageHelper" class="headerlink" title="二、使用PageHelper"></a>二、使用PageHelper</h2><p>service层代码如下</p><pre class=" language-zephir"><code class="language-zephir">public PageInfo findPage(int page,int pageSize){  PageHelper.startPage(page,pageSize);  List<User> List=userDao.findAll();  PageInfo pageInfo = new PageInfo(list);  return pageInfo; }</code></pre><blockquote><p>注：此时返回的对象就是pageInfo对象，里面包含很多属性一起来看下吧</p></blockquote><pre class=" language-zephir"><code class="language-zephir">public class PageInfo<T> implements Serializable {    private static final long serialVersionUID = 1L;    //当前页码    private int pageNum;    //每页的数量    private int pageSize;    //当前页的数量    private int size;    //当前页面第一个元素在数据库中的行号    private int startRow;    //当前页面最后一个元素在数据库中的行号    private int endRow;    //总记录数    private long total;    //总页数    private int pages;    //结果集    private List<T> list;    //前一页    private int prePage;    //下一页    private int nextPage;    //是否为第一页    private boolean isFirstPage = false;    //是否为最后一页    private boolean isLastPage = false;    //是否有前一页    private boolean hasPreviousPage = false;    //是否有下一页    private boolean hasNextPage = false;    //导航页码数    private int navigatePages;    //所有导航页号    private int[] navigatepageNums;    //导航条上的第一页    private int navigateFirstPage;    //导航条上的最后一页    private int navigateLastPage;}</code></pre><p><em>结束语：看完此片文章你就可以操练起来了哟</em></p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring左膀之AOP</title>
      <link href="/2019/08/06/spring-zuo-bang-zhi-aop/"/>
      <url>/2019/08/06/spring-zuo-bang-zhi-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring之AOP剖析"><a href="#Spring之AOP剖析" class="headerlink" title="Spring之AOP剖析"></a>Spring之AOP剖析</h1><h2 id="一、Aop是何方神圣"><a href="#一、Aop是何方神圣" class="headerlink" title="一、Aop是何方神圣"></a>一、Aop是何方神圣</h2><p>AOP：Aspect Oriented Programming，即”面向切面编程“。面向切面编程是一种编程范式，是OOP面向对象编程的一种补充，用于处理系统中分布于各个模块的横切关注点，如事务管理、缓存控制、日志打印等。AOP采取横向抽取机制，取代了传统纵向继承体系的重复性代码</p><h2 id="二、必备知识库"><a href="#二、必备知识库" class="headerlink" title="二、必备知识库"></a>二、必备知识库</h2><h3 id="1、AOP专有名词讲解"><a href="#1、AOP专有名词讲解" class="headerlink" title="1、AOP专有名词讲解"></a>1、AOP专有名词讲解</h3><p>（1）通知（增强）Advice</p><p>　　拦截到Joinpoint之后所要做的事情就是通知，通知分为前置通知、后置通知、异常通知、最终通知和环绕通知</p><p>（2）连接点 Join point</p><p>　　类里面可以被增强的方法</p><p>（3）切入点 Pointcut</p><p>　　切入点是与连接点匹配的表达式，用于确定是否需要执行通知</p><p>（4）切面 Aspect</p><p>　　Pointcut（切入点）和Advice（增强/通知）的结合</p><p>（5）引入 Introduction</p><p>　　引入允许我们向现有的类添加新方法或属性，从而无需修改这些现有类的情况下，让他们具有新的行为和状态。</p><p>（6）织入 Weaving</p><p>　　即把目标对象在指定的连接点织入到切面中</p><h3 id="2、代理讲解"><a href="#2、代理讲解" class="headerlink" title="2、代理讲解"></a>2、代理讲解</h3><pre><code>  先创建Aspect类</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kang.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.kang.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>　</code></pre><p>  （1）JDK动态代理 – java.lang.reflect.InvocationHandler</p><p>  实现方法：</p><pre class=" language-oxygene"><code class="language-oxygene">public Object invoke(Object proxy, Method method, Object[] args)        throws Throwable;</code></pre><p> 注： 该动态代理是基于接口的动态代理，所以使用时必须有接口被定义</p><p>   （2）CGLIB代理实现 – org.springframework.cglib.proxy.Callback、 org.springframework.cglib.proxy.MethodInterceptor</p><h3 id="3、实现方法："><a href="#3、实现方法：" class="headerlink" title="3、实现方法："></a>3、实现方法：</h3><pre class=" language-monkey"><code class="language-monkey"><span class="token keyword">public</span> <span class="token keyword">interface</span> MethodInterceptor <span class="token keyword">extends</span> Callback {    <span class="token keyword">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">Method</span> m<span class="token punctuation">,</span> <span class="token keyword">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy mp<span class="token punctuation">)</span> throws Throwable}</code></pre><p>注：实现后可用mp.invoke(Object obj, Object[] args)调用同类对象的方法或用mp.invokeSuper(Object obj, Object[] args)调用父类方法。</p><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><h3 id="1、JDK动态代理实现"><a href="#1、JDK动态代理实现" class="headerlink" title="1、JDK动态代理实现"></a>1、JDK动态代理实现</h3><p>创建接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTextImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyText</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my proxy test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Object delegate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">bind</span><span class="token punctuation">(</span>Object delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyFirst Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MySecond Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyProxy myProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyText text <span class="token operator">=</span> <span class="token punctuation">(</span>MyProxy<span class="token punctuation">)</span> myProxy<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、CGLIB代理实现"><a href="#2、CGLIB代理实现" class="headerlink" title="2、CGLIB代理实现"></a>2、CGLIB代理实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object delegate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>  MethodProxy mp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MyFirst Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MySecond Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MyText <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>MyText<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>MyText<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通知 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advices<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kang.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- aop配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--切面 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advices<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 切点 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.kang.dao.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--连接通知方法与切点 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><p>看了辣么多是不是很累呐，到此就随大脑去吧，放轻松不脱发。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人时空计划</title>
      <link href="/2019/08/05/shi-kong-ji-hua/"/>
      <url>/2019/08/05/shi-kong-ji-hua/</url>
      
        <content type="html"><![CDATA[<p>密码：102810</p><p>注：本文密码采用SHA256加密</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 展望未来 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫骄莫躁</title>
      <link href="/2019/08/05/mo-jiao-mo-zao/"/>
      <url>/2019/08/05/mo-jiao-mo-zao/</url>
      
        <content type="html"><![CDATA[<h2 id="不动声色的多为厉害角"><a href="#不动声色的多为厉害角" class="headerlink" title="不动声色的多为厉害角"></a>不动声色的多为厉害角</h2><blockquote><p>我们身边总是不乏这样一类人，他们表面如湖水般宁静致远，内心却似大海般波澜壮阔。“看破不说破”体现着他们的教养，“不鸣则已一鸣惊人”是他们的代名词。</p></blockquote><p>　　他们不动声色地厉害着，自然而不矫饰，低调而不张扬。他们懂得在这个浮躁的世界里，找到一种最舒适的姿势来安放自己，找到一种最好的方式与自己相处，从不为难自己。</p><p>　　大学时的室友乐乐就是这样一个聪明的姑娘。她每天早上雷打不动地六点起床，快速收拾好就出门，该学习的时候手机就放在一边，心无旁骛地学习；不想学习的时候就约上三五好友痛痛快快地玩耍。</p><p>　　她不攀比、不计较、不杞人忧天，乐观开朗，积极向上。更可贵的一点是，她懂得与自己和解，所有的负面情绪都像是一张用过就丢弃的纸巾，绝不会被她紧紧攥在手里。</p><p>　　乐乐说：“我很喜欢这种与自己相处的模式，不仅要喜欢现在的自己，更要努力成为自己想成为的人。”</p><p>　　在别人眼里无法忍受的孤独，在他们眼里却甘之如饴。其实这并不是孤独，他们只是懂得与自己相处。</p><p>　　我一直都非常向往这种社交模式，在外有三五个能够把酒言欢、畅聊心事的朋友；于内在没有人打扰的自我空间里，能够放下所有欲望与杂念，客观地、冷静地、理智地思考问题，享受短暂的孤独。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565003280525&di=24a2ffdb72c367d4d769c07d1c9f4a72&imgtype=0&src=http%3A%2F%2Fother.zaojv.com%2Fsimage%2F865%2F3093865.jpg" alt="少欲心自静"><br>　　有人曾说，我们不快乐的原因之一，是不知道如何安静地待在房里，心平气和地与自己相处。</p><p>　　我们应该找到一种与自己相处的模式，认识自己，接纳自己，完善自己，努力把生活、把自己变成理想中的模样。</p><p>　　蝉鸣一夏，却蛰伏了好几个四季；昙花一现，却等待了整个白昼。所有的收获都是默默耕耘的成果。</p><p>　　真正厉害的人，都懂得厚积薄发的道理，在别人看不见的角落默默努力着，在漫长得看不到希望的等待中酝酿着。他们深谙这个道理，只有当自己具备了足够的实力，才能将大放异彩的机会牢牢抓住。</p><p>　　你也许会疑惑，跟你一起进公司的人怎么会有参加年底评优的资格，但你不知道的是，别人在你看不见的黑夜里努力地学习、工作。</p><p>　　你也许无法理解那个拿到了研究生录取通知书的同学为什么会激动得涕泪横流，你不知道这是别人多少个晚上挑灯夜战的成果。</p><p>　　成功从来都不是唾手可得的，要想静待花开，前提是你得默默耕耘。</p><p>　　 成功的花儿，人们只惊羡它现时的美丽，它破土而出、努力生长的每分每秒却常常无人知晓。</p><p>　　你无法乞求别人把你的付出尽收眼底，你能做的只是默默地将自己的苦累化成一片又一片羽毛，终有一天它能带你腾飞，冲上云霄。</p><p>　　曾听过这样一句话，心无旁骛，专心于事业的追求，就会忘掉很多烦恼，找到许多努力过程中的快乐。默默耕耘的人其实是最智慧的人。</p><p>　　不断地努力，找到自己的价值，于世界而言也许微不足道，于自己却举足轻重。</p><p>　　在自己还不具备足够的实力之前，少说话多做事，只有不断精进自己的能力才能称得上是真正的强者。</p><p>　　当具备足够实力之后，还能保持谦卑、低调不张扬，默默于人群中继续进步，这才是高手应该有的样子。</p><p>　　机会到来时，不妨张扬一点，尽情展示实力，低调与张扬有机结合，人生之路才会走得更加稳妥。</p><p>　　愿你在历经一次又一次孤独的旅程之后，能够不畏惧生活的洗礼，坦然面对来自生活的风雨；能够在遇见伯乐时，有足够的实力和底气抓住机遇。</p><p>　　太多的人，把努力当成了一种“人设”，想做一件事情，还没动工，就敲锣打鼓；想达成一个目标，八字还没一撇，就高谈阔论。好像他们的努力，不是为了追求结果，而是为了把努力的形式公布于众，像完成某种仪式。</p><p>　　如果喊着要努力的人，都可以扎扎实实下功夫，可能这世上的遗憾也会少很多。</p><p>　　很多时候，我们与牛人的差距，就是差那么一点脚踏实地的真努力。</p><p>　　真正的努力，是“富贵本无根，尽从勤里得”的踏实；是“读书破万卷，下笔如有神”的勤奋；是“欲穷千里目，更上一层楼”的精进。</p><p>　　真正的努力，都不喧嚣。只需要卷起袖子，行动起来。</p><p>  注：<a href="https://www.lz13.cn/lizhiwenzhang/184164.html" target="_blank" rel="noopener">原文链接</a> <i class="fas fa-coffee" style="color: #673AB7"></i></p><h2 id="自我小测试"><a href="#自我小测试" class="headerlink" title="自我小测试"></a>自我小测试</h2><table><thead><tr><th>阶段</th><th>时间（岁）</th><th>欲望</th></tr></thead><tbody><tr><td>1</td><td>10-15</td><td></td></tr><tr><td>2</td><td>16-20</td><td></td></tr><tr><td>3</td><td>21-25</td><td></td></tr><tr><td>4</td><td>26-30</td><td></td></tr><tr><td>5</td><td>31-35</td><td></td></tr><tr><td>6</td><td>&gt;36</td><td></td></tr></tbody></table><blockquote><p>在不同的年龄你又怎么样的欲望转换呐？是无欲无求、是羡慕嫉妒恨、还是希望周围的人圆圆满满呐。我相信在不同的年龄你会有不一样的答案吧！那咱们评论区见<i class="fas fa-feather-alt" style="color: #673AB7"></i></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活美文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术流docker</title>
      <link href="/2019/08/04/ji-zhu-liu-docker/"/>
      <url>/2019/08/04/ji-zhu-liu-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Docker是何方神圣？"><a href="#一、Docker是何方神圣？" class="headerlink" title="一、Docker是何方神圣？"></a>一、Docker是何方神圣？</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>百科说：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><h2 id="2、易混概念"><a href="#2、易混概念" class="headerlink" title="2、易混概念"></a>2、易混概念</h2><ul><li>仓库（Repository）—即用于存放镜像文件的仓库</li><li>镜像（Image）—即构建容器的源代码，是由多层文件系统组成的一个只读的模板，类似于java中的类</li><li>容器(Container）—Docker镜像创建的运行实例，类似于java中的对象</li></ul><h2 id="3、局限性"><a href="#3、局限性" class="headerlink" title="3、局限性"></a>3、局限性</h2><ul><li>Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li><li>Docker对disk的管理比较有限</li><li>container随着用户进程的停止而销毁，container中的log等用户数据不便收集</li></ul><h1 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h1><ul><li>要求：linux内核必须在3.8以上  </li><li>查看内核： <code>uname  -r 或 uname  -a</code></li><li>安装依赖包： <code>yum -y install yum-utils device-mapper-persistent-data lvm2</code></li><li>加软件源: <code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li><li>更新缓存: <code>yum makecache fast</code></li><li>查看仓库中docker版本:  <code>yum list docker-ce</code></li><li>安装Docker:  <code>yum install docker-ce-版本号</code></li><li>查看是否安装成功: <code>yum list installed | grep docker</code></li><li>启动Docker: <code>systemctl start docker</code></li></ul><h1 id="三、常用命令大杂烩"><a href="#三、常用命令大杂烩" class="headerlink" title="三、常用命令大杂烩"></a>三、常用命令大杂烩</h1><blockquote><ol><li>systemctl start docker – 启动docker服务</li><li>systemctl stop docker – 关闭docker服务</li><li>systemctl restart docker – 重启docker服务</li><li>systemctl enable docker – 开机后自动启动docker服务</li><li>docker start/stop id/name 启动/停止某个容器</li><li>docker ps 查看正在运行的容器</li><li>docker ps -a 查看所有容器的状态</li><li>docker attach id 进入某个容器 </li><li>docker images 查看本地镜像</li><li>docker rm id/name 删除某个容器</li><li>docker rmi id/name 删除某个镜像</li><li>docker run –name test -ti ubuntu /bin/bash  复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转fastDFS</title>
      <link href="/2019/08/03/wan-zhuan-fastdfs/"/>
      <url>/2019/08/03/wan-zhuan-fastdfs/</url>
      
        <content type="html"><![CDATA[<h2 id="一、宜未雨而绸缪-毋临渴而掘井"><a href="#一、宜未雨而绸缪-毋临渴而掘井" class="headerlink" title="一、宜未雨而绸缪,毋临渴而掘井"></a>一、宜未雨而绸缪,毋临渴而掘井</h2><h3 id="1、安装前先把必须的依赖环境配置好"><a href="#1、安装前先把必须的依赖环境配置好" class="headerlink" title="1、安装前先把必须的依赖环境配置好"></a>1、安装前先把必须的依赖环境配置好</h3><p>a.依赖c语言</p><pre><code>yum -y install gcc make</code></pre><p>b.依赖libevent作为服务器（推荐安装在/usr目录下）</p><pre><code>下载：  wget https://nchc.dl.sourceforge.net/project/levent/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz解压：  tar -zxvf libevent-2.0.22-stable.tar.gz进入解压目录：  cd libevent-2.0.22-stable直接执行：  ./configure --prefix=/usr/local/libevent/安装：  make &amp;&amp; make install</code></pre><p>c.安装libfastcommon否则会报错</p><pre><code>下载：  wget https://github.com/happyfish100/libfastcommon/archive/V1.0.38.tar.gz进入目录：cd libfastcommon-1.0.38执行编译：./make.sh安装：./make.sh install</code></pre><p>d.到此依赖环境告一段落了，是不是脑子嗡嗡嘀！！！</p><h2 id="二、莫乱阵脚，我才是今天的主角"><a href="#二、莫乱阵脚，我才是今天的主角" class="headerlink" title="二、莫乱阵脚，我才是今天的主角"></a>二、莫乱阵脚，我才是今天的主角</h2><h3 id="1、安装FastDFS"><a href="#1、安装FastDFS" class="headerlink" title="1、安装FastDFS"></a>1、安装FastDFS</h3><pre><code>下载：  wget https://github.com/happyfish100/fastdfs/archive/V5.11.tar.gz解压：  tar -zxvf V5.11.tar.gz进入目录：cd fastdfs-5.11执行编译：./make.sh安装：./make.sh install查看可执行命令：ls -la /usr/bin/fdfs*</code></pre><h3 id="2-配置Tracker服务"><a href="#2-配置Tracker服务" class="headerlink" title="2.配置Tracker服务"></a>2.配置Tracker服务</h3><p>a.进入/etc/fdfs目录，有四个.sample后缀的文件，通过mv命令重命名四个文件，删除.sample后缀</p><p>b.修改tracker.conf配置文件： vim tracker.conf，修改如下</p><pre><code>base_path=/home/data/log_tracker  #tracker存储data和log的根路径，需要提前创建port=22122 #tracker端口号http.server_port=8080 #http端口，需要和nginx相同</code></pre><p>c.启动tracker</p><pre><code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start</code></pre><p>d.关闭tracker</p><pre><code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf stop</code></pre><h3 id="3-配置Storage服务"><a href="#3-配置Storage服务" class="headerlink" title="3.配置Storage服务"></a>3.配置Storage服务</h3><p>a.修改storage.conf： vim storage.conf，修改如下</p><pre><code>base_path=/home/data/log_storage   #storage存储data和log的根路径，需要提前创建port=23000  #storge端口，同一个组的storage端口号须一致group_name=group1  #默认组名，根据自己实际情况修改store_path_count=2  #存储路径个数，需要和下面的store_path个数匹配store_path0=/home/data/log_storage/log  #java操作时上传文件的存放目录store_path1=/home/data/log_storage/log2  #上传文件的存放目录可以有多个tracker_server=10.122.149.211:22122 #配置该storage监听的tracker的ip和port</code></pre><p>b.启动storage</p><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start</code></pre><p>c.关闭storage</p><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf stop</code></pre><p>d.可通过monitor来查看storage是否成功绑定</p><pre><code>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</code></pre><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><h3 id="1-重启tracker"><a href="#1-重启tracker" class="headerlink" title="1.重启tracker"></a>1.重启tracker</h3><pre><code> /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code></pre><h3 id="2-重启storage"><a href="#2-重启storage" class="headerlink" title="2.重启storage"></a>2.重启storage</h3><pre><code> /usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><h3 id="3-查看端口使用情况"><a href="#3-查看端口使用情况" class="headerlink" title="3.查看端口使用情况"></a>3.查看端口使用情况</h3><pre><code>netstat -apn|grep fdfs</code></pre><h3 id="4-结合springboot使用请参考"><a href="#4-结合springboot使用请参考" class="headerlink" title="4.结合springboot使用请参考"></a>4.结合springboot使用请参考</h3><p><a href="https://github.com/happyfish100/fastdfs-client-java" title="fastdfs整合springboot" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-client-java</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5拖放技术</title>
      <link href="/2019/08/03/html5-tuo-fang-ji-zhu/"/>
      <url>/2019/08/03/html5-tuo-fang-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、知识存储展"><a href="#一、知识存储展" class="headerlink" title="一、知识存储展"></a>一、知识存储展</h2><h3 id="1、兵马未动粮草先行-—-gt-api展"><a href="#1、兵马未动粮草先行-—-gt-api展" class="headerlink" title="1、兵马未动粮草先行 —-&gt;api展"></a>1、兵马未动粮草先行 —-&gt;api展</h3><p>|———————-1.draggable属性<br>|——true: 元素能被拖拽<br>|——false: 元素不能被拖拽<br>|——auto: 浏览器自己判断元素是否能被拖拽 ( 默认 )<br>|<br>|———————-2.拖放对象属性<br>|——dragstart：按下鼠标键并开始移动时触发<br>|——drag：在元素拖拽过程中持续触发<br>|——dragend：元素拖拽停止时触发<br>|<br>|———————-3.拖拽对象放置区属性(对象被拖动到有效的放置目标时，下列事件会依次发生哦)<br>|——dragenter：当拖拽对象进入投放区时触发<br>|——dragover ：拖拽对象在投放区内移动时持续触发<br>|——dragleave：元素被拖出了投放区时触发<br>|——drop    ：拖拽对象投放在投放区时触发<br>|<br>|———————-4.dataTransfer对象常用方法与属性<br>|——setDragImage (图标，图标距指针X轴偏移值，Y轴偏移值)；方法拖动时显示在鼠标光标下的小图标<br>|——dropEffect 表示被拖动的元素能够执行哪种放置行为<br>|–“none” : 不能把拖动的元素放在这里<br>|–“move”: 把拖动的元素移动到放置目标<br>|–“copy”: 把拖动的元素复制到放置目标<br>|–“link”: 放置目标会打开拖动的元素（有URL）<br>|<br>|——effectAllowed 允许拖动元素的哪种dropEffect属性<br>|–“copyLink” : 允许值为copy和link的dropEffect<br>|–“move” : “copyMove”: 允许值为copy和move的dropEffect<br>|–“linkMove”  : 允许值为link和move的dropEffect<br>|–“link” : 放置目标会打开拖动的元素（有URL）<br>|–“all” : 允许所有的dropEffect<br>|<br>|———————-5.files 文件拖拽行为<br>|——dataTransfer.files：若拖放的是文件类型，则返回正在拖放文件的列表<br>|——FileReader：读取文件专用，FileReader 接口提供一些读取文件的方法与包含读取结果的事件模型<br>|——FileReader.readAsDataURL方法：参数为要读取的文件对象，将文件读取为DataUrl<br>|——FileReader.onload事件：读取文件成功完成时触发，事件触发后，可通过this.result来获取读取的文件数据，如果是图片，将以base64格式的图片数据返回。<br>|<br>|———————-终结————————  </p><pre><code>注：Safari 5.1.2 中不支持拖放技术</code></pre><h2 id="二、小试牛刀，以展风骚"><a href="#二、小试牛刀，以展风骚" class="headerlink" title="二、小试牛刀，以展风骚"></a>二、小试牛刀，以展风骚</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;html5拖拽技术---康怀安&lt;/title&gt;    &lt;script src=&quot;js/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;    &lt;style type=&quot;text/css&quot;&gt;        #container {            width: 350px;            height: 70px;            padding: 10px;            border: 1px solid #aaaaaa;        }    &lt;/style&gt;    &lt;script&gt;        function allowDrop(e) {            e.preventDefault();        }        function myDrag(e) {            e.dataTransfer.setData(&quot;Text&quot;, e.target.id);        }        function myDrop(e) {            e.preventDefault();            var data = e.dataTransfer.getData(&quot;Text&quot;);            e.target.appendChild(document.getElementById(data));        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;拖拽自己的图片到矩形框中吧&lt;/p&gt;    &lt;div id=&quot;container&quot; ondrop=&quot;myDrop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;    &lt;br&gt;    &lt;hr&gt;    &lt;br&gt;    &lt;img id=&quot;drags&quot; src=&quot;img/a1.png&quot; draggable=&quot;true&quot; ondragstart=&quot;myDrag(event)&quot; width=&quot;336&quot; height=&quot;69&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="三、“牛刀”详解"><a href="#三、“牛刀”详解" class="headerlink" title="三、“牛刀”详解"></a>三、“牛刀”详解</h2><h3 id="1、设置元素为可拖放："><a href="#1、设置元素为可拖放：" class="headerlink" title="1、设置元素为可拖放："></a>1、设置元素为可拖放：</h3><pre><code>&lt;img draggable=&quot;true&quot;&gt;</code></pre><h3 id="2、拖动什么与发生什么"><a href="#2、拖动什么与发生什么" class="headerlink" title="2、拖动什么与发生什么"></a>2、拖动什么与发生什么</h3><pre><code>function myDrag(e) {    e.dataTransfer.setData(&quot;Text&quot;,e.target.id);}注：此例中，数据类型是 &quot;Text&quot;，值是可拖动元素的 id (&quot;drags&quot;)。</code></pre><h3 id="3、放到何处"><a href="#3、放到何处" class="headerlink" title="3、放到何处"></a>3、放到何处</h3><pre><code>event.preventDefault();注：默认地，无法将数据/元素放置到其他元素中。若要设置允许放置，必须阻止对元素的默认处理方式。这要通过调用 ondragover 事件的 event.preventDefault() 方法</code></pre><h3 id="4、进行放置"><a href="#4、进行放置" class="headerlink" title="4、进行放置"></a>4、进行放置</h3><pre><code>function myDrop(e) {    e.preventDefault();    var data=e.dataTransfer.getData(&quot;Text&quot;);    e.target.appendChild(document.getElementById(data));}</code></pre><p><em>到此就讲解完毕了，谢谢大家查阅，如有不足希望大家斧正</em></p>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Redis</title>
      <link href="/2019/08/02/redis-an-zhuang-shi-yong/"/>
      <url>/2019/08/02/redis-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置redis安装环境"><a href="#一、配置redis安装环境" class="headerlink" title="一、配置redis安装环境"></a>一、配置redis安装环境</h2><p>1、由于Redis是c语言开发的，所以安装redis需要先安装c语言的编译环境。yum在线安装gcc:</p><pre><code>yum install gcc-c++  </code></pre><h2 id="二、redis的下载安装"><a href="#二、redis的下载安装" class="headerlink" title="二、redis的下载安装"></a>二、redis的下载安装</h2><h3 id="1-下载redis资源"><a href="#1-下载redis资源" class="headerlink" title="1.下载redis资源"></a>1.下载redis资源</h3><pre><code>wget http://download.redis.io/releases/redis-4.0.8.tar.gz</code></pre><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><pre><code>tar -xzvf redis-4.0.8.tar.gz</code></pre><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><p>a.进入redis目录： cd redis-4.0.8<br>b.编译: make<br>c.进入src目录： cd src<br>d.安装： make install PREFIX=/usr/local/redis  </p><pre><code>注：PREFIX后跟的是redis的安装目录，一般软件会安装到/usr目录下</code></pre><h3 id="4-配置redis"><a href="#4-配置redis" class="headerlink" title="4.配置redis"></a>4.配置redis</h3><p>a.配置redis为后台启动:  </p><pre><code>vim /usr/local/redis/etc/redis.conf  //将里面内容daemonize no 改成daemonize yes  </code></pre><p>b.配置redis开机自启</p><pre><code>vim /etc/rc.local //在里面添加如下内容：/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</code></pre><h3 id="三、开启redis"><a href="#三、开启redis" class="headerlink" title="三、开启redis"></a>三、开启redis</h3><p>1、执行如下命令</p><pre><code>/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf </code></pre><p>此时redis已经安装完毕了，你懂了吗？</p><h2 id="四、其他常用命令"><a href="#四、其他常用命令" class="headerlink" title="四、其他常用命令"></a>四、其他常用命令</h2><h3 id="1、关闭redis"><a href="#1、关闭redis" class="headerlink" title="1、关闭redis"></a>1、关闭redis</h3><pre><code>redis-cli shutdown</code></pre><h3 id="2、检测后台进程是否存在"><a href="#2、检测后台进程是否存在" class="headerlink" title="2、检测后台进程是否存在"></a>2、检测后台进程是否存在</h3><pre><code>ps -ef |grep redis</code></pre><h3 id="3、检测6379端口是否在监听"><a href="#3、检测6379端口是否在监听" class="headerlink" title="3、检测6379端口是否在监听"></a>3、检测6379端口是否在监听</h3><pre><code>netstat -lntp | grep 6379</code></pre><h2 id="五、卸载redis"><a href="#五、卸载redis" class="headerlink" title="五、卸载redis"></a>五、卸载redis</h2><p>1、rm -rf /usr/local/redis  //删除安装目录<br>2、rm -rf /usr/bin/redis-* //删除所有redis相关命令脚本<br>3、rm -rf /root/download/redis-4.0.4 //删除redis解压文件夹  </p><h2 id="六、搭建Redis集群"><a href="#六、搭建Redis集群" class="headerlink" title="六、搭建Redis集群"></a>六、搭建Redis集群</h2><p>1、在/usr/local/下新建文件夹redisCluster</p><pre><code>cd /usr/localmkdir redisCluster</code></pre><p>2、复制已经安装好的redis文件夹下的bin(有的是src)</p><pre><code>cp /usr/local/redis/src /usr/local/redisCluster/redis01</code></pre><p>3、进入redis01目录下删除dump.rdb文件，修改port 7001,cluster-enabled yes保存即可    </p><pre><code>cd /usr/local/redisCluster/redis01rm -rf dump.rdbvim redis.conf</code></pre><p>4、进入redisCluster目录下复制redis01六份分别为redis02、redis03、redis04、redis05、redis06</p><pre><code>cd /usr/local/redisClustercp redis01 redis02cp redis01 redis03cp redis01 redis04cp redis01 redis05cp redis01 redis06</code></pre><p>5、分别修改redis0X下的redis.conf文件内的端口号为7002、7003、、、7006    </p><pre><code>vim redis02/redis.conf   #示例：修改redis01...</code></pre><p>6、配置完成    ，启动所有redis即可（可用批处理文件操作）</p><pre><code>./redis01/redis-server ./edis01/redis.conf   #示例：开启redis01...</code></pre><p>7、安装配置ruby脚本（集群需要ruby的运行环境）</p><pre><code>yum install rubyyum install rubygems</code></pre><p>8、把下载好的redis-3.0.0.gem放到redisCluster文件夹下，把/usr/local/redis/src/redis-trib.rb移动到redisCluster文件夹下</p><pre><code>mv /usr/local/redis/src/redis-trib.rb /usr/local/redisCluster</code></pre><p>9、安装    ruby脚本用到的包</p><pre><code>cd /usr/local/redisClustergem install redis-3.0.0.gem</code></pre><p>10、使用ruby脚本自动搭建集群（确保redis服务都开启状态，未开启看第六步）</p><pre><code>./redis-trib.rb create --replicas 1 192.168.84.129:7001 192.168.84.129:7002 192.168.84.129:7003 192.168.84.129:7004 192.168.84.129:7005  192.168.84.129:7006有的是（第一个命令不行就用下面这个）redis-cli --cluster create 192.168.84.129:7001 192.168.84.129:7002 192.168.84.129:7003 192.168.84.129:7004 192.168.84.129:7005 192.168.84.129:7006 --cluster-replicas 1</code></pre><p>11、常用命令</p><pre><code>/redis-cli -p 7001 -c   #开启客户端cluster info     #查看集群的详细信息cluster nodes      #查看集群节点信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生技 </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven使用锦囊</title>
      <link href="/2019/08/02/maven-shi-yong-jin-nang/"/>
      <url>/2019/08/02/maven-shi-yong-jin-nang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Maven是什么？"><a href="#一、Maven是什么？" class="headerlink" title="一、Maven是什么？"></a>一、Maven是什么？</h1><p>Maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础建设，Maven使用标准的目录结构来构建生命周期。  </p><h2 id="1-1、什么是项目构建"><a href="#1-1、什么是项目构建" class="headerlink" title="1.1、什么是项目构建"></a>1.1、什么是项目构建</h2><p>项目构建：即一个项目从编写源代码到编译、测试、运行、打包、部署、运行的全过程</p><h2 id="1-2、maven项目构建过程"><a href="#1-2、maven项目构建过程" class="headerlink" title="1.2、maven项目构建过程"></a>1.2、maven项目构建过程</h2><p>构建过程：清理–编译–测试–报告–打包–部署</p><h2 id="1-3、使用Maven好处"><a href="#1-3、使用Maven好处" class="headerlink" title="1.3、使用Maven好处"></a>1.3、使用Maven好处</h2><p>1、对jar包的版本统一管理，版本一般不回发生冲突。<br>2、jar包容易找，输入Maven坐标即可。<br>3、有效解决jar包添加到工程中致使工程过大。<br>4、可跨平台使用。</p><h1 id="二、Maven下载"><a href="#二、Maven下载" class="headerlink" title="二、Maven下载"></a>二、Maven下载</h1><h2 id="2-1、下载maven压缩包"><a href="#2-1、下载maven压缩包" class="headerlink" title="2.1、下载maven压缩包"></a>2.1、下载maven压缩包</h2><p>1、下载地址：<a href="http://maven.apache.org/download.cgi" title="Maven下载地址" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a><br><em>注：不要解压在中文路径下</em></p><h1 id="三、Maven配置"><a href="#三、Maven配置" class="headerlink" title="三、Maven配置"></a>三、Maven配置</h1><h2 id="3-1、配置环境变量"><a href="#3-1、配置环境变量" class="headerlink" title="3.1、配置环境变量"></a>3.1、配置环境变量</h2><p>1、此电脑–属性–高级系统设置–环境变量–新建系统变量‘MAVEN_HOME‘–配置系统变量Path<br><img src="https://img-blog.csdn.net/20180813134820327?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3MTY3MzY5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="配置Maven">  </p><p>2、验证是否配置成功：win+R—输入cmd进入dos系统（黑窗口）—输入mvn –version—显示Maven版本则成功。否则重新配置环境变量。</p><h2 id="3-2、配置maven仓库"><a href="#3-2、配置maven仓库" class="headerlink" title="3.2、配置maven仓库"></a>3.2、配置maven仓库</h2><h3 id="1、maven仓库"><a href="#1、maven仓库" class="headerlink" title="1、maven仓库"></a>1、maven仓库</h3><p>中央仓库：所有人都可用的仓库。官网<a href="http://www.mvnrepository.com/" title="中央仓库" target="_blank" rel="noopener">http://www.mvnrepository.com/</a><br>公司仓库：每个公司自己的仓库。<br>本地仓库：自己私人仓库，即只有自己可以使用。<br>注：jar的查找顺序：本地仓库–&gt;公司仓库–&gt;中央仓库</p><h3 id="2、配置仓库为本地仓库"><a href="#2、配置仓库为本地仓库" class="headerlink" title="2、配置仓库为本地仓库"></a>2、配置仓库为本地仓库</h3><p>打开Maven的安装目录下的conf目录下的settings.xml配置文件。在任意位置新建存放下载的jar包的文件夹，修改settings.xml文件中的<localrepository>标签中的路径为你刚才创建的jar包路径，并把镜像仓库改为阿里添加如下内容即可：</localrepository></p><!-- 阿里镜像仓库 --><pre><code>&lt;mirrors&gt;    &lt;mirror&gt;        &lt;id&gt;alimaven&lt;/id&gt;        &lt;name&gt;aliyun maven&lt;/name&gt;        &lt;url&gt;            http://maven.aliyun.com/nexus/content/groups/public/        &lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;&lt;/mirrors&gt;</code></pre><h3 id="3、idea与eclipse配置maven"><a href="#3、idea与eclipse配置maven" class="headerlink" title="3、idea与eclipse配置maven"></a>3、idea与eclipse配置maven</h3><p>a、配置idea：点击File–settings–build,Exection,deployment–Build Tools–Maven–修改settings文件即可如图：<br><img src="https://img-blog.csdn.net/20180605170617533" alt="idea修改maven地址">  </p><p>b、配置eclipse:windows–preferences–maven–User settings如图：<br><img src="https://images2015.cnblogs.com/blog/985599/201609/985599-20160925172923404-1265994932.png" alt="eclipse配置maven"></p><h3 id="4、就此所有配置就搞定了，你是不是把步骤熟记于心了呐？"><a href="#4、就此所有配置就搞定了，你是不是把步骤熟记于心了呐？" class="headerlink" title="4、就此所有配置就搞定了，你是不是把步骤熟记于心了呐？"></a>4、就此所有配置就搞定了，你是不是把步骤熟记于心了呐？</h3><p><em>注：如有雷同纯属无意，烦请告知即刻修改！！！</em></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生技 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jave集合宝典</title>
      <link href="/2019/08/01/jave-ji-he-bao-dian/"/>
      <url>/2019/08/01/jave-ji-he-bao-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、有图有真相"><a href="#一、有图有真相" class="headerlink" title="一、有图有真相"></a>一、有图有真相</h2><p><img src="https://img-blog.csdn.net/20180803195348216?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaXlhbmFmZmVjdGlvbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="集合图解">  </p><h3 id="1、数组和集合的比较"><a href="#1、数组和集合的比较" class="headerlink" title="1、数组和集合的比较"></a>1、数组和集合的比较</h3><p>数组不是面向对象的，有很大缺陷，而集合则可以弥补数组的缺点，且比数组更灵活好用，不同主要如下：<br>1：数组能存放基本数据类型和对象，而集合类存放的都是引用类型，而非对象本身<br>2：数组无法动态改变，而集合类容量则可以动态改变。<br>3：数组无法判断其中实际存有多少元素，length属性是数组的容量，而集合的size()方法可以确切返回元素的个数<br>4：集合有多种实现方式和不同适用场合，而数组仅采用了顺序表方式<br>5：集合以类的形式存在，有封装、继承、多态等类的特性，通过简单的方法和属性即可实现各种复杂操作，大大提高了程序的开发效率   </p><h3 id="2、Collection集合详解"><a href="#2、Collection集合详解" class="headerlink" title="2、Collection集合详解"></a>2、Collection集合详解</h3><p><img src="https://img-blog.csdn.net/20180803193423722?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaXlhbmFmZmVjdGlvbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="connection集合">  </p><h3 id="3、集合分类"><a href="#3、集合分类" class="headerlink" title="3、集合分类"></a>3、集合分类</h3><p>Collection 接口的接口 对象的集合（单列集合）<br>|<br>├—-List 接口：元素按进入先后有序保存，可重复<br>│——├ LinkedList 接口实现类， 链表， 插入删除， 没有同步， 线程不安全<br>│——├ ArrayList 接口实现类， 数组， 随机访问， 没有同步， 线程不安全<br>│——└ Vector 接口实现类 数组， 同步， 线程安全<br>│ ——–└ Stack 是Vector类的实现类<br>└—Set 接口： 仅接收一次，不可重复，并做内部排序<br>├——└HashSet 使用hash表（数组）存储元素<br>│———└ LinkedHashSet 链表维护元素的插入次序<br>└ —–TreeSet 底层实现为二叉树，元素排好序  </p><p>Map 接口 键值对的集合 （双列集合）<br>├—Hashtable 接口实现类， 同步， 线程安全<br>├—HashMap 接口实现类 ，没有同步， 线程不安全-<br>│——├ LinkedHashMap 双向链表和哈希表实现<br>│——└ WeakHashMap<br>├—–TreeMap 红黑树对所有的key进行排序<br>└—IdentifyHashMap    </p><h2 id="二、List-vs-Set"><a href="#二、List-vs-Set" class="headerlink" title="二、List  vs  Set"></a>二、List  vs  Set</h2><h3 id="1、list与set集合区别"><a href="#1、list与set集合区别" class="headerlink" title="1、list与set集合区别"></a>1、list与set集合区别</h3><p>1.List中提供索引的方式来添加元素和获取元素，而Set并不提供。由此可见List集合可是达到精确的存储和获取，而Set只能一个一个的比较，显然效率和实用性是比不上List集合的<br>2.List集合是有序存储,Set集合是无序存储。这里的有序和无序针对的是存储地址来说的。<br>3.List可以存储重复的值，Set不可以存储重复的值 </p><p><img src="https://img-blog.csdn.net/2018052418200478?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aWFvdmJi/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="set集合常用方法"> </p><h2 id="三、Map集合详解"><a href="#三、Map集合详解" class="headerlink" title="三、Map集合详解"></a>三、Map集合详解</h2><h3 id="1、Map集合特点"><a href="#1、Map集合特点" class="headerlink" title="1、Map集合特点"></a>1、Map集合特点</h3><p>1.将键映射到值的对象<br>2.一个映射不能包含重复的键<br>3.每个键最多只能映射到一个值</p><h3 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h3><p><img src="https://upload-images.jianshu.io/upload_images/3985563-d2494516e1d68a6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/861/format/webp" alt="map集合"></p><h2 id="四、CopyOnWriteArrayList集合详解"><a href="#四、CopyOnWriteArrayList集合详解" class="headerlink" title="四、CopyOnWriteArrayList集合详解"></a>四、CopyOnWriteArrayList集合详解</h2><p>1、产生原因<br>    1、正如ConcurrentHashMap代替SynchronizedMap一样，在这里替代Vector和SynchronizedList。（此两者锁的力度大导致效率低，切在遍历的时候无法编辑）<br>    2、Copy-On-Write并发容器还包括CopyOnWriteArraySet，用来替代同步Set</p><p>2、使用场景<br>    读多写少 - 便利操作远多于增删改操作</p><p>3、原理<br>    创建新副本进行读写分离（线程安全，内部有一个ReentrantLock锁）。即迭代时就会创建一个副本，如果有增删改操作就去副本中进行操作，<br>    而迭代则继续在此集合中进行，也就是原集合不会改变，各种操作都在副本中进行（你操作你的，我迭代我的）。等迭代完成后将集合指针<br>    修改为指向副本地址即可完成修改。</p><p>4、缺点<br>    1、数据一致性问题：只能保证最终一致性，如想要修改后数据马上生效请不要用<br>    2、内存占用问题：因为要创建一个副本，所以需要多开辟一个空间来存数据</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 生技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅安装MySQL？</title>
      <link href="/2019/07/31/ru-he-you-ya-an-zhuang-mysql/"/>
      <url>/2019/07/31/ru-he-you-ya-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL如何安装？"><a href="#MySQL如何安装？" class="headerlink" title="MySQL如何安装？"></a>MySQL如何安装？</h1><h2 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h2><p>MySQL解压版下载地址：<a href="https://dev.mysql.com/downloads/file/?id=479669" title="下载地址" target="_blank" rel="noopener">https://dev.mysql.com/downloads/file/?id=479669</a>  ，直接点击最下方的“No thanks, just start my download.”即可开始下载<br>注：安装数据库时，登录用户必须拥有Administrator权限。</p><h2 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h2><p>将压缩包解压后放到将要安装的目录下，解压后的文件结构如图：  </p><p><img src="https://img-blog.csdn.net/20180804090524920?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="目录结构"></p><p>从解压的文档结构中，没有my.ini配置文件，需要自己创建my.ini文件。</p><h2 id="3、配置my-ini文件"><a href="#3、配置my-ini文件" class="headerlink" title="3、配置my.ini文件"></a>3、配置my.ini文件</h2><p>数据库服务端配置项  </p><p>[mysqld]<br>basedir=D:\Programs\MySQL\MySQL-8.0.12-winx64    # 数据库路径<br>datadir=D:\Programs\MySQL\data   # 数据路径<br>port=3306  # 端口号<br>character-set-server=utf8mb4   # 默认字符集<br>default-storage-engine=INNODB   # 存储引擎<br>[mysql]<br>default-character-set=utf8mb4   # 默认字符集<br>[client]<br>default-character-set=utf8mb4   # 连接客户端配置项</p><h2 id="4、初始化MySQL"><a href="#4、初始化MySQL" class="headerlink" title="4、初始化MySQL"></a>4、初始化MySQL</h2><p>打开终端，进入到数据安装路径下的bin目录下：<br><img src="https://img-blog.csdn.net/20180804143335884?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图一">  </p><p>在终端中输入指令“mysqld –initialize –console”，按回车键即可完成初始化：  <img src="https://img-blog.csdn.net/20180804144502260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图二">  </p><p>注：初始化完成后，不要关闭窗口，因为这里会生成root用户的密码，图中的“p=brffHdg4T5”即是随机密码。<br>当然，还有一种初始化方式是不会产生随机密码的，但是也需要在正式使用数据库前设置密码，这个初始化指令为“mysqld –initialize-insecure –console”。当使用无随机密码初始化数据库时，首次登陆数据时需要使用“mysql -u root –skip-password”，即跳过密码验证方式登陆。</p><h2 id="5、数据库服务安装"><a href="#5、数据库服务安装" class="headerlink" title="5、数据库服务安装"></a>5、数据库服务安装</h2><p>打开终端，进入到数据安装路径下的bin目录下，如下图。 使用指令“mysqld –install”即可完成服务的安装：<br><img src="https://img-blog.csdn.net/20180804150640820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图三">  </p><p>注：在注册服务时，一定要使用管理员身份执行，否则安装服务时会被拒绝。<br>同时，也可以使用指令“mysqld –remove”来将注册的服务给移除。<br>事实上，注册服务的完整指令是“mysqld –install 服务名”，若是服务名不写则默认为“MySQL”，服务移除指令同样是“mysqld –remove 服务名”，默认值为“MySQL”。</p><h2 id="6、服务启动"><a href="#6、服务启动" class="headerlink" title="6、服务启动"></a>6、服务启动</h2><p>在终端中使用指令“net start MySQL”，即可启动数据库服务：<br><img src="https://img-blog.csdn.net/20180804152117396?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图四">  </p><p>验证服务是否已经启动，在终端页面尝试能否登陆数据库，这里需要输入的密码即是在步骤4中初始化时系统生成的随机密码，输入即可：<br><img src="https://img-blog.csdn.net/20180804153049428?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图五">  </p><p>登陆成功！在执行指令前，系统会强制要求更改初始化时的随机密码：<br><img src="https://img-blog.csdn.net/20180804153556109?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图六">  </p><p>使用指令“ ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘新密码’ ”，按回车键即可： </p><p>修改完密码后，就可以正常使用数据库啦！<br><img src="https://img-blog.csdn.net/20180804154426904?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图七">  </p><p>使用其他工具连接即可–<br><img src="https://img-blog.csdn.net/20180804154639820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzMyMzYzNDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图八"></p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅安装jdk？</title>
      <link href="/2019/07/31/jdk-an-zhuang-jiao-cheng/"/>
      <url>/2019/07/31/jdk-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk如何安装？"><a href="#jdk如何安装？" class="headerlink" title="jdk如何安装？"></a>jdk如何安装？</h1><h2 id="1、首先要下载jdk的安装包："><a href="#1、首先要下载jdk的安装包：" class="headerlink" title="1、首先要下载jdk的安装包："></a><strong>1、首先要下载jdk的安装包：</strong></h2><p>根据自己电脑的配置去下载相应的版本，下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" title="下载地址" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p><img src="https://upload-images.jianshu.io/upload_images/13994765-a499c87ae28a7cff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/809/format/webp" alt="图一">  </p><p>接受条件，选择最后一个！<br><img src="https://upload-images.jianshu.io/upload_images/13994765-ea6037667314435b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/748/format/webp" alt="图二">  </p><p>下载完成后双击打开！（可更改安装路径）<br><img src="https://upload-images.jianshu.io/upload_images/13994765-8eebc5b079a2f506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="图三"> </p><p><img src="https://upload-images.jianshu.io/upload_images/13994765-1e2466b8dc64f832.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="图四">  </p><p><img src="https://upload-images.jianshu.io/upload_images/13994765-0f6bc1ea945c14ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/627/format/webp" alt="图五">  </p><p>将上述的步骤做好了之后，我们就可以测试了，windows+R输入cmd进入dos系统，输入命令：java   出现下图所示：  </p><p><img src="https://upload-images.jianshu.io/upload_images/13994765-d5f97ec8fc038bdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/745/format/webp" alt="图六">  </p><h2 id="2、配置jdk的环境变量"><a href="#2、配置jdk的环境变量" class="headerlink" title="2、配置jdk的环境变量"></a><strong>2、配置jdk的环境变量</strong></h2><p><img src="https://upload-images.jianshu.io/upload_images/13994765-ddf4353d3bcedad8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/686/format/webp" alt="图一">  </p><p><img src="https://upload-images.jianshu.io/upload_images/13994765-eebe5434d0881a31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/613/format/webp" alt="图二">  </p><p>新建JAVA_HOME：<br><img src="https://upload-images.jianshu.io/upload_images/13994765-fd11f1e1927ed19d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/816/format/webp" alt="图三">  </p><p>在path中添加：<br><img src="https://upload-images.jianshu.io/upload_images/13994765-b99723d042806777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/677/format/webp" alt="图四">  </p><p>新建classpath:<img src="https://upload-images.jianshu.io/upload_images/13994765-3a3cd73e6145d49d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="图五">  </p><p>最后在cmd命令框中输入java -version 出现版本即安装配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名人十言</title>
      <link href="/2019/07/31/ming-ren-shi-yan/"/>
      <url>/2019/07/31/ming-ren-shi-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="孔子十大经典名句"><a href="#孔子十大经典名句" class="headerlink" title="孔子十大经典名句"></a>孔子十大经典名句</h2><p><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=deca3fe9d72a283443a6310d638eaed7/50da81cb39dbb6fdecf5cad20a24ab18962b3793.jpg" alt="孔夫子">    </p><p>1、有朋自远方来，不亦乐乎。      </p><p>2、四海之内皆兄弟也。</p><p>3、己所不欲，勿施于人。</p><p>4、己欲立而立人，己欲达而达人。</p><p>5、德不孤，必有邻。</p><p>6、礼之用，和为贵。</p><p>7、三人行，必有我师焉，择其善者而从之，其不善者而改之。</p><p>8、人无远虑，必有近忧。</p><p>9、知者不惑，仁者不忧，勇者不惧。</p><p>10、三军可夺帅也，匹夫不可夺志也。</p><p><em>孔子简介：<a href="https://baike.baidu.com/item/%E5%AD%94%E5%AD%90/1584?fr=aladdin" title="孔子简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%AD%94%E5%AD%90/1584?fr=aladdin</a></em></p><hr><h2 id="老子十大经典名句"><a href="#老子十大经典名句" class="headerlink" title="老子十大经典名句"></a>老子十大经典名句</h2><p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=ccd971a717950a7b753549c232ea05e4/b2de9c82d158ccbfec509fab13d8bc3eb03541b6.jpg" alt="老子图"></p><p>1、道可道，非常道。名可名，非常名。无名天地之始；有名万物之母。</p><p>2、有无相生，难易相成，长短相形，高下相盈，音声相和，前后相随。恒也。</p><p>3、治大国，若烹小鲜。</p><p>4、祸兮福所倚，福兮祸之所伏。</p><p>5、天下难事，必作于易，天下大事，必作于细。</p><p>6、人法地，地法天，天法道，道法自然。</p><p>7、上善若水。水善利万物而不争，处众人之所恶，故几于道。</p><p>8、道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。</p><p>9、祸莫大于不知足；咎莫大于欲得。故知足之足，常足矣。</p><p>10、知人者智，自知者明。胜人者有力，自胜者强。</p><p><em>老子简介：<a href="https://baike.baidu.com/item/%E8%80%81%E5%AD%90/5448?fr=aladdin" title="老子简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E8%80%81%E5%AD%90/5448?fr=aladdin</a></em></p><hr><h2 id="李白十大经典名句"><a href="#李白十大经典名句" class="headerlink" title="李白十大经典名句"></a>李白十大经典名句</h2><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=176befc2c8ef76093c0b9e9916e6c4f1/78310a55b319ebc4acda9dc68126cffc1f1716ca.jpg" alt="李白简介"></p><p>1、君不见黄河之水天上来，奔流到海不复回。《将进酒》</p><p>2、天生我材必有用，千金散尽还复来。《将进酒》</p><p>3、仰天大笑出门去，我辈岂是蓬蒿人。《南陵别儿童入京》</p><p>4、大道入青天，我独不得出。《行路难三首》</p><p>5、抽刀断水水更流，举杯销愁愁更愁。《宣州谢朓楼饯别校书叔云》</p><p>6、一夫当关，万夫莫开。《蜀道难》</p><p>7、云青青兮欲雨，水澹澹兮生烟。《梦游天姥吟留别》</p><p>8、飞流直下三千尺，疑是银河落九天。《望庐山瀑布》</p><p>9、令人惭漂母，三谢不能餐。《宿五松山下荀媪家》</p><p>10、床前明月光，疑是地上霜。举头望明月，低头思故乡。《静夜思》</p><p><em>李白简介：<a href="https://baike.baidu.com/item/%E6%9D%8E%E7%99%BD/1043?fr=aladdin" title="李白简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%9D%8E%E7%99%BD/1043?fr=aladdin</a></em></p><hr><h2 id="杜甫十大经典名句"><a href="#杜甫十大经典名句" class="headerlink" title="杜甫十大经典名句"></a>杜甫十大经典名句</h2><p><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=85ae7a78d4f9d72a1764171bec114f09/0ff41bd5ad6eddc4ce38aabc34dbb6fd5366339d.jpg" alt="杜甫图"></p><p>1、会当凌绝顶，一览众山小。《望岳》</p><p>2、读书破万卷，下笔如有神。《奉赠韦左丞丈二十二韵》</p><p>3、朱门酒肉臭，路有冻死骨。《自京赴奉先县咏怀五百字》</p><p>4、尔曹身与名俱灭，不废江河万古流。《戏为六绝句》</p><p>5、出师未捷身先死，长使英雄泪满巾。《蜀相》</p><p>6、安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山。《茅屋为秋风所破歌》</p><p>7、丹青不知老将至，富贵于我如浮云。《丹青引赠曹将军霸》</p><p>8、挽弓当挽强，用剑当用长。射人先射马，擒贼先擒王。《前出塞九首》</p><p>9、文章千古事,得失寸心知。《偶题》</p><p>10、两个黄鹂鸣翠柳，一行白鹭上青天。《绝句四首（其三）》</p><p><em>杜甫简介：<a href="https://baike.baidu.com/item/%E6%9D%9C%E7%94%AB/63508?fr=aladdin" title="杜甫简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%9D%9C%E7%94%AB/63508?fr=aladdin</a></em></p><hr><h2 id="王安石十大经典名句"><a href="#王安石十大经典名句" class="headerlink" title="王安石十大经典名句"></a>王安石十大经典名句</h2><p><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98dfe3758635e5dd902ca2d94efdc0d2/377adab44aed2e735cc9850b8401a18b87d6faf1.jpg" alt="王安石"></p><p>1、不畏浮云遮望眼，只缘身在最高层。《登飞来峰》</p><p>2、春风又绿江南岸，明月何时照我还。《泊船瓜州》</p><p>3、千门万户曈曈日，总把新桃换旧符。《元日》</p><p>4、看似寻常最奇崛，成如容易却艰辛。《题张司业诗》</p><p>5、遥知不是雪，为有暗香来。《梅花》</p><p>6、一水护田将绿绕，两山排闼送青来。《书湖阴先生壁二首》其一</p><p>7、浓绿万枝红一点，动人春色不须多。《咏石榴花》</p><p>8、折得一枝香在手，人间应未有。《甘露歌》</p><p>9、自古驱民在诚信，一言为重百金轻。《商鞅》</p><p>10、细数落花因坐久，缓寻芳草得归迟。《北山》</p><p><em>王安石简介：<a href="https://baike.baidu.com/item/%E7%8E%8B%E5%AE%89%E7%9F%B3/127359?fr=aladdin" title="王安石简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%8E%8B%E5%AE%89%E7%9F%B3/127359?fr=aladdin</a></em></p><hr><h2 id="李清照十大经典名句"><a href="#李清照十大经典名句" class="headerlink" title="李清照十大经典名句"></a>李清照十大经典名句</h2><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=9a55fc41682762d0803ea3b998d76fc7/a71ea8d3fd1f4134a4b3461c2e1f95cad0c85ecf.jpg" alt="李清照"></p><p>1、生当作人杰，死亦为鬼雄。《夏日绝句》</p><p>2、物是人非事事休，欲语泪先流。《五陵春》</p><p>3、寻寻觅觅，冷冷清清，凄凄惨惨戚戚。《声声慢》</p><p>4、不如随分尊前醉，莫负东篱菊蕊黄。《鹧鸪天》</p><p>5、花自飘零水自流，一种相思，两处闲愁。《如梦令》</p><p>6、只恐双溪舴艋舟，载不动许多愁。《武陵春》</p><p>7、此情无计可消除,才下眉头,却上心头。《一剪梅》</p><p>8、莫道不销魂，帘卷西风，人比黄花瘦。《醉花阴》</p><p>9、知否，知否，应是绿肥红瘦。《如梦令》</p><p>10、新来瘦，非干病酒，不是悲秋。《凤凰台上忆吹箫》</p><p><em>李清照简介：<a href="https://baike.baidu.com/item/%E6%9D%8E%E6%B8%85%E7%85%A7/6351?fr=aladdin" title="李清照简介" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%9D%8E%E6%B8%85%E7%85%A7/6351?fr=aladdin</a></em></p><p><em>注：如有雷同纯属无意，烦请告知即刻修改！！！</em></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活美文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生大抵</title>
      <link href="/2019/07/30/ren-sheng-da-di/"/>
      <url>/2019/07/30/ren-sheng-da-di/</url>
      
        <content type="html"><![CDATA[<h2 id="人生大抵"><a href="#人生大抵" class="headerlink" title="人生大抵"></a>人生大抵</h2><p>人，需要不断整理心情，让自己轻松向往。这个世界童真最幸福。随着年龄的增长有了追求、有了追求烦恼就多，人生的经历就是从烦恼中开始、在烦恼中度过、再到消 除烦恼的过程。要想打开一扇窗，让阳光照亮、为自己创造一个良好的环境，把烦恼归零；能治愈自己的，只有自己。<br>生活的舒适，各有各人题解。其中主要因素：经济上的富足、行为上的自由、精神上的愉悦…。总之，不为物质忧愁，丰富精神生活。展望是一种精神，努力是一种方向。生活的匆匆，早出晚归的艰辛，体现在平凡生活中的衣食住行、柴米油盐。  </p><p>当昨天变成了今天、这世界依然如初；但也产生着稀奇古怪的故事，你会发现金钱改变了亲情、友情、爱情。金钱变成为万物的主宰。张口闭口金钱“人心不古，世风日下”富人深山有远亲，穷人面前无人睬。把历来纯洁的情感建立在了金钱利益之上。    </p><p>人生没有对错，只有选择坚持与放弃。人生仍然在继续，适应生活是关键。无论贫穷与富足，人身只顾一张嘴，一张床，没有 什么了不起。你享受、我努力。放下世俗，没有过不去的坎。适时放松自己，面对人生，微笑前行。    </p><p>物质与精神的追求，成功的路并不好走，人生路径弯弯曲曲，需要有信念，善于观察，善于总结经验。在生活中努力进取，追 求中智慧人生。人生也许路程会很煎熬，但熬过了逆境也能成为机遇。其实人之所以要追求，最终的目的是为了满足精神上的需要。     </p><p>人生大抵，有一种幸运叫机遇，在大部分人来说，机会比能力更有筹码。机遇往往是偶然的运气，关照着努力的人。抓住机遇，改变人生。时常有人说：能力是一块敲门砖，机遇才是通往成功的一扇门。    </p><p>亲情，是血浓于水的亲近，是人生最崇高的情感，也是人类最纯真的、难以割舍情缘。亲情似藤葛、它是延伸生命的广袤，是人间烟火延续的呈现，是温暖的港湾。亲情是一种和谐、一种关爱、一种孝敬。骨肉亲情，血脉相连，是深厚关联的情感。    </p><p>爱情，千丝万缕。爱，是人生最具有的热烈。爱情感受是心跳、是刺激、是思念、是等待，是人生最动人的心弦。爱情的世界却是自私的，不可分享，是珍惜，是坚守。有时只因曾经的沧海桑田，爱情也会让人心情沉重。爱情不仅赏心悦目，而且丰富多彩。    </p><p>友情，超越了血缘，地缘，对所有人皆可平等相待，平等奉献的一种跨越亲情的友谊。友情很微妙，真正的友情是真诚。只有你付出了真诚才能有收获。友情需默契、无所求而深刻。友谊可以相互分享，相互帮助。人们常说：多一个朋友，多一条路。    </p><p>事业，是人生活的基础，是人生的追求。没有事业的人生是庸碌的。这个社会充满竞争，在追求事业的路上磕磕绊绊并非一路平坦，但每一次的艰辛体验都是一种成熟，一种进步。“平凡的人听从命运，只有强者才是自己的主宰。”–维尼    </p><p>从来，很多东西可遇而不可求，不属于自己的不必去在乎；属于自己的一定要奋进。人生是自己的，没有必要把选择权交给他人左右。做人有目标、有追求、有期盼而独立自己，不依赖他人。做事应该有恒心，有自信力，学会自立是为了更好的享受人生。    </p><p>生活带给了人们很多的经历，同时也让人们明白了人生的意义。人生是自己的、体验生活是一种创新，一种诠释。走完一段旅程留意自己的痕迹，回头望去感受生命的旅程，历经几许，积淀几许，也因此会懂得对未来人生的有所期待，有所收获，有所奉献。    </p><p>活着就是在体验生命的存在，感受人生的意义。人生大抵；做好眼前的事，多懂得一些道理来巩固自己。知足者常乐，好好对待自己。人、活着是遇见、是一种邂逅；来或者去的相约，不早不晚的相遇，对与错的相然，熟悉与陌生的相逢，大抵如此。   </p><p><em>原文链接：<a href="http://www.duwenzhang.com/wenzhang/shenghuosuibi/shenghuoganwu/20190626/404385.html" title="看原文" target="_blank" rel="noopener">http://www.duwenzhang.com/wenzhang/shenghuosuibi/shenghuoganwu/20190626/404385.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活美文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less入门篇</title>
      <link href="/2019/07/09/less-ru-men-pian/"/>
      <url>/2019/07/09/less-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="Less入门"><a href="#Less入门" class="headerlink" title="Less入门"></a>Less入门</h2><h3 id="1、Less是什么？"><a href="#1、Less是什么？" class="headerlink" title="1、Less是什么？"></a>1、Less是什么？</h3><p>Less是一门css预处理语言，他扩展了css语言，增加了变量、混合（Mixin）、函数等特性，使css更容易维护和扩展。他不是一个直接使用的语言，而是一个生成css的语言。Less可以运行在Node或浏览器端。</p><h3 id="2、如何引入："><a href="#2、如何引入：" class="headerlink" title="2、如何引入："></a>2、如何引入：</h3><p><img src="https://i.loli.net/2019/11/27/ZbmKspBPgjVGywX.png" alt="less安装"></p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p><strong>变量</strong></p><blockquote><p>（1）可以将属性的值赋值给一个变量，在一个文件一个变量只能定义一次</p></blockquote><p>@marginLeft :  3px;<br>@marginLeft2  : @marginLeft + 3；</p><p>#header{<br>    margin-left: @marginLeft2;<br>}</p><p>编译过的结果就是:</p><p>#header{<br>    margin-left: 6px;<br>}</p><blockquote><p>(2)也可以通过使用变量名定义为变量</p></blockquote><p>@str : ‘hello world’;<br>@str2 : ‘str’;<br>content : @@str;</p><p>编译过的结果就是:<br>content : ‘hello world’;</p><p><strong>混合</strong></p><blockquote><p>混合通用工具类，一处定义多处使用。</p></blockquote><p>.temp {<br>  color : ‘green’;<br>  font-size : ‘2em’;<br>}</p><p> #mytitle {<br>     margin-top : ‘5%’;<br>  .temp;<br>}</p><p>编译过的结果就是:</p><p>#mytitle {<br>  margin-top : ‘5%’;<br>  color : ‘green’;<br>  font-size : ‘2em’;<br>}</p><p>混合还可以带参数和赋予参数默认值（默认值可有可无）<br>.border-radius (@radius ：  4px) {<br>        border-radius : @radius;<br>   -moz-border-radius : @radius;<br>-webkit-border-radius : @radius;<br>}</p><p>#box {<br>  .border-radius();<br>}</p><p>.square {<br>  .border-radius(6px);<br>}</p><p>编译后的结果是：</p><p>#box {<br>   border-radius : 4px;<br>   -moz-border-radius : 4px;<br>-webkit-border-radius : 4px;<br>}</p><p>.square {<br>   border-radius : 6px;<br>   -moz-border-radius : 6px;<br>-webkit-border-radius : 6px;<br>}</p><p>arguments包含了所有的传递进来的参数，不用单独处理每一个参数</p><p>.box-shadow (@a: 0, @b: 0, @c: 1px, @d: #000) {<br>  box-shadow: @arguments;<br>  -moz-box-shadow: @arguments;<br>  -webkit-box-shadow: @arguments;<br>}<br>.box-shadow(2px, 5px);</p><p>编译过后的结果是：<br>.box-shadow{<br>          box-shadow: 2px 5px 1px #000;<br>     -moz-box-shadow: 2px 5px 1px #000;<br>  -webkit-box-shadow: 2px 5px 1px #000;<br>}</p><p>匹配选取（匹配到对应的模式，选用对应的样式）</p><p>让.bar根据不同的@theme值选用不同的样式<br>.bar (dark, @color) {<br>  color: darken(@color, 10%);<br>}<br>.bar (light, @color) {<br>  color: lighten(@color, 10%);<br>}</p><p>//运行<br>@theme: light;</p><p>.box {<br>  .bar(@theme, #888);<br>}<br>经过编译后的颜色是：<br>.box {<br>  color: #a2a2a2;<br>}</p><p><strong>表达式</strong></p><blockquote><p>（1）根据表达式进行匹配，而不是通过值和参数匹配</p></blockquote><p>用when关键字用以定义一个导引序列(此例只有一个导引)<br>.mixin (@a) when (lightness(@a) &gt;= 50%) {<br>  background-color: black;<br>}<br>.mixin (@a) when (lightness(@a) &lt; 50%) {<br>  background-color: white;<br>}<br>.mixin (@a) {<br>  color: @a;<br>}</p><p>/<em>运行</em>/<br>.class1 { .mixin(#ddd) }<br>.class2 { .mixin(#555) }<br>编译后的结果是：</p><p>.class1 {<br>  background-color: black;<br>  color: #ddd;<br>}<br>.class2 {<br>  background-color: white;<br>  color: #555;<br>}<br>(2)导引中可用的全部的比较运算符有:&gt; &gt;= =&lt; &lt;。此外，关键字true只表示布尔真值，除去关键字true以外的值都被视为布尔假值。<br>(3)导引序列使用逗号‘，’分割，当且仅当所有的条件都符合的时候，才会被视为匹配成功。</p><p>.minin(@a) when (@a &gt;10),(@a &lt; 100){…}<br>(4)导引可以没有参数，也可以对参数进行比较运算</p><p>@media: mobile;</p><p>.mixin (@a) when (@media = mobile) { … }<br>.mixin (@a) when (@media = desktop) { … }</p><p>.max (@a, @b) when (@a &gt; @b) { width: @a }<br>.max (@a, @b) when (@a &lt; @b) { width: @b }<br>(5)如果想要基于值的类型进行匹配的话，可以使用is表达式进行判断</p><p>.mixin (@a, @b: 0) when (isnumber(@b)) { … }<br>.mixin (@a, @b: black) when (iscolor(@b)) { … }<br>常见的检测函式：iscolor、isnumber、isstring、iskeyword、isurl<br>判断一个值是纯数字，还是某个单位量，可以使用下列函式：ispixel、ispercentage、isem<br>(6)使用and和not关键字实现与条件</p><p>.mixin(@a) when (isnumber (@a) ) and (@a &gt; 0) {…}<br>.mixin(@b) when not ( @b &gt; 0){…}</p><p>嵌套规则<br>（1）以嵌套的方式写层叠样式</p><p>#header { color: black; }</p><p>#header .navigation {<br>  font-size: 12px;<br>}</p><p>#header .logo {<br>  width: 300px;<br>}</p><p>#header .logo:hover {<br>  text-decoration: none;<br>}<br>可以改写成用less语法进行,其中&amp;符号用于写串联选择器，这一点对于伪类选择器有很大的作用。</p><p>#header {<br>  color: black;</p><p>  .navigation {<br>    font-size: 12px;<br>  }<br>  .logo {<br>    width: 300px;<br>    &amp;:hover { text-decoration: none }<br>  }<br>}</p><p><strong>运算</strong></p><blockquote><p>（1）任何数字、颜色都可以参与运算</p></blockquote><p>@base : 10%;<br>@filter : @base * 2;<br>@other : @base + @filter;</p><p>color : #888 / 4;<br>background-color : @base=color + #111;<br>height : 100% / 2 + filterl;</p><blockquote><p>（2）less运算能够分辨颜色和单位</p></blockquote><p>@var  : 1px + 5; –&gt; 6px<br>width  : (@var + 5 ) *2;  //被允许使用括号<br>border: (@width * 2) solid black;    // 可以在符合属性中进行使用<br>函数<br>（1）less本身提供了一系列的颜色运算函数。颜色会被转化成为HSL色彩空间，然后在通道级别操作。</p><p>lighten(@color, 10%);     // 返回一个比@color低10％更轻的颜色<br>darken(@color, 10%);      // 返回一个比@color高10％较暗的颜色<br>saturate(@color, 10%);    // 返回比@color多饱和度10％的颜色<br>desaturate(@color, 10%);  // 返回一个比@color少饱和度10％的颜色<br>fadein(@color, 10%);      // 返回一个比@color少10％透明度的颜色<br>fadeout(@color, 10%);     // 返回一个比@color多10％透明度的颜色<br>fade(@color, 50%);        // 返回一个颜色透明度为50％的颜色<br>spin(@color, 10);         // 返回色调比@color大10度的颜色<br>spin(@color, -10);        // 返回一个比@color小10度色调的颜色<br>mix(@color1, @color2);    // 返回一个混合@ color1和@ color2的颜色<br>举个小栗子：</p><p>@base: #f04615;<br>.class {<br>  color: saturate(@base, 5%);<br>  background-color: lighten(spin(@base, 8), 25%);<br>}<br>（2）可以获取颜色的具体参数</p><p>hue(@color)                     //获取色相<br>saturation(@color)             //获取饱和度<br>lightness(@color)              //获取明度<br>(3)也可以在一种颜色的通道上面创建另外一种颜色,@new 将会保持 @old的 色调, 但是具有不同的饱和度和亮度.</p><p>@new: hsl(hue(@old), 45%, 90%);<br>Math函数<br>less提供了一组方便的数学函数，可以使用它们处理一些数字类型的值。</p><p>round(1.67);  –&gt; returns <code>2</code><br>ceil(2.4);    –&gt; returns <code>3</code><br>floor(2.6);  –&gt; returns <code>2</code><br>percentage(0.5); –&gt; returns <code>50%</code><br>命名空间<br>有时候，我们可能更好地组织CSS或是单纯的为了更好地封装，我们会将会一些变量或是混合模块进行打包操作，为了后续进行复用</p><p>#bundle {<br>  .button () {<br>    display: block;<br>    border: 1px solid black;<br>    background-color: grey;<br>    &amp;:hover { background-color: white }<br>  }<br>  .tab { … }<br>  .citation { … }<br>}<br>当我们想要在某一个地方引入button的样式的时候：</p><p>#header a {<br>  color: orange;</p><p>  #bundle &gt; .button;<br>}</p><p><strong>作用域</strong><br>less的作用域和其他编程语言十分的相似，首先在本地的变量和混合模块进行查找，如果没有找到的话，就会去父及作用域查找，直到找到为止。</p><p>@var: red;</p><p>#page {<br>  @var: white;</p><p>  #header {<br>    color: @var;  –&gt; white<br>  }<br>}</p><p>#footer {<br>  color: @var;  –&gt; red<br>}<br>importing(导入)<br>我们如果想要引入less文件，.less的后缀可以有可以没有</p><p>@import “lib.less”;<br>@import “lib”;<br>但是想要导入一个CSS文件而且不希望less对它进行处理，只要加上CSS后缀就可以了。这样的话less就可以跳过，不去处理他了。</p><p>import “lib.css”;<br>字符串插值<br>变量可以用类似ruby和php的方式嵌入到字符串中，像@{name}这样的结构</p><p>@base-url: “<a href="https://huanhuanlove.github.io&quot;">https://huanhuanlove.github.io&quot;</a>;<br>background-image: url(“@{base-url}/images/bg.png”);<br>避免编译<br>有时候我们需要输出一些不正确的CSS语法或者使用一些 less不认识的专有语法。要输出这样的值我们可以在字符串前加上一个 ~，并将要避免编译的值用 “”包含起来。</p><p>.class {<br>  filter: ~”ms:alwaysHasItsOwnSyntax.For.Stuff()”;<br>}<br>结果是：</p><p>.class {<br>  filter: ms:alwaysHasItsOwnSyntax.For.Stuff();<br>}<br>JavaScript表达式<br>（1）JavaScript 表达式也可以在.less 文件中使用. 可以通过反引号的方式使用:</p><p>@var: <code>&quot;hello&quot;.toUpperCase() + &#39;!&#39;</code>;   –&gt; @var :”HELLO!”<br>（2）也可以同时使用字符串插值和避免编译</p><p>@str: “hello”;<br>@var: ~<code>&quot;@{str}&quot;.toUpperCase() + &#39;!&#39;</code>;  –&gt; @var: HELLO!;<br>（3）可以访问JavaScript的环境</p><p>@height: <code>document.body.clientHeight</code>;<br>（4）将一个JavaScript字符串解析成16进制的颜色值，可以使用 color 函数</p><p>@color: color(<code>window.colors.baseColor</code>);<br>@darkcolor: darken(@color, 10%);</p>]]></content>
      
      
      <categories>
          
          <category> less </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解Docker挂载</title>
      <link href="/2019/06/12/shen-ru-liao-jie-docker-gua-zai/"/>
      <url>/2019/06/12/shen-ru-liao-jie-docker-gua-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker挂载Centos进行JDK、Tomcat-的安装"><a href="#Docker挂载Centos进行JDK、Tomcat-的安装" class="headerlink" title="Docker挂载Centos进行JDK、Tomcat 的安装"></a>Docker挂载Centos进行JDK、Tomcat 的安装</h2><h3 id="1、下载安装Docker–其他文章已经讲解"><a href="#1、下载安装Docker–其他文章已经讲解" class="headerlink" title="1、下载安装Docker–其他文章已经讲解"></a>1、下载安装Docker–其他文章已经讲解</h3><h3 id="2、开启Dcoker服务，并使其开机自启"><a href="#2、开启Dcoker服务，并使其开机自启" class="headerlink" title="2、开启Dcoker服务，并使其开机自启"></a>2、开启Dcoker服务，并使其开机自启</h3><pre class=" language-javascript"><code class="language-javascript">systemctl start dockersystemctl enbale docker</code></pre><h3 id="3、下载Centos镜像"><a href="#3、下载Centos镜像" class="headerlink" title="3、下载Centos镜像"></a>3、下载Centos镜像</h3><pre class=" language-javascript"><code class="language-javascript">docker images  <span class="token operator">--</span><span class="token operator">></span> 查看镜像docker search centos  <span class="token operator">--</span><span class="token operator">></span> 搜索镜像docker pull centos  <span class="token operator">--</span><span class="token operator">></span>  拉取镜像</code></pre><p><img src="https://i.loli.net/2019/11/30/akuvCoXrbHSghDG.png" alt="kang"></p><h3 id="4、在本地新建文件夹，用于后面centos镜像运行时候的挂载"><a href="#4、在本地新建文件夹，用于后面centos镜像运行时候的挂载" class="headerlink" title="4、在本地新建文件夹，用于后面centos镜像运行时候的挂载"></a>4、在本地新建文件夹，用于后面centos镜像运行时候的挂载</h3><pre class=" language-javascript"><code class="language-javascript">mkdir <span class="token operator">-</span>p <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>centos</code></pre><h3 id="5、将准备安装的JDK、Tomcat-压缩包放到此目录下"><a href="#5、将准备安装的JDK、Tomcat-压缩包放到此目录下" class="headerlink" title="5、将准备安装的JDK、Tomcat 压缩包放到此目录下"></a>5、将准备安装的JDK、Tomcat 压缩包放到此目录下</h3><p>Tomcat下载地址：<a href="http://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.29/bin/apache-tomcat-9.0.29.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.29/bin/apache-tomcat-9.0.29.tar.gz</a></p><p>JDK下载地址：<a href="https://download.oracle.com/otn-pub/java/jdk/13.0.1+9/cec27d702aa74d5a8630c65ae61e4305/jdk-13.0.1_linux-x64_bin.tar.gz" target="_blank" rel="noopener">https://download.oracle.com/otn-pub/java/jdk/13.0.1+9/cec27d702aa74d5a8630c65ae61e4305/jdk-13.0.1_linux-x64_bin.tar.gz</a></p><h3 id="6、运行-centos-镜像"><a href="#6、运行-centos-镜像" class="headerlink" title="6、运行 centos 镜像"></a>6、运行 centos 镜像</h3><pre class=" language-javascript"><code class="language-javascript">docker run <span class="token operator">-</span>it <span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span> <span class="token operator">--</span>privileged<span class="token operator">=</span><span class="token boolean">true</span> 镜像id bash   <span class="token operator">--</span><span class="token operator">></span> 运行并进入容器<span class="token operator">-</span>v：表示需要将本地哪个目录挂载到容器中，格式：<span class="token operator">-</span>v <span class="token operator">&lt;</span>宿主机目录<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>容器目录<span class="token operator">></span><span class="token operator">--</span>privileged<span class="token operator">=</span><span class="token boolean">true</span> 使用该参数，container内的root拥有真正的root权限。</code></pre><p><img src="https://i.loli.net/2019/11/30/L8ZjAxgEN1HKIa6.png" alt="kang"></p><h3 id="7、进入-mnt-centos-文件夹下进行文件的解压，并配置Java环境"><a href="#7、进入-mnt-centos-文件夹下进行文件的解压，并配置Java环境" class="headerlink" title="7、进入 mnt/centos/ 文件夹下进行文件的解压，并配置Java环境"></a>7、进入 mnt/centos/ 文件夹下进行文件的解压，并配置Java环境</h3><pre class=" language-javascript"><code class="language-javascript">tar <span class="token operator">-</span>zxvf apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">29</span>  <span class="token operator">--</span><span class="token operator">></span>  解压tomcattar <span class="token operator">-</span>zxvf jdk<span class="token number">-13.0</span><span class="token punctuation">.</span>1_linux<span class="token operator">-</span>x64_bin<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">--</span><span class="token operator">></span>  解压JDKmv apache<span class="token operator">-</span>tomcat<span class="token number">-9.0</span><span class="token punctuation">.</span><span class="token number">29</span>  tomcat  <span class="token operator">--</span><span class="token operator">></span>  重命名mv jdk<span class="token number">-13.0</span><span class="token punctuation">.</span><span class="token number">1</span> java   <span class="token operator">--</span><span class="token operator">></span>  重命名vi <span class="token operator">/</span>etc<span class="token operator">/</span>profile  <span class="token operator">--</span><span class="token operator">></span>  编辑此文件，在最后末尾加入如下内容：<span class="token keyword">export</span> JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span>java<span class="token keyword">export</span> PATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>bin<span class="token punctuation">:</span>$PATH<span class="token keyword">export</span> CLASSPATH<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jarsource <span class="token operator">/</span>etc<span class="token operator">/</span>profile  <span class="token operator">--</span><span class="token operator">></span>  使此文件生效java <span class="token operator">-</span>version  <span class="token operator">--</span><span class="token operator">></span>  查看Java版本</code></pre><p><img src="https://i.loli.net/2019/11/30/uhzr5CSnf73ictY.png" alt="kang"></p><h3 id="8、配置-Tomcat-环境"><a href="#8、配置-Tomcat-环境" class="headerlink" title="8、配置 Tomcat 环境"></a>8、配置 Tomcat 环境</h3><pre class=" language-javascript"><code class="language-javascript">vi <span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span>tomcat<span class="token operator">/</span>bin<span class="token operator">/</span>catalina<span class="token punctuation">.</span>sh   <span class="token operator">--</span><span class="token operator">></span> 修改 Tomcat 文件，添加如下内容<span class="token punctuation">:</span><span class="token keyword">export</span> JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span>java  <span class="token operator">--</span><span class="token operator">></span>  JDK安装路径<span class="token keyword">export</span> JRE_HOME<span class="token operator">=</span><span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span>java  vi <span class="token operator">/</span>root<span class="token operator">/</span>run<span class="token punctuation">.</span>sh   <span class="token operator">--</span><span class="token operator">></span>  添加启动脚本，内容如下：#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashsource <span class="token operator">/</span>etc<span class="token operator">/</span>profilesh <span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span>tomcat<span class="token operator">/</span>bin<span class="token operator">/</span>catalina<span class="token punctuation">.</span>sh runchmod u<span class="token operator">+</span>x <span class="token operator">/</span>root<span class="token operator">/</span>run<span class="token punctuation">.</span>sh  <span class="token operator">--</span><span class="token operator">></span> 修改文件权限exit  <span class="token operator">--</span><span class="token operator">></span>  退出此容器docker ps <span class="token operator">-</span>a  <span class="token operator">--</span><span class="token operator">></span>  查看所有容器</code></pre><p><img src="https://i.loli.net/2019/11/30/BrLRyOYFnH4dEQv.png" alt="kang"></p><h3 id="9、构建自己的镜像"><a href="#9、构建自己的镜像" class="headerlink" title="9、构建自己的镜像"></a>9、构建自己的镜像</h3><pre class=" language-javascript"><code class="language-javascript">docker commit 容器id mycentos<span class="token punctuation">:</span>v1   <span class="token operator">--</span><span class="token operator">></span>  构建镜像docker run <span class="token operator">-</span>d  <span class="token operator">-</span>p <span class="token number">80</span><span class="token punctuation">:</span><span class="token number">8080</span> <span class="token operator">--</span>name mytest   <span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>mnt<span class="token operator">/</span>centos<span class="token operator">/</span> 镜像id <span class="token operator">/</span>root<span class="token operator">/</span>run<span class="token punctuation">.</span>sh  <span class="token operator">--</span><span class="token operator">></span>  启动自己的及镜像</code></pre><p><img src="https://i.loli.net/2019/11/30/PmDz4EIynif6H9w.png" alt="kang"></p><h3 id="10、访问容器中的-Tomcat-地址，即可查看结果"><a href="#10、访问容器中的-Tomcat-地址，即可查看结果" class="headerlink" title="10、访问容器中的 Tomcat 地址，即可查看结果"></a>10、访问容器中的 Tomcat 地址，即可查看结果</h3><p><img src="https://i.loli.net/2019/11/30/cioXUhD3nBlGMuP.png" alt="kang"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
